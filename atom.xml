<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨二小</title>
  <subtitle>Variety is the spice of life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zerosoul.github.io/"/>
  <updated>2016-06-17T05:50:52.000Z</updated>
  <id>http://zerosoul.github.io/</id>
  
  <author>
    <name>杨二小</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>世界那么大，TA们想看看</title>
    <link href="http://zerosoul.github.io/2016/06/17/take-parents-to-beijing/"/>
    <id>http://zerosoul.github.io/2016/06/17/take-parents-to-beijing/</id>
    <published>2016-06-17T02:27:49.000Z</published>
    <updated>2016-06-17T05:50:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;去年夏天把父母和奶奶接北京玩了几天，担心奶奶体力问题，还备用了轮椅。结果几天下来，老人家依然劲头十足，我却累蔫儿了。&lt;/p&gt;&lt;p&gt;好吧，以上不是重点，重点是游玩期间我做了个视频，放在了&lt;a href=&quot;https://vimeo.com/146186682&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网上&lt;/a&gt;（可以直接跳到文章底部观看）。令我惊讶的是，半年多过去了，突然有歪果仁来了封邮件，问视频是怎么做的：&lt;strong&gt;How did you accomplish it?Amazing!&lt;/strong&gt;。哎，这个没见过世面的歪果仁，&lt;a href=&quot;https://vimeo.com/channels/staffpicks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimeo&lt;/a&gt;上的视频一个比一个精彩，如果排行的话，我只能垫底。不过这位歪果仁兄既然诚心诚意地发问，我也就很负责任地回复了：&lt;strong&gt;iPhone6 + iMovie + selfie stick&lt;/strong&gt;。对，很简洁，很任性，很清真，我大概能猜到歪果仁看到后的表情：(╯‵□′)╯︵┻━┻。&lt;/p&gt;&lt;h1 id=&quot;视频&quot;&gt;&lt;a href=&quot;#视频&quot; class=&quot;headerlink&quot; title=&quot;视频&quot;&gt;&lt;/a&gt;视频&lt;/h1&gt;&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/146186682?loop=1&amp;color=ffffff&amp;title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p style=&quot;text-align:center;width:100%&quot;&gt;世界那么大 TA们想看看&lt;/p&gt;&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h1&gt;&lt;p&gt;其实不只歪果仁，有些国内的朋友也问过我几次同样的问题，那么有必要罗列下当初用到的工具，仅供参考。&lt;/p&gt;&lt;h2 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;iPhone 6 64G：应该是刚买了没多久，就拿来录像了，效果挺好的。庆幸当初选择的是64G，否则后面内存就捉襟见肘了。&lt;/li&gt;&lt;li&gt;iPad Air：主要用来编辑视频，使用自带的iMovie&lt;/li&gt;&lt;li&gt;Macbook Pro：用来上传视频，好吧，有点打酱油的一个硬件&lt;/li&gt;&lt;li&gt;自拍杆（带遥控）：淘宝了一个，链接点&lt;a href=&quot;https://detail.tmall.com/item.htm?id=42154967278&amp;amp;spm=a1z09.2.0.0.lBofG8&amp;amp;_u=h4gsni3a18f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;100元左右就能买个带遥控功能的，还有三脚架功能，好神奇。不过用过之后随即就打入冷宫了，后来送给了我哥。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;iMovie：苹果操作系统自带的视频编辑软件，功能足够，如果不太熟悉操作，可以移步&lt;a href=&quot;http://www.apple.com/cn/ios/imovie/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;先了解下。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://vimeo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimeo&lt;/a&gt;：一个高清视频社区网站，我试过上传优酷，清晰度不好，又尝试秒拍，结果时长有限制。最后只好使用歪果仁的服务了，唯一担心的就是流畅性，试了试，还不错。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;拍摄地点&quot;&gt;&lt;a href=&quot;#拍摄地点&quot; class=&quot;headerlink&quot; title=&quot;拍摄地点&quot;&gt;&lt;/a&gt;拍摄地点&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;天安门广场&lt;/li&gt;&lt;li&gt;故宫&lt;/li&gt;&lt;li&gt;颐和园&lt;/li&gt;&lt;li&gt;圆明园&lt;/li&gt;&lt;li&gt;鸟巢&amp;amp;水立方&lt;/li&gt;&lt;li&gt;地铁&amp;amp;住所&amp;amp;路上&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;最后再说一句&quot;&gt;&lt;a href=&quot;#最后再说一句&quot; class=&quot;headerlink&quot; title=&quot;最后再说一句&quot;&gt;&lt;/a&gt;最后再说一句&lt;/h1&gt;&lt;p&gt;工具固然要有，但想法和执行更重要。That’s all!&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;去年夏天把父母和奶奶接北京玩了几天，担心奶奶体力问题，还备用了轮椅。结果几天下来，老人家依然劲头十足，我却累蔫儿了。&lt;/p&gt;&lt;p&gt;好吧，以上
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="游玩" scheme="http://zerosoul.github.io/tags/%E6%B8%B8%E7%8E%A9/"/>
    
      <category term="iphone6" scheme="http://zerosoul.github.io/tags/iphone6/"/>
    
      <category term="iMovie" scheme="http://zerosoul.github.io/tags/iMovie/"/>
    
      <category term="北京" scheme="http://zerosoul.github.io/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="歪果仁" scheme="http://zerosoul.github.io/tags/%E6%AD%AA%E6%9E%9C%E4%BB%81/"/>
    
      <category term="vimeo" scheme="http://zerosoul.github.io/tags/vimeo/"/>
    
  </entry>
  
  <entry>
    <title>React Native之美：构建我的第一个iOS APP（2）</title>
    <link href="http://zerosoul.github.io/2016/06/07/building-my-first-ios-app-with-react-native-part-two/"/>
    <id>http://zerosoul.github.io/2016/06/07/building-my-first-ios-app-with-react-native-part-two/</id>
    <published>2016-06-07T02:50:49.000Z</published>
    <updated>2016-06-12T08:10:31.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;rn.png&quot; alt=&quot;React Native&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;再续前缘&quot;&gt;&lt;a href=&quot;#再续前缘&quot; class=&quot;headerlink&quot; title=&quot;再续前缘&quot;&gt;&lt;/a&gt;再续前缘&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/&quot;&gt;第一篇文章&lt;/a&gt;，我们从零开始，一步一步走到最后，构建了一个似乎并没有卵用的APP。但是，我们做了大量的基础工作，不就是为了在接下来的继续更轻松自信些嘛！&lt;br&gt;&lt;img src=&quot;zdw.jpg&quot; alt=&quot;wtf&quot;&gt;&lt;br&gt;其实，第一篇的信息量还是很大的，里面的每一个链接都是通往一个新知的大门，如果你觉得掌握得差不多了，那就开始新的旅（Che）程（Dan）吧！&lt;br&gt;&lt;img src=&quot;haha.png&quot; alt=&quot;你懂的&quot;&gt;&lt;br&gt;第二篇文章也是分五小节叙述，每一节完成一个小功能，最终召唤出还算有点卵用的APP。&lt;/p&gt;&lt;h1 id=&quot;1-召唤出壁纸和作者&quot;&gt;&lt;a href=&quot;#1-召唤出壁纸和作者&quot; class=&quot;headerlink&quot; title=&quot;1.召唤出壁纸和作者&quot;&gt;&lt;/a&gt;1.召唤出壁纸和作者&lt;/h1&gt;&lt;p&gt;首先，我们先研究下数据，下面是从&lt;a href=&quot;https://unsplash.it/list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unsplash&lt;/a&gt;获取的一个数据实例：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author:&amp;quot;Ben Moore&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author_url:&amp;quot;https://unsplash.com/@benmoore&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filename:&amp;quot;0102_pJILiyPdrXI.jpeg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format:&amp;quot;jpeg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height:3240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id:102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    post_url:&amp;quot;https://unsplash.com/photos/pJILiyPdrXI&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width:4320 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;要想获取该实例的图片，在浏览器中输入以下格式的URL&lt;code&gt;http://unsplash.it/{width}/{height}?image={id}&lt;/code&gt;，换算到该实例即：&lt;a href=&quot;http://unsplash.it/4320/3240?image=102&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;http://unsplash.it/4320/3240?image=102&lt;/code&gt;&lt;/a&gt;。这样，我们就能拿到一张壁纸的地址了。我们可以用&lt;code&gt;Image&lt;/code&gt;组件中的&lt;code&gt;source&lt;/code&gt;来把图片加载出来。&lt;/p&gt;&lt;p&gt;但是，进一步想了想，这么大的图片会有一定的加载时间，最好能有个图片的加载进度什么的，让用户不再一脸懵逼地等着。一开始就做对，后面的修改成本会小很多，有两个组件的组合能够做到预期效果：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/oblador/react-native-image-progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;image-native-progress&lt;/strong&gt;&lt;/a&gt;和&lt;a href=&quot;https://github.com/oblador/react-native-progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;react-native-progress&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在项目根目录下运行命令：&lt;code&gt;npm i --save react-native-image-progress react-native-progress&lt;/code&gt;，然后，我们在&lt;strong&gt;index.ios.js&lt;/strong&gt;中引用：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var NetworkImage = require(&amp;apos;react-native-image-progress&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var Progress = require(&amp;apos;react-native-progress&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然要做手机壁纸应用，那么就应该得到手机屏幕的长和宽：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var &amp;#123;width, height&amp;#125; = React.Dimensions.get(&amp;apos;window’);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;哦对了，为了去掉烦人的&lt;code&gt;React.Dimensions&lt;/code&gt;，可以在头部引入&lt;code&gt;Dimensions&lt;/code&gt;组件：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AppRegistry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  StyleSheet,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ActivityIndicatorIOS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Dimensions &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样，我们就可以在&lt;code&gt;renderResults&lt;/code&gt;中使用&lt;code&gt;NetworkImage&lt;/code&gt;了：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Swiper ... &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;wallsJSON.map((wallpaper, index) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;View key=&amp;#123;index&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;NetworkImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          source=&amp;#123;&amp;#123;uri: `https://unsplash.it/$&amp;#123;wallpaper.width&amp;#125;/$&amp;#123;wallpaper.height&amp;#125;?image=$&amp;#123;wallpaper.id&amp;#125;`&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          indicator=&amp;#123;Progress.Circle&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          style=&amp;#123;styles.wallpaperImage&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/NetworkImage&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Swiper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：此处&lt;code&gt;NetworkImage&lt;/code&gt;的&lt;code&gt;uri&lt;/code&gt;特性用到了ES6的模板字符串特性，懵逼的同学去&lt;a href=&quot;http://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/#先谈谈需求&quot;&gt;上一篇文章&lt;/a&gt;找链接复习一下哈。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;再加个样式：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wallpaperImage: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: width,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  backgroundColor: ‘#000’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;保存然后刷新模拟器，不出意外的话…你将看到一堆报错的页面。&lt;br&gt;&lt;img src=&quot;long.jpg&quot; alt=&quot;成龙&quot;&gt;&lt;br&gt;别慌，我们来研究下刚刚加的代码，注意到&lt;code&gt;indicator={Progress.Circle}&lt;/code&gt;没有？在&lt;code&gt;react-native-progress&lt;/code&gt;文档里有提到（别告诉我你没看&lt;a href=&quot;https://github.com/oblador/react-native-progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;(╯‵□′)╯︵┻━┻），&lt;code&gt;Progress.Circle&lt;/code&gt;需要&lt;strong&gt;ReactART&lt;/strong&gt;：使用React来画矢量图的类库。我们不需要下载任何新东西，只需要通过Xcode将其引入到项目中。&lt;br&gt;很简单，只是有点繁琐：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;移步 &lt;code&gt;node_modules/react-native/Libraries/ART/&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;dir.png&quot; alt=&quot;art目录&quot;&gt;&lt;/li&gt;&lt;li&gt;将&lt;em&gt;ART.xcodeproj&lt;/em&gt;拖拽到Xcode的&lt;em&gt;PIW/Libraries&lt;/em&gt;下&lt;br&gt;&lt;img src=&quot;libs.png&quot; alt=&quot;libs&quot;&gt;&lt;/li&gt;&lt;li&gt;定位到&lt;em&gt;Build Phases&lt;/em&gt;，友情提示：它与&lt;em&gt;General&lt;/em&gt;,&lt;em&gt;Capabilities&lt;/em&gt;等同级。&lt;br&gt;&lt;img src=&quot;buildphase.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;li&gt;将&lt;em&gt;ART.xcodeproj/Products&lt;/em&gt;下的&lt;em&gt;libART.a&lt;/em&gt;拖拽到&lt;em&gt;Build Phases&lt;/em&gt;下的&lt;em&gt;Link Binary With Libraries&lt;/em&gt;条目下：&lt;br&gt;&lt;img src=&quot;linklib.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;就这么简单，全是些拖拖拽拽的活儿。&lt;/p&gt;&lt;p&gt;然后，刷新模拟器。酷！我们已经能够看到带加载进度的壁纸，并且能左右滑动浏览。有没有碰到心动的图片？载下来？莫慌，待会儿来满足你。现在，我们先修改下进度提示的样式，这个在&lt;code&gt;NetworkImage&lt;/code&gt;下的&lt;code&gt;indicatorProps&lt;/code&gt;可以设置：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;NetworkImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  source=&amp;#123;&amp;#123;uri: `https://unsplash.it/$&amp;#123;wallpaper.width&amp;#125;/$&amp;#123;wallpaper.height&amp;#125;?image=$&amp;#123;wallpaper.id&amp;#125;`&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  indicator=&amp;#123;Progress.Circle&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  style=&amp;#123;styles.wallpaperImage&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  indicatorProps=&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color:&amp;apos;rgba(255,255,255,0.8)&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size:50,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thickness:4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/NetworkImage&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;修改后进度提示应该长这样：&lt;br&gt;&lt;img src=&quot;indicator.png&quot; alt=&quot;indicator&quot;&gt;&lt;/p&gt;&lt;p&gt;接下来，把图片的作者名字加上，我们要做尊重知识版权的好公民：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;NetworkImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Text style=&amp;#123;styles.label&amp;#125;&amp;gt;Photo by&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Text style=&amp;#123;styles.label_author_name&amp;#125;&amp;gt;&amp;#123;wallpaper.author&amp;#125;&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/NetworkImage&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;别忘了创建各自对应的样式对象：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;label:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:&amp;apos;absolute&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color:&amp;apos;#fff&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fontSize:13,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backgroundColor:&amp;apos;#000&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    padding:5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    paddingLeft:8,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:20,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left:20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;label_author_name:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:&amp;apos;absolute&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color:&amp;apos;#fff&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fontSize:15,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backgroundColor:&amp;apos;#000&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    padding:5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    paddingLeft:8,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:52,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left:20,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fontWeight:&amp;apos;bold&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;来来来，我们瞅瞅加了作者后的效果：&lt;br&gt;&lt;img src=&quot;withauthor.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;有木有瞬间感觉像那么回事儿了！&lt;br&gt;&lt;img src=&quot;dese.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;走到这儿，这一节算完事儿了，为了能下载壁纸，我们将在下一节做一些更加有技术含量的事儿。&lt;/p&gt;&lt;h1 id=&quot;2-捕捉双击操作-Double-Taps&quot;&gt;&lt;a href=&quot;#2-捕捉双击操作-Double-Taps&quot; class=&quot;headerlink&quot; title=&quot;2. 捕捉双击操作(Double-Taps)&quot;&gt;&lt;/a&gt;2. 捕捉双击操作(Double-Taps)&lt;/h1&gt;&lt;p&gt;这一节我们要用到的是PanResponder，这个API能做一些很酷的事情，比如捕捉双击操作。&lt;/p&gt;&lt;p&gt;其实，如果偷懒，完全可以在页面上放一个下载按钮，点击就下载，完活儿！但是，我们要做就做有逼格的事儿，双击图片下载就很符合这个档次，恩，撸起袖子干吧！&lt;/p&gt;&lt;p&gt;在开始之前，最好阅读一遍&lt;a href=&quot;https://facebook.github.io/react-native/docs/panresponder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PanResponder API&lt;/a&gt;文档，因为你不读一遍，也不知道这个文档其实也没啥卵用o(╯□╰)o。不过我们至少知道了PanResponder的基本用法，这就够了。&lt;/p&gt;&lt;p&gt;废话少说，开始撸代码。首先，在构造函数里声明一个新对象：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.imagePanResponder = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;别忘了在顶部引入&lt;code&gt;PanResponder&lt;/code&gt;的声明：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AppRegistry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  StyleSheet,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ActivityIndicatorIOS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PanResponder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接下来我们要做两件事：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;创建一个&lt;code&gt;PanResponder&lt;/code&gt;并赋值&lt;code&gt;imagePanResponder&lt;/code&gt;&lt;/li&gt;&lt;li&gt;将&lt;code&gt;imagePanResponder&lt;/code&gt;关联到&lt;code&gt;&amp;lt;NetworkImage&amp;gt;&lt;/code&gt;组件&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了完成第一件事，需要新增一个生命周期函数:&lt;code&gt;componentWillMount&lt;/code&gt;。这个函数只有在组件首次渲染时才会触发，所以非常适合用于初始化&lt;code&gt;PanResponder&lt;/code&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.imagePanResponder = PanResponder.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      onPanResponderGrant: this.handlePanResponderGrant,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      onPanResponderRelease: this.handlePanResponderEnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      onPanResponderTerminate: this.handlePanResponderEnd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;初始化完了，就可以将这些事件关联到&lt;code&gt;NetworkImage&lt;/code&gt;组件了：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;...this.imagePanResponder.panHandlers&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注：&lt;code&gt;...&lt;/code&gt;是ES6中的扩展运算符，如果懵逼，请移步&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;充电。&lt;/p&gt;&lt;p&gt;一般来说，一个触摸事件有三个阶段：开始（start）、移动（move）、释放（release），一个组件能够通过声明响应特定的触摸事件。&lt;code&gt;PanResponder.create({...&lt;/code&gt;下提到的第一个事件&lt;code&gt;onStartShouldSetPanResponder&lt;/code&gt;，从英文名字的意思大概也能猜出，这是在请求是否能将&lt;code&gt;PanResponder&lt;/code&gt;绑定在该组件上。紧跟其后是一个方法&lt;code&gt;this.handleOnStartShouldSetPanResponder&lt;/code&gt;，用于响应该事件，若该方法返回&lt;code&gt;true&lt;/code&gt;，则通过请求，然后才能谈下一步，&lt;code&gt;false&lt;/code&gt;则相反。所以，你应该知道在此我们应该返回什么，认清你的阶级立场，同志，老大哥在看着你：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handleStartShouldSetPanResponder(e, gestureState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;紧随其后的&lt;code&gt;onPanResponderGrant&lt;/code&gt;是在一旦有了触摸时触发，在此我们先打印一个信息占个坑：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handlePanResponderGrant()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;quot;手指触摸到屏幕啦~~~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后两个事件从字面上也都能自解释，在手指离开屏幕时，都能触发，在此我们还是先打印信息占个坑：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handlePanResponderEnd()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;quot;手指离开屏幕啦~~~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;保存代码，壁纸一旦加载完毕，点击一下，应该会看到如下打印信息：&lt;br&gt;&lt;img src=&quot;touched.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;OK，基于这些认知，我们可以开始捕捉双击操作了。判断是否为双击操作的关键是需要知道上一操作的信息：触摸发生的&lt;strong&gt;坐标&lt;/strong&gt;和&lt;strong&gt;时间戳&lt;/strong&gt;。在构造函数新增对象&lt;code&gt;prevTouchInfo&lt;/code&gt;用于保存触摸信息：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.prevTouchInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  X: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Y: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeStamp: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后，在&lt;code&gt;handlePanResponderGrant&lt;/code&gt;更新这个对象(注意代码的次序)：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handlePanResponderGrant(e, gestureState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var currentTouchTimeStamp = Date.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if( this.isDoubleTap(currentTouchTimeStamp, gestureState) ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;双击操作&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.prevTouchInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X: gestureState.x0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y: gestureState.y0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeStamp: currentTouchTimeStamp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;handlePanResponderGrant&lt;/code&gt;在每次单击时都会触发，但是有个地方需要特别注意：此处的&lt;code&gt;this&lt;/code&gt;并不是指向&lt;code&gt;PIW&lt;/code&gt;类，而是&lt;code&gt;PanResponder&lt;/code&gt;，为了正确的引用，我们需要在构造函数使用&lt;code&gt;bind&lt;/code&gt;重新定向一下。而如果我们一开始选用&lt;code&gt;React.createClass({ ... })&lt;/code&gt;来创建组件，就不会存在这个问题，&lt;strong&gt;autobinding&lt;/strong&gt;会帮我们搞定这个问题。也算有得有失吧:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.handlePanResponderGrant = this.handlePanResponderGrant.bind(this);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;isDoubleTap&lt;/code&gt;是我们预先埋好的坑，下面我们填上它：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;isDoubleTap(currentTouchTimeStamp, &amp;#123;x0, y0&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;X, Y, timeStamp&amp;#125; = this.prevTouchInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var dt = currentTouchTimeStamp - timeStamp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (dt &amp;lt; DOUBLE_TAP_DELAY &amp;amp;&amp;amp; Utils.distance(X, Y, x0, y0) &amp;lt; DOUBLE_TAP_RADIUS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好吧，你可能会注意到了，坑里有坑：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;DOUBLE_TAP_DELAY&lt;/code&gt;和&lt;code&gt;DOUBLE_TAP_RADIUS&lt;/code&gt;是我们定义的常量，需要在头部初始化一下:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const DOUBLE_TAP_DELAY = 400; // milliseconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const DOUBLE_TAP_RADIUS = 20;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;新建一个模块&lt;strong&gt;utils.js&lt;/strong&gt;，暴露出&lt;code&gt;distance&lt;/code&gt;：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;distance(x0, y0, x1, y1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return Math.sqrt( Math.pow(( x1 - x0 ), 2) + Math.pow(( y1 - y0 ), 2) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;distance&lt;/code&gt;是用来计算两个坐标之间的直线距离，还记得中学的几何公式吗？&lt;br&gt;&lt;img src=&quot;distance.png&quot; alt=&quot;distance&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;handlePanResponderGrant&lt;/code&gt;最后一步是更新&lt;code&gt;prevTouchInfo&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;保存代码，等壁纸加载完毕，双击屏幕，如果不出意外的话，控制台里会输出:&lt;strong&gt;双击操作&lt;/strong&gt;。&lt;/p&gt;&lt;h1 id=&quot;3-将壁纸保存到本地相册&quot;&gt;&lt;a href=&quot;#3-将壁纸保存到本地相册&quot; class=&quot;headerlink&quot; title=&quot;3.将壁纸保存到本地相册&quot;&gt;&lt;/a&gt;3.将壁纸保存到本地相册&lt;/h1&gt;&lt;p&gt;现在我们能捕捉到双击的手势了，也就可以开始着手撸保存壁纸的代码了。首先，我们把console代码替换成一个调用的方法，先占坑。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if( isDoubleTap(currentTouchTimeStamp, gestureState) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.saveCurrentWallpaperToCameraRoll();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一会儿我们再来实现&lt;code&gt;saveCurrentWallpaperToCameraRoll&lt;/code&gt;，下面我们先来看另一个问题：壁纸有五张，如何定位当前的这一张？&lt;br&gt;我们可以通过从零开始的索引来定位当前图片，每滑动一次就加1或者减1:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.currentWallIndex = 0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还记得上一篇我们预留的一个坑位吗？&lt;code&gt;Swiper&lt;/code&gt;里的&lt;code&gt;onMomentumScrollEnd&lt;/code&gt;，在该方法里更新&lt;code&gt;currentWallIndex&lt;/code&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onMomentumScrollEnd(e, state, context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.currentWallIndex = state.index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同样的，别忘了在&lt;code&gt;constructor&lt;/code&gt;里绑定&lt;code&gt;this&lt;/code&gt;:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.onMomentumScrollEnd = this.onMomentumScrollEnd.bind(this);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;好了，我们开始为&lt;code&gt;saveCurrentWallpaperToCameraRoll&lt;/code&gt;填坑了。为了能访问相册，需要先引入&lt;code&gt;Camera Roll&lt;/code&gt;类库，还记得开头是怎么引入&lt;code&gt;ReactART&lt;/code&gt;的吗？没错，照做一遍就可以：&lt;code&gt;node_modules/react-native/Libraries/CameraRoll&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;cameraroll.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;然后就可以导入了：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  StyleSheet,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Dimensions,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PanResponder,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CameraRoll, // 访问相册&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AlertIOS // iOS的弹出框&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一旦壁纸保存到相册，我们需要给用户一个保存成功的提示，&lt;code&gt;AlertIOS&lt;/code&gt;帮我们做到这一点。现在，我们可以着手实现&lt;code&gt;saveCurrentWallpaperToCameraRoll&lt;/code&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;saveCurrentWallpaperToCameraRoll() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;wallsJSON&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var currentWall = wallsJSON[this.currentWallIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var currentWallURL = `http://unsplash.it/$&amp;#123;currentWall.width&amp;#125;/$&amp;#123;currentWall.height&amp;#125;?image=$&amp;#123;currentWall.id&amp;#125;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CameraRoll.saveImageWithTag(currentWallURL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then((data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AlertIOS.alert(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;apos;保存成功&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;apos;壁纸已保存到本地相册&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;text: &amp;apos;好哒!&amp;apos;, onPress: () =&amp;gt; console.log(&amp;apos;OK Pressed!&amp;apos;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch((err) =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;Error saving to camera roll&amp;apos;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上代码都能做到自解释，不懂的地方移步：&lt;a href=&quot;https://facebook.github.io/react-native/docs/cameraroll.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CameraRoll&lt;/a&gt;和&lt;a href=&quot;https://facebook.github.io/react-native/docs/alertios.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlertIOS&lt;/a&gt;，你懂的。&lt;/p&gt;&lt;p&gt;好啦，保存代码，去模拟器体验一下保存壁纸功能：（首次保存需要手动同意获取访问相册的权限）&lt;br&gt;&lt;img src=&quot;saved.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;完美！额，等等，从双击到壁纸保存成功，好像有那么几秒的等待时间，用户可能会认为双击不成功，然后再双击一次，这不是我们的期望，下一节专门解决这个问题！&lt;/p&gt;&lt;h1 id=&quot;4-创建一个等待组件：Waiting-js&quot;&gt;&lt;a href=&quot;#4-创建一个等待组件：Waiting-js&quot; class=&quot;headerlink&quot; title=&quot;4.创建一个等待组件：Waiting.js&quot;&gt;&lt;/a&gt;4.创建一个等待组件：Waiting.js&lt;/h1&gt;&lt;p&gt;如果没记错的话，我们将创建第一个组件：Waiting.js。这个组件用于异步操作的等待时间，比如保存壁纸到相册的操作，就很有必要加一个等待提示，让用户知道APP在做什么。&lt;/p&gt;&lt;p&gt;在项目根目录新建文件：&lt;strong&gt;Waiting.js&lt;/strong&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Component,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ActivityIndicatorIOS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class default Waiting extends Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(props); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &amp;#123;width, height, isVisible&amp;#125; = this.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if( isVisible ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;View &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         style=&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flexDirection: &amp;apos;row&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          justifyContent: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          alignItems: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          width: width,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          height: height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          position: &amp;apos;absolute&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          top: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          left: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          backgroundColor: &amp;apos;rgba(0, 0, 0, 0.5)&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;ActivityIndicatorIOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            animating=&amp;#123;true&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color=&amp;#123;&amp;apos;#fff&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            size=&amp;#123;&amp;apos;large&amp;apos;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            style=&amp;#123;&amp;#123;margin: 15&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;Text style=&amp;#123;&amp;#123;color:’#fff’&amp;#125;&amp;#125;&amp;gt;正在保存，请稍后...&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/View&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return(&amp;lt;View&amp;gt;&amp;lt;/View&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = Waiting;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;render&lt;/code&gt;第一行代码作用是从组件的&lt;code&gt;props&lt;/code&gt;中获取相应的属性，其中&lt;code&gt;isVisible&lt;/code&gt;用于判断是否显示该组件，使用该组件的格式：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Waiting width=&amp;#123;width&amp;#125; height=&amp;#123;height&amp;#125; isVisible=&amp;#123;isWaitingVisible&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在&lt;strong&gt;index.ios.js&lt;/strong&gt;中引入&lt;strong&gt;Waiting.js&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Waiting = require(&amp;apos;./Waiting.js&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了能控制Waiting组件的显示与隐藏，需要在&lt;strong&gt;index.ios.js&lt;/strong&gt;新增一个状态：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wallsJSON: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  isLoading: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  isWaitngVisible: false // 默认不显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现在，我们可以在&lt;code&gt;&amp;lt;/Swiper&lt;/code&gt;之后放入&lt;code&gt;&amp;lt;Waiting&amp;gt;&lt;/code&gt;组件了，不过，直接这样做会导致报错，因为&lt;a href=&quot;https://facebook.github.io/react/tips/maximum-number-of-jsx-root-nodes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React不允许返回多个组件&lt;/a&gt;。为了解决这个问题，我们需要用&lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt;再做一个简单的包裹：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;renderResults() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;wallsJSON, isWaitngVisible&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Swiper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/Swiper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Waiting width=&amp;#123;width&amp;#125; height=&amp;#123;height&amp;#125; isVisible=&amp;#123;isWaitngVisible&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然有了&lt;code&gt;isWaitngVisible&lt;/code&gt;状态，我们就应该想一想在哪些时机来改变它的状态：双击触发时置为&lt;code&gt;true&lt;/code&gt;，保存成功时置为&lt;code&gt;false&lt;/code&gt;，对应到代码就是：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;saveCurrentWallpaperToCameraRoll() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // Waiting 组件显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.setState(&amp;#123;isWaitingVisible: true&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;wallsJSON&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var currentWall = wallsJSON[this.currentWallIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var currentWallURL = `http://unsplash.it/$&amp;#123;currentWall.width&amp;#125;/$&amp;#123;currentWall.height&amp;#125;?image=$&amp;#123;currentWall.id&amp;#125;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CameraRoll.saveImageWithTag(currentWallURL, (data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Waiting 组件隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setState(&amp;#123;isWaitingVisible: false&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AlertIOS.alert(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;apos;保存成功&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;apos;壁纸已保存到本地相册&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;text: &amp;apos;好哒！&amp;apos;, onPress: () =&amp;gt; console.log(&amp;apos;OK Pressed!&amp;apos;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,(err) =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;Error saving to camera roll&amp;apos;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;模拟器刷新，双击壁纸，等待组件出现，稍后保存成功的弹窗出现，等待组件消失，完美！&lt;/p&gt;&lt;p&gt;额，等等，真的很完美吗？有没有注意到保存完图片，屏幕跳到了第一张图片。这是因为我们在&lt;code&gt;saveWallpaperToCameraRoll&lt;/code&gt;调用&lt;code&gt;this.setState()&lt;/code&gt;，改变了&lt;code&gt;isWaitingVisible&lt;/code&gt;的状态，触发了&lt;code&gt;render()&lt;/code&gt;，从而&lt;code&gt;swiper&lt;/code&gt;重新加载数据并从第一张图显示。&lt;/p&gt;&lt;p&gt;为了解决这个bug，我们可以通过&lt;code&gt;Swiper&lt;/code&gt;的&lt;code&gt;index&lt;/code&gt;入手：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Swiper ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index=&amp;#123;this.currentWallIndex&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样，就保证了每次重新渲染，都从保存的那张开始。&lt;br&gt;&lt;img src=&quot;saving.png&quot; alt=&quot;saving&quot;&gt;&lt;br&gt;好了，写到这里，我们基本完工一个核心功能完备的小应用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;能加载随机精美壁纸&lt;/li&gt;&lt;li&gt;能浏览&lt;/li&gt;&lt;li&gt;能保存&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果对随机的五张壁纸无感，想换一批，怎么破？当然，我们可以放置一个按钮，点击便能更新随机的壁纸数据，可是…能不能做得酷一些呢？比如只需要摇一摇手机，便更新了一批壁纸！&lt;/p&gt;&lt;p&gt;年轻人，下一节我们做这件酷酷的事儿…&lt;br&gt;&lt;img src=&quot;maomi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;5-摇一摇动作（Shake）和真机测试&quot;&gt;&lt;a href=&quot;#5-摇一摇动作（Shake）和真机测试&quot; class=&quot;headerlink&quot; title=&quot;5.摇一摇动作（Shake）和真机测试&quot;&gt;&lt;/a&gt;5.摇一摇动作（Shake）和真机测试&lt;/h1&gt;&lt;p&gt;为了使我们的APP能够捕捉到摇一摇的动作，需要新增一个模块：&lt;a href=&quot;https://www.npmjs.com/package/react-native-shake-event-ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-shake-event-ios&lt;/a&gt;。项目根目录运行：&lt;code&gt;npm install --save react-native-shake-event-ios&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;另外，我们还需要做的是链接相应的类库。如果没记错的话，这是第三次，也是最后一次做这样的操作，我就不多说了，应该熟练了，少年。温馨提示：&lt;code&gt;node_modules/react-native-shake-event-ios/&lt;/code&gt;下的&lt;code&gt;RNShakeEvent.xcodeproj&lt;/code&gt;&lt;/p&gt;&lt;p&gt;引用该类库：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ShakeEvent = require(&amp;apos;react-native-shake-event-ios&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们在&lt;code&gt;componentWillMount&lt;/code&gt;新增摇一摇的监听动作：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 摇一摇，更新数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ShakeEvent.addEventListener(&amp;apos;shake&amp;apos;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.fetchWallsJSON();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;initialize&lt;/code&gt;填坑，其实就是初始化各种状态：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initialize() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wallsJSON: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isLoading: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isWaitingVisible: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  this.currentWallIndex = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;保存代码，接下来我们开始真机测试。当然，如果没有真机，也可以通过快捷键组合：&lt;code&gt;CMD + Ctrl + Z&lt;/code&gt;模拟摇一摇操作。不过，我还是期望你有一部真机，因为…这样可以拿来装X啊，少年！&lt;/p&gt;&lt;p&gt;真机测试意味着我们将脱离开发环境，像平时通过AppStore安装APP那样把我们的APP放到手机内。按照&lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;来做，其实很简单：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;找到&lt;code&gt;Xcode/PIW/PIW/AppDeletegate.m&lt;/code&gt;，做以下操作：&lt;br&gt;&lt;img src=&quot;uncomment.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Product → Scheme → Edit Scheme&lt;/code&gt;或者直接快捷键：&lt;code&gt;CMD + Shift + ,&lt;/code&gt;，划入的窗口中将&lt;code&gt;Build Configuration&lt;/code&gt;从&lt;code&gt;debug&lt;/code&gt;改为&lt;code&gt;Release&lt;/code&gt;:&lt;br&gt;&lt;img src=&quot;schema.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这样做的目的是为了防止摇一摇弹出调试菜单。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;转向&lt;code&gt;Build Setting&lt;/code&gt;，禁掉&lt;code&gt;Dead Code Stripping&lt;/code&gt;，别问我这是为啥，我也不清楚，可能这就是人生，年轻人。&lt;br&gt;&lt;img src=&quot;deadcode.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;联接你的iPhone到Mac上，选择真机运行：&lt;br&gt;&lt;img src=&quot;runmyphone.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;好啦，万事俱备，只欠一个点击。首次打包和安装会持续较长时间，请耐心等候。安装过程中甭管蹦出什么，选择&lt;strong&gt;相信&lt;/strong&gt;就行。注意，如果想恢复到开发环境，把上面的步骤1和步骤2撤销就可以了。&lt;/p&gt;&lt;p&gt;安装完毕，手机桌面上就应该多出一个巨丑的APP图标，没错，那就是这么长时间我们辛苦做出的APP，快快打开体验一番吧！&lt;/p&gt;&lt;p&gt;最后，我们把图标也加上：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;下载&lt;a href=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/SplashWallIcons.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图标文件&lt;/a&gt;。当然，你也可以自己按照&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;苹果图标规定&lt;/a&gt;来设计一套&lt;/li&gt;&lt;li&gt;调转到Xcode&lt;code&gt;PIW/PIW/Images.xcassets&lt;/code&gt;，选择AppIcon&lt;/li&gt;&lt;li&gt;将图标文件按照规格拖拽到对应的框内，一个萝卜一个坑，so easy!&lt;br&gt;&lt;img src=&quot;icons.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;再次打包和运行，这次那个巨丑无比的图标应该不见了。&lt;/p&gt;&lt;p&gt;卧槽，我们目前是不是可以说正式完成了一个APP版本的迭代？是的，我们做到了！&lt;/p&gt;&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;又到了总结时间了，这一次我们都做了哪些事情呢：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;NetworkImage&lt;/code&gt;组件让我们能够显示出带加载进度的图片&lt;/li&gt;&lt;li&gt;&lt;code&gt;PanResponder&lt;/code&gt;API让我们能够捕捉到双击操作&lt;/li&gt;&lt;li&gt;&lt;code&gt;Camera Roll&lt;/code&gt;让我们能够将壁纸保存到本地相册&lt;/li&gt;&lt;li&gt;&lt;code&gt;Waiting&lt;/code&gt;是我们首个自定义的组件，让用户在保存壁纸的同时不再懵逼&lt;/li&gt;&lt;li&gt;&lt;code&gt;react-native-shake-event-ios&lt;/code&gt;让我们能够检测到摇一摇操作，并在恰当的时机，更新随机数据&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;目前为止，我们已经完成了一个功能较完备的APP，同时也学习了许多新知，没有过多地深入，但均给出了深入的入口，也就是文章中的链接。其实，这个APP还可以加入许多好玩的特性，比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;既然有双击操作，是不是可以考虑加一个单击操作：单击壁纸，隐藏顶部的两个小黑条和底部的分页，也就是全屏显示壁纸，看得更爽一些，再次单击，恢复隐藏的元素。&lt;/li&gt;&lt;li&gt;有没有可能做一个设置壁纸前的预览功能呢？虽然可能从API上有所限制，但我们可以通过一些hack的方式来达到类似的目的，至于什么方式，发挥你的脑洞去试试吧。&lt;/li&gt;&lt;li&gt;每次打开APP都要从第三方获取数据，对于在非WiFi环境，用户可能会有所顾虑，是不是应该做一个本地缓存第三方数据的功能，甚至图片？&lt;/li&gt;&lt;li&gt;现在我们的代码组织并不很模块化，这一点可不可以做些优化？&lt;/li&gt;&lt;li&gt;React Native 也可以做安卓开发，尝尝鲜？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以上是我能想到的一些功能点和优化点，如果我们能一步一步走到现在，相信这些好玩的特性也不会那么难实现。或许，我还会写个番外篇，讲一讲如何继续迭代&lt;strong&gt;PIW&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;通过这个简单的APP，我们接触到了许多知识点，但React Native的学习远不止这些，一些高级话题我们还没涉猎，比如&lt;code&gt;Flux/Redux&lt;/code&gt;。但万变不离阅读官方文档，加之实例练习，边学边总结，是我的节奏。Hey，man，你的节奏找到了吗？好了，我累了，打烊了…&lt;br&gt;&lt;img src=&quot;tired.jpg&quot; alt=&quot;姚明&quot;&gt;&lt;br&gt;哦对了，最新代码放在了&lt;a href=&quot;https://github.com/zerosoul/PIW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github上&lt;/a&gt;，欢迎指正。&lt;/p&gt;&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/04/how-to-build-your-first-ios-app-with-javascript/#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 2)&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;rn.png&quot; alt=&quot;React Native&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;再续前缘&quot;&gt;&lt;a href=&quot;#再续前缘&quot; class=&quot;headerlink&quot; title=&quot;再续前缘&quot;&gt;&lt;/a&gt;再续前缘&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ze
    
    </summary>
    
      <category term="它山之石" scheme="http://zerosoul.github.io/categories/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="react" scheme="http://zerosoul.github.io/tags/react/"/>
    
      <category term="app" scheme="http://zerosoul.github.io/tags/app/"/>
    
      <category term="翻译" scheme="http://zerosoul.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="react native" scheme="http://zerosoul.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React Native之美：构建我的第一个iOS APP（1）</title>
    <link href="http://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/"/>
    <id>http://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/</id>
    <published>2016-06-05T02:50:49.000Z</published>
    <updated>2016-06-16T06:03:00.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;rn.png&quot; alt=&quot;React Native&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;严格来说这是一篇译文，但与一般的翻译有所不同，我会修正原文中一些小错误，也会指出没有提及的一些坑，还会基于原文的想法做一些扩展开发。所以，读的时候有些是原作者的话，有些是我的添油加醋，但整体绝对保证流畅。另，基于原文改动较多，也就懒得一一标注出来，或许显得有些不负责，但是…&lt;br&gt;&lt;img src=&quot;ldwy.jpg&quot; alt=&quot;来打我呀&quot;&gt;&lt;br&gt;好了，下面开始进入正题：&lt;br&gt;&lt;img src=&quot;zb.jpg&quot; alt=&quot;装逼&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;之前的困惑&quot;&gt;&lt;a href=&quot;#之前的困惑&quot; class=&quot;headerlink&quot; title=&quot;之前的困惑&quot;&gt;&lt;/a&gt;之前的困惑&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;Javascript&lt;/code&gt;来构建移动应用已经不是什么新鲜事了。&lt;a href=&quot;http://ionicframework.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ionic&lt;/a&gt;和&lt;a href=&quot;http://phonegap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Phonegap&lt;/a&gt;已经做了大量的探索，建立了各自的开发生态圈，吸引了相当多的开发者，不得不说都获得了一定程度的成功。&lt;/p&gt;&lt;p&gt;但是，尝试做了一些小Demo后，这些框架变得毫无吸引力，主要原因应该是&lt;strong&gt;很难做到原生体验&lt;/strong&gt;。后来，转念一想，为啥不使用&lt;code&gt;Swift/Objective-C&lt;/code&gt;或者&lt;code&gt;Java&lt;/code&gt;构建原生app呢，诚然，这对于从前端开发转向app开发，需要学习的挺多，但这不正是一名现代Web开发者所擅长的吗：快速学习。那么，从哪儿开头呢？在Google过程中遇到了一篇文章：&lt;a href=&quot;https://medium.com/ios-os-x-development/an-ios-developer-on-react-native-1f24786c29f0#.avhlz9qsr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An iOS Developer on React Native&lt;/a&gt;，其中一句话打动了我：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Fast-forward a couple of months, and I’m confident enough to say I may never write an iOS app in Objective-C or Swift again.（快进几个月，我有足够的信心说：再也不会用Objective-C或者Swift来写iOS app了！）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一切的遇见都不是偶然的。看来，官方语言也有不少坑，那为啥不选择&lt;code&gt;React Native&lt;/code&gt;呢，更何况自己是前端工（Ban）程（Zhuan）师（De）。好吧，我承认绕了个不必要的圈子，但走一些弯路能看到更多的风景，不是吗？&lt;br&gt;&lt;img src=&quot;ym.png&quot; alt=&quot;姚明&quot;&gt;&lt;br&gt;好的，下面先了解下需求。（难道不应该是先说一下&lt;code&gt;React Native&lt;/code&gt;么 (╯‵□′)╯︵┻━┻）&lt;/p&gt;&lt;h1 id=&quot;先谈谈需求&quot;&gt;&lt;a href=&quot;#先谈谈需求&quot; class=&quot;headerlink&quot; title=&quot;先谈谈需求&quot;&gt;&lt;/a&gt;先谈谈需求&lt;/h1&gt;&lt;p&gt;很不幸，我从未在苹果商店找到过一个设置手机壁纸的完美APP。在Mac上，&lt;a href=&quot;http://unsplash.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unsplash&lt;/a&gt;承包了我的所有这方面的需求，很完美，然而在手机上…对不起，打开&lt;code&gt;Setting&lt;/code&gt;，找到&lt;code&gt;Wallpaper&lt;/code&gt;…。&lt;/p&gt;&lt;p&gt;为何不试着做一个满足自己需求的APP呢？下面是我目前希望有的功能点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;随机展示适合当做手机壁纸的图片&lt;/li&gt;&lt;li&gt;可以滑动浏览&lt;/li&gt;&lt;li&gt;可以保存到相册&lt;/li&gt;&lt;li&gt;保存前可以预览设置后的效果&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然最后一项不知道能否做到，但至少可以开始撸其它功能点了。额，等等，开始之前，我觉得有必要提醒一下你应该知道的事情：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Javascript&lt;/li&gt;&lt;li&gt;一些&lt;code&gt;ES6&lt;/code&gt;的特性：&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;类&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;箭头函数&lt;/a&gt;,&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解构&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模板字符串&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Mac OS X 终端 （好吧，你应该有个Mac或者Macbook）&lt;/li&gt;&lt;li&gt;CSS：flexbox (&lt;a href=&quot;http://flexboxfroggy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有个非常棒的flexbox游戏教程)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;：React的一些基本概念需要知道，比如&lt;code&gt;JSX&lt;/code&gt;、&lt;code&gt;state&lt;/code&gt;和&lt;code&gt;prop&lt;/code&gt;的区别、&lt;code&gt;Virtual DOM&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;再谈谈文章的规划&quot;&gt;&lt;a href=&quot;#再谈谈文章的规划&quot; class=&quot;headerlink&quot; title=&quot;再谈谈文章的规划&quot;&gt;&lt;/a&gt;再谈谈文章的规划&lt;/h1&gt;&lt;p&gt;由于涉及的知识点较多，&lt;code&gt;构建我的第一个iOS app&lt;/code&gt;将分为两篇来完成。每一篇有&lt;strong&gt;五个章节&lt;/strong&gt;，每个章节会推进一步，直至完成预期。文章略长，一旦开始，最好以章节为单位来进行。建议先收藏，回家坐在电脑前慢慢品。&lt;/p&gt;&lt;h1 id=&quot;1-First-Blood-建一个空React-Native项目&quot;&gt;&lt;a href=&quot;#1-First-Blood-建一个空React-Native项目&quot; class=&quot;headerlink&quot; title=&quot;1. First Blood:建一个空React Native项目&quot;&gt;&lt;/a&gt;1. First Blood:建一个空React Native项目&lt;/h1&gt;&lt;p&gt;首先确认已安装：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XCode 7.0或更高版本&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后，在终端输入：&lt;code&gt;npm install -g react-native-cli&lt;/code&gt;，全局安装React Native。&lt;/p&gt;&lt;p&gt;如果你觉得我说的不够详细，请移步&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native的官方安装文档&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在你电脑找块风水宝地，用于初始化项目目录。在该文件夹下执行命令：&lt;code&gt;react-native init PIW&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;init.png&quot; alt=&quot;init&quot;&gt;&lt;br&gt;（&lt;code&gt;PIW&lt;/code&gt;是&lt;code&gt;Pick Image as Wallpaper&lt;/code&gt;的缩写，不要在意这个细节，我为了装X起的。另，鉴于网络因素，等待时间应该较长，此时可以去小个便，或者逗逗你的宠物。）&lt;/p&gt;&lt;p&gt;&lt;code&gt;init&lt;/code&gt;后的项目目录：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;dir.png&quot; alt=&quot;项目目录&quot;&gt;&lt;/p&gt;&lt;p&gt;很显然，&lt;code&gt;index.android.js&lt;/code&gt;和&lt;code&gt;index.ios.js&lt;/code&gt;分别是安卓和苹果应用的入口执行文件，由于我们构建的是iOS APP，所以接下来只跟&lt;code&gt;index.ios.js&lt;/code&gt;打交道。接下来，移步&lt;code&gt;ios&lt;/code&gt;文件夹，并双击打开&lt;code&gt;PIW.xcodeproj&lt;/code&gt;。（Xcode的工程文件）&lt;br&gt;&lt;img src=&quot;xcode.png&quot; alt=&quot;第一眼看到的xcode项目页面&quot;&gt;&lt;br&gt;注意有个警告：&lt;code&gt;No matching provisioning profiles found.&lt;/code&gt;。得想办法修复它。先改个名字，&lt;strong&gt;Bundle Identifier&lt;/strong&gt;：&lt;code&gt;com.zerosoul.me.tutorial.PIW&lt;/code&gt;怎么样？有木有感觉很高大上！只要遵循&lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_domain_name_notation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reverse DNS Convention&lt;/a&gt;，请随意。然后选择&lt;strong&gt;Team&lt;/strong&gt;，没有则按照指示新建一个。最后，点击&lt;strong&gt;Fix Issue&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Deployment Info&lt;/strong&gt;一栏需要改动些默认设置，让app不能横屏，并且隐藏顶部的状态栏，下图红框已标出：&lt;br&gt;&lt;img src=&quot;deployinfo.png&quot; alt=&quot;deployment info&quot;&gt;&lt;/p&gt;&lt;p&gt;好了，可以点击左上角的&lt;strong&gt;Run&lt;/strong&gt;，看一看模拟器的效果了。中途应该会蹦出一个终端弹窗，不要慌，正常现象。&lt;br&gt;&lt;img src=&quot;popup.png&quot; alt=&quot;terminal popup&quot;&gt;&lt;/p&gt;&lt;p&gt;一旦Xcode构建完，在模拟器里你会看到这一幕：&lt;br&gt;&lt;img src=&quot;welcome.jpg&quot; alt=&quot;welcome to React Native&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：此处有坑，如果你用真机模拟，会出现这么一幕：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;localhost.png&quot; alt=&quot;大红的懵逼&quot;&gt;&lt;br&gt;大红的懵逼！不过别慌，官方文档有对应的解决方法，移步&lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device-ios.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;可以找到解决方式。&lt;/p&gt;&lt;h1 id=&quot;2-从第三方获取壁纸数据&quot;&gt;&lt;a href=&quot;#2-从第三方获取壁纸数据&quot; class=&quot;headerlink&quot; title=&quot;2. 从第三方获取壁纸数据&quot;&gt;&lt;/a&gt;2. 从第三方获取壁纸数据&lt;/h1&gt;&lt;p&gt;既然要做壁纸APP，大量适合做手机壁纸的图片从哪里来？还记得前面提到的Unsplash吗？一切的遇见都不是偶然，好心的歪果仁做了一个&lt;a href=&quot;https://unsplash.it/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unsplash图片调用接口&lt;/a&gt;，用于生成一些精美占位图，非常方便！&lt;/p&gt;&lt;h2 id=&quot;有关ES6中“类”的解释&quot;&gt;&lt;a href=&quot;#有关ES6中“类”的解释&quot; class=&quot;headerlink&quot; title=&quot;有关ES6中“类”的解释&quot;&gt;&lt;/a&gt;有关&lt;code&gt;ES6&lt;/code&gt;中“类”的解释&lt;/h2&gt;&lt;p&gt;你可能会注意到，有些React代码会出现&lt;code&gt;var PIW = React.createClass({ ... })&lt;/code&gt;，有些会是&lt;code&gt;class PIW extends Component{ ... }&lt;/code&gt;。呵呵，这是个历史遗留问题，用哪种风格是个人选择问题，不存在孰优孰劣，有选择恐惧症的同学可以看看&lt;a href=&quot;https://reactjsnews.com/composing-components&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;此处，我选择&lt;code&gt;Recat.Component&lt;/code&gt;风格，别问我为什么，就这么任性！&lt;br&gt;&lt;img src=&quot;renxing.jpg&quot; alt=&quot;任性&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;开始做一些改动&quot;&gt;&lt;a href=&quot;#开始做一些改动&quot; class=&quot;headerlink&quot; title=&quot;开始做一些改动&quot;&gt;&lt;/a&gt;开始做一些改动&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;PIW&lt;/code&gt;类里面，第一件事情便是加个构造函数&lt;code&gt;constructor&lt;/code&gt;，在此初始化两个State：&lt;code&gt;wallsJSON&lt;/code&gt;和&lt;code&gt;isLoading&lt;/code&gt;。&lt;code&gt;wallsJSON&lt;/code&gt;用于存储从第三方接口获取的json数组数据，&lt;code&gt;isLoading&lt;/code&gt;是个布尔变量，用于标识数据是否加载完毕。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class PIW extends Component&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      wallsJSON: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      isLoading: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：方便起见，涉及的代码改动，我用`/*&lt;/strong&gt;/&lt;code&gt;隔离标识出，下同。** 既然有存放数据的变量了，就得有给之赋值的函数，好吧，在&lt;/code&gt;constructor&lt;code&gt;下面加一个占位函数&lt;/code&gt;fetchWallsJSON`:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetchWallsJSON() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(‘壁纸数据从这里加载...’);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从业务逻辑来讲，组件一旦加载完毕，就应该触发该函数。那么，该&lt;code&gt;componentDidMount&lt;/code&gt;上场了，它是React Native组件的生命周期函数之一，在首次渲染（&lt;code&gt;render&lt;/code&gt;）成功后会触发。想要更系统地理解组件的生命周期，请移步&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。注意，既然我们用的ES6的类语法，就可以省略&lt;code&gt;getInitialState&lt;/code&gt;了，取而代之的是在&lt;code&gt;constructor&lt;/code&gt;中给&lt;code&gt;this.state&lt;/code&gt;赋值。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentDidMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.fetchWallsJSON();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;fetchWallsJSON&lt;/code&gt;里会打印信息，我们应该从哪儿看到呢？首先，让模拟器获取焦点，使用&lt;code&gt;CMD + D&lt;/code&gt;组合键调出调试菜单，选择&lt;strong&gt;Debug in Chrome&lt;/strong&gt;，好吧，顺便把&lt;strong&gt;Enable live reload&lt;/strong&gt;也打开吧，妈妈再也不用担心每次都要手动重启APP了。将会在Chrome里打开一个新标签，按照上面的说明调出&lt;strong&gt;console&lt;/strong&gt;的界面。啊哈！&lt;br&gt;&lt;img src=&quot;console.png&quot; alt=&quot;console data loaded tip&quot;&gt;&lt;br&gt;坑占好了，下面，可以开始考虑引入真实数据了。访问URL：&lt;a href=&quot;http://unsplash.it/list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;unsplash.it/list &lt;/a&gt;，你将会看到铺满全屏的数据，接下来我们就基于这些数据做文章啦~~~&lt;br&gt;首先，替换掉&lt;code&gt;console&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetchWallsJSON() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var url = &amp;apos;http://unsplash.it/list&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .then( response =&amp;gt; response.json() )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .then( jsonData =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(jsonData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .catch( error =&amp;gt; console.log(‘获取数据有误： ‘ + error) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：用到了&lt;code&gt;fetch&lt;/code&gt;函数，不熟悉的同学请参考&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;保存然后刷新，几秒过后，啊哈！&lt;br&gt;&lt;img src=&quot;consolerealdata.png&quot; alt=&quot;console real data&quot;&gt;&lt;/p&gt;&lt;p&gt;太好了，我们已经能从第三方拿到数据了！在打印出数据前会有点延迟，这很正常，因为从请求到响应回数据会有个等待时间，此处应有&lt;strong&gt;加载提示&lt;/strong&gt;。&lt;/p&gt;&lt;h1 id=&quot;3-增加加载提示&quot;&gt;&lt;a href=&quot;#3-增加加载提示&quot; class=&quot;headerlink&quot; title=&quot;3. 增加加载提示&quot;&gt;&lt;/a&gt;3. 增加加载提示&lt;/h1&gt;&lt;p&gt;首先，把&lt;code&gt;PIW&lt;/code&gt;类里&lt;code&gt;render&lt;/code&gt;代码全部删除，新增以下代码：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &amp;#123;isLoading&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(isLoading)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return this.renderLoadingScreen();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return this.renderResults();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;里面新增了两个函数，我们来实现它：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;renderLoadingScreen() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;View style=&amp;#123;styles.loadingContainer&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;ActivityIndicatorIOS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              animating=&amp;#123;true&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              color=&amp;#123;&amp;apos;#fff&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              size=&amp;#123;&amp;apos;small&amp;apos;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              style=&amp;#123;&amp;#123;margin: 15&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;Text style=&amp;#123;&amp;#123;color: &amp;apos;#fff&amp;apos;&amp;#125;&amp;#125;&amp;gt;正在加载数据...&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  renderResults() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             数据已加载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;根据&lt;code&gt;isLoading&lt;/code&gt;的不同状态，渲染不同的界面。但是请注意，我们好像忘了什么。啊哈，&lt;code&gt;isLoading&lt;/code&gt;并没有改变状态，应该在哪儿将其状态变过来呢？&lt;code&gt;fetchWallsJSON&lt;/code&gt;！&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then( response =&amp;gt; response.json() )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then( jsonData =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(jsonData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setState(&amp;#123;isLoading: false&amp;#125;); //更新 isLoading &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.catch( error =&amp;gt; console.log(‘获取数据有误：‘ + error) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有关&lt;code&gt;setState&lt;/code&gt;的详细说明请移步&lt;a href=&quot;https://facebook.github.io/react/docs/component-api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，一句话描述其作用就是用于触发UI更新。&lt;br&gt;另外，我们在&lt;code&gt;renderLoadingScreen&lt;/code&gt;调用了一个新组件&lt;code&gt;ActivityIndicatorIOS&lt;/code&gt;，因此，需要在头部引入之：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AppRegistry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  StyleSheet,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ActivityIndicatorIOS // 增加新组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在看到最终效果前，还有一件事情：注意到&lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;标签内有个&lt;code&gt;styles.loadingContainer&lt;/code&gt;没有？没错，这是用来定义&lt;code&gt;View&lt;/code&gt;的样式的，目前可以这样理解：React内的样式全部用行内样式来定义的。而样式则通过&lt;code&gt;var styles = StyleSheet.create({…&lt;/code&gt;来创建，只需要在相应的组件里加以引用即可：&lt;br&gt;创建&lt;code&gt;loadingContainer&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var styles = StyleSheet.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loadingContainer: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flexDirection: &amp;apos;row&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    justifyContent: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alignItems: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backgroundColor: &amp;apos;#000&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;引用&lt;code&gt;loadingContainer&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;View style=&amp;#123;styles.loadingContainer&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，也可以这样使用：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;View style=&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flexDirection: &amp;apos;row&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    justifyContent: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alignItems: &amp;apos;center&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backgroundColor: &amp;apos;#000&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不过这样做代码的可读性和可维护性较差，尤其在有很多组件的时候，容易乱套，所以并不是一个好的实践。另外，注意到没，React Native严重依赖&lt;code&gt;flexbox&lt;/code&gt;布局元素，所以，学好&lt;code&gt;flexbox&lt;/code&gt;这个知识点就很有必要。&lt;/p&gt;&lt;p&gt;保存这些改动，你将会在模拟器中看到以下加载页面：&lt;br&gt;&lt;img src=&quot;loading.png&quot; alt=&quot;loading screen&quot;&gt;&lt;br&gt;过个几秒钟，将会转为：&lt;br&gt;&lt;img src=&quot;loaded.png&quot; alt=&quot;data loaded&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;4-筛选出随机的壁纸&quot;&gt;&lt;a href=&quot;#4-筛选出随机的壁纸&quot; class=&quot;headerlink&quot; title=&quot;4. 筛选出随机的壁纸&quot;&gt;&lt;/a&gt;4. 筛选出随机的壁纸&lt;/h1&gt;&lt;p&gt;这一章节侧重于Javascript的编码，将创建一个专门的模块用于生成随机数。如果模块的概念感到陌生，请先移步&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js的模块文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;首先，我们在&lt;code&gt;index.ios.js&lt;/code&gt;的&lt;code&gt;class&lt;/code&gt;声明前定义一个常量，用于决定要随机选取的壁纸数量。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const NUM_WALLPAPERS = 5;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后创建一个用户生成随机数的模块，这个模块内有两个函数：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;uniqueRandomNumbers&lt;/code&gt;：该函数有三个参数，第一个决定了将要返回的随机数数量，后面两个定义随机数选取的范围。比如调用&lt;code&gt;uniqueRandomNumbers(5,10,20)&lt;/code&gt;将获得包含5个随机数的数组，他们的范围在10到20之间。&lt;/li&gt;&lt;li&gt;&lt;code&gt;randomNumberInRange&lt;/code&gt;：该函数有两个参数，定义了随机数范围，并返回一个随机数。比如调用&lt;code&gt;randomNumberInRange(2,10)&lt;/code&gt;将返回介于2到10的随机的一个数。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然，我们完全可以将这两个函数合并为一个，但遵循&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;单一职责原则&lt;/strong&gt;&lt;/a&gt;应该是编码的最佳实践：一个函数只做一件事并将其做好。相信我，遵循好的编程原则能让以后的日子好过一些。&lt;/p&gt;&lt;p&gt;好了，思路表述完了，开始编码。首先，在根目录下新建一个js文件&lt;code&gt;RandManager.js&lt;/code&gt;，以下是代码：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uniqueRandomNumbers(numRandomNumbers, lowerLimit, upperLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var uniqueNumbers = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while( uniqueNumbers.length != numRandomNumbers ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var currentRandomNumber = this.randomNumberInRange(lowerLimit, upperLimit);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if( uniqueNumbers.indexOf(currentRandomNumber) === -1 ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                uniqueNumbers.push(currentRandomNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return uniqueNumbers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    randomNumberInRange(lowerLimit, upperLimit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return Math.floor( Math.random() * (1 + upperLimit - lowerLimit) ) + lowerLimit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在&lt;code&gt;index.ios.js&lt;/code&gt;中引用&lt;code&gt;RandManager&lt;/code&gt;模块：&lt;code&gt;var RandManager = require(&amp;#39;./RandManager.js&amp;#39;);&lt;/code&gt;，然后我们就可以在&lt;code&gt;fetchWallsJSON&lt;/code&gt;中调用啦：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetchWallsJSON() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var url = &amp;apos;http://unsplash.it/list&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fetch(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then( response =&amp;gt; response.json() )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then( jsonData =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var randomIds = RandManager.uniqueRandomNumbers(NUM_WALLPAPERS, 0, jsonData.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var walls = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      randomIds.forEach(randomId =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        walls.push(jsonData[randomId]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isLoading: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wallsJSON: [].concat(walls)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .catch( error =&amp;gt; console.log(&amp;apos;获取数据有误：&amp;apos; + error) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面代码应该不用过多解释了，使用&lt;code&gt;uniqueRandomNumbers&lt;/code&gt;生成5个随机数作为&lt;code&gt;jsonData&lt;/code&gt;的索引值，进而获取5个随机壁纸数据并存入&lt;code&gt;wallsJSON&lt;/code&gt;，哦对了，别忘了更新&lt;code&gt;isLoading&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;有了随机数据，就可以在&lt;code&gt;renderResults&lt;/code&gt;里使用了：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;renderResults() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //这里用到了ES6中的解构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;wallsJSON, isLoading&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if( !isLoading ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;wallsJSON.map((wallpaper, index) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;Text key=&amp;#123;index&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123;wallpaper.id&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上代码有个地方值得注意：React Native通过循环数组或集合渲染子元素时，需要给每个元素制定一个唯一的&lt;code&gt;key&lt;/code&gt;，这也是为啥&lt;code&gt;&amp;lt;Text key={index}&amp;gt;&lt;/code&gt;这样写的原因。&lt;/p&gt;&lt;p&gt;保存代码，模拟器刷新后，我们看到了五个不同的id：&lt;br&gt;&lt;img src=&quot;randid.png&quot; alt=&quot;random id&quot;&gt;&lt;br&gt;当然，可以将&lt;code&gt;id&lt;/code&gt;改为&lt;code&gt;author&lt;/code&gt;，这样，我们看到的是五个不同的名字：&lt;br&gt;&lt;img src=&quot;randname.png&quot; alt=&quot;random name&quot;&gt;&lt;/p&gt;&lt;p&gt;非常好，我们现在已经可以自如地操控数据了。&lt;/p&gt;&lt;h1 id=&quot;5-新增Swiper组件&quot;&gt;&lt;a href=&quot;#5-新增Swiper组件&quot; class=&quot;headerlink&quot; title=&quot;5. 新增Swiper组件&quot;&gt;&lt;/a&gt;5. 新增Swiper组件&lt;/h1&gt;&lt;p&gt;React Native有强大的社区支持和&lt;a href=&quot;https://react.parts/native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;丰富的组件库&lt;/a&gt;。这一章节学习如何引入第三方组件。&lt;br&gt;对于我们当前的APP，需要一个可滑动浏览图片的组件，推荐&lt;a href=&quot;https://github.com/leecade/react-native-swiper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-swiper&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;终端切换到项目根目录，运行命令：&lt;code&gt;npm install react-native-swiper --save&lt;/code&gt;，然后&lt;code&gt;require&lt;/code&gt;到代码里：&lt;code&gt;var Swiper=require(&amp;#39;react-native-swiper&amp;#39;)&lt;/code&gt;。&lt;br&gt;将&lt;code&gt;renderResults&lt;/code&gt;里的&lt;code&gt;View&lt;/code&gt;替换为&lt;code&gt;Swiper&lt;/code&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;renderResults() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var &amp;#123;wallsJSON, isLoading&amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if( !isLoading ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Swiper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;wallsJSON.map((wallpaper, index) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;Text key=&amp;#123;index&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123;wallpaper.author&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/Swiper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不出意外的话，界面将变成下面这样：&lt;br&gt;&lt;img src=&quot;swiperwithdata.png&quot; alt=&quot;swiper with name data&quot;&gt;&lt;br&gt;下面，根据&lt;a href=&quot;https://github.com/leecade/react-native-swiper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiper组件的文档&lt;/a&gt;，我们来微调一下样式：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Swiper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dot=&amp;#123;&amp;lt;View style=&amp;#123;&amp;#123;backgroundColor:&amp;apos;rgba(255,255,255,.4)&amp;apos;, width: 8, height: 8,borderRadius: 10, marginLeft: 3, marginRight: 3, marginTop: 3, marginBottom: 3,&amp;#125;&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activeDot=&amp;#123;&amp;lt;View style=&amp;#123;&amp;#123;backgroundColor: &amp;apos;#fff&amp;apos;, width: 13, height: 13, borderRadius: 7, marginLeft: 7, marginRight: 7&amp;#125;&amp;#125; /&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop=&amp;#123;false&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onMomentumScrollEnd=&amp;#123;this.onMomentumScrollEnd&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;wallsJSON.map((wallpaper, index) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Text key=&amp;#123;index&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;wallpaper.author&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Swiper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;微调了下底部分页小圆点，更大更黑了（卧槽，我在说什么…）&lt;/li&gt;&lt;li&gt;禁用了循环，这样，一旦浏览到最后一页，然后就没有然后了。&lt;/li&gt;&lt;li&gt;新增了每一页滑动完毕后的触发事件：&lt;code&gt;onMomentumScrollEnd&lt;/code&gt;（这个会在下一篇文章中用到，此处先占个坑）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们已经把Swiper加上了，好啦，这一节就写到这里，因为…我累了。&lt;br&gt;&lt;img src=&quot;shuaiqi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;写到这里，我发现文章已经挺长的了。那么…再加个总结吧，都这么长了，应该不介意再长一点吧。&lt;br&gt;&lt;img src=&quot;youdaoli.jpg&quot; alt=&quot;有道理&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;第一节讲的是如何新建一个空的React Native项目&lt;/li&gt;&lt;li&gt;第二节讲的是如何从第三方API获取原始数据，并建议用ES6新语法来构建程序&lt;/li&gt;&lt;li&gt;第三节我们根据APP不同的状态渲染出不同的界面&lt;/li&gt;&lt;li&gt;第四节我们新建了一个模块，引入并解决了产生随机数的问题&lt;/li&gt;&lt;li&gt;第五节我们新增了一个第三方组件，并做了简单设置。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;好吧，必须承认，目前为止，我们的APP看起来似乎没啥特殊之处。不过，刚入门嘛，一步一步走到这里，也不容易了。下一篇文章，我们将继续打磨这个APP，新增特性预告：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;作者名字将替换为图片，没错，高清无码大图&lt;/li&gt;&lt;li&gt;自定义双击事件，保存图片到相册：&lt;code&gt;PanHandler&lt;/code&gt;&lt;/li&gt;&lt;li&gt;通过Xcode新增类库并获取相应授权，比如访问相册&lt;/li&gt;&lt;li&gt;增加预览功能&lt;/li&gt;&lt;li&gt;创建更多的自定义组件&lt;br&gt;哦对了，最终代码在&lt;a href=&quot;https://github.com/zerosoul/PIW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这儿&lt;/a&gt;。年轻人，我们下一回合见…&lt;br&gt;&lt;img src=&quot;dengyan.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/04/the-beauty-of-react-native-building-your-first-ios-app-with-javascript-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 1)&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;rn.png&quot; alt=&quot;React Native&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;严格来说这是一篇译文
    
    </summary>
    
      <category term="它山之石" scheme="http://zerosoul.github.io/categories/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="react" scheme="http://zerosoul.github.io/tags/react/"/>
    
      <category term="ReactNative" scheme="http://zerosoul.github.io/tags/ReactNative/"/>
    
      <category term="app" scheme="http://zerosoul.github.io/tags/app/"/>
    
      <category term="翻译" scheme="http://zerosoul.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>探索 Javascript Promise</title>
    <link href="http://zerosoul.github.io/2016/05/26/everything-about-promise/"/>
    <id>http://zerosoul.github.io/2016/05/26/everything-about-promise/</id>
    <published>2016-05-26T13:29:34.000Z</published>
    <updated>2016-05-27T02:03:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;promise.jpg&quot; alt=&quot;javascript promise&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;先看一段代码：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something with the result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果有似曾相识的感觉，那么你在理解javascript中的promise道路上已经迈出了一步。如果完全懵逼，别怕，接下来我们通过例子来了解promise为何物。&lt;/p&gt;&lt;p&gt;作为新概念，一些人理解promise起来会有些困难，因为这需要思维上的转变。但是请相信我，经过几个实例的讲解，你会发现它的优雅：它使得让人头痛的异步代码写起来更为轻松，而且可以避免“回调大坑”（&lt;a href=&quot;http://callbackhell.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;callback hell&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;promise背后的思想是：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;promise代表的是异步操作的&lt;strong&gt;最终&lt;/strong&gt;（eventual）结果&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这意味着异步操作的结果并不能立即获取，而是要等到promise稳定了（settled）。&lt;/p&gt;&lt;p&gt;想想你在日常生活中做出承诺（promise）的例子：小时候，你出门对老妈说：我保证（promise）把垃圾带出去。这句话的意思是在稍后的某个时间点你会去做&lt;strong&gt;扔垃圾&lt;/strong&gt;这件事并兑现你的承诺。也许几分钟，也许几小时，也许…&lt;/p&gt;&lt;p&gt;promise亦是如此。当一个函数返回一个promise，它其实是在说：嘿！我向你承诺，一旦完事，我将带着结果去找你！&lt;/p&gt;&lt;h1 id=&quot;举例&quot;&gt;&lt;a href=&quot;#举例&quot; class=&quot;headerlink&quot; title=&quot;举例&quot;&gt;&lt;/a&gt;举例&lt;/h1&gt;&lt;p&gt;好啦，理论和术语的东西讲多了让人烦，下面我们来例证上面说的一堆话。&lt;/p&gt;&lt;p&gt;AJAX的概念应该不陌生吧，相信你之前使用过原生&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest&lt;/a&gt;，或者jQuery的&lt;a href=&quot;http://api.jquery.com/jquery.ajax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$.ajax()&lt;/a&gt;，或者其它类库。不过，XMLHttpRequest API既复杂又难记忆。谢天谢地，新API &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fetch&lt;/a&gt;简化了ajax的应用，并且，它用到了promise！&lt;/p&gt;&lt;p&gt;这意味着什么？其实，每当你使用fetch()发出请求，像这样：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;&#39;/some/endpoint&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;它就会返回一个promise对象。&lt;/p&gt;&lt;p&gt;通常我们会使用回调函数来响应异步请求完成时的操作。但是，在promise的世界里，我们得使用&lt;code&gt;then()&lt;/code&gt;来达到这一目的。&lt;/p&gt;&lt;p&gt;通过链式调用&lt;code&gt;.then(onFulfilled, onRejected)&lt;/code&gt;来访问&lt;code&gt;fetch&lt;/code&gt;的结果：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;&#39;/some/endpoint&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Response from the endpoint &#39;&lt;/span&gt; + result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;An error occurred: &#39;&lt;/span&gt; + error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;then&lt;/code&gt;方法提供两个参数：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;onFulfilled&lt;/code&gt;：当promise完成（fulfilled）时调用，第一个参数表示promise的结果。&lt;/li&gt;&lt;li&gt;&lt;code&gt;onRejected&lt;/code&gt;：当promise被拒（rejected）时调用，第一个参数表示promise被拒的原因。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;完成&lt;/strong&gt;和&lt;strong&gt;被拒&lt;/strong&gt;是promise的两个状态，其实还有第三种状态：挂起（pending）。现在，我们来总结下&lt;code&gt;fetch&lt;/code&gt;使用promise的经过：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从调用&lt;code&gt;fetch()&lt;/code&gt;那一刻，它就返回了一个promise对象&lt;/li&gt;&lt;li&gt;在请求完成之前，promise的状态一直处于&lt;strong&gt;挂起&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;promise由挂起状态，可能会转为&lt;strong&gt;完成&lt;/strong&gt;，也可能会是&lt;strong&gt;被拒&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;值得一提的是，一旦promise的状态转为完成或被拒，其值将不再改变。&lt;/p&gt;&lt;h1 id=&quot;使用catch-错误处理&quot;&gt;&lt;a href=&quot;#使用catch-错误处理&quot; class=&quot;headerlink&quot; title=&quot;使用catch()错误处理&quot;&gt;&lt;/a&gt;使用&lt;code&gt;catch()&lt;/code&gt;错误处理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promises/A+ 规范 &lt;/a&gt;提供了一种语法糖来处理promise的错误。&lt;/p&gt;&lt;p&gt;假设有个&lt;code&gt;lookupPrice(itemId)&lt;/code&gt;函数，功能是查找数据库中特定商品的价格，如果存在记录则表示成功，否则表示失败。无论如何，最终返回一个promise对象，我们可以使用&lt;code&gt;catch()&lt;/code&gt;来使代码更具可读性：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lookupPrice(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;The item costs: &#39;&lt;/span&gt; + price)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Could not find an item with that ID&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果商品存在，将会打印：&lt;code&gt;The item costs: 50&lt;/code&gt;，如果不存在，则打印：&lt;code&gt;Could not find an item with that ID&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果你对&lt;code&gt;then()&lt;/code&gt;情有独钟，上面的那段代码可以改写成下面的链式调用：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lookupPrice(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;The item costs: &#39;&lt;/span&gt; + price)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Could not find an item with that ID&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果一个promise被拒，代码将直接跳到第一个&lt;code&gt;catch&lt;/code&gt;或者有&lt;code&gt;onRejected&lt;/code&gt;的&lt;code&gt;then&lt;/code&gt;链式调用处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;比如当我们使用一个不存在的商品id来调用&lt;code&gt;lookupPrice()&lt;/code&gt;：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lookupPrice(&lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;The item costs: &#39;&lt;/span&gt; + price)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; price&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Double the price: &#39;&lt;/span&gt; + (price * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Could not find an item with that ID&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于两个&lt;code&gt;then&lt;/code&gt;都没有&lt;code&gt;onRejected&lt;/code&gt;，均被忽略了，代码直接跳到&lt;code&gt;catch&lt;/code&gt;执行。&lt;/p&gt;&lt;p&gt;接下来再列举两个代码片段，它们有细微差别，您瞧好了：&lt;br&gt;片段1：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 then(onFulfilled, onRejected)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lookupPrice(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// lookup another price and return the promise created by lookupPrice(456)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lookupPrice(&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Item 123 does not exist&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;片段2：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 catch()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lookupPrice(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;price&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// lookup another price and return the promise created by lookupPrice(456)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lookupPrice(&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Either item 123 OR 456 does not exist&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;片段1中，如果商品123不存在，带有&lt;code&gt;onRejected&lt;/code&gt;的&lt;code&gt;then&lt;/code&gt;将会被立即执行：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在这个例子中将会打印“Item 123 does not exist”&lt;/li&gt;&lt;li&gt;然而，并没有给&lt;code&gt;lookupPrice(456)&lt;/code&gt;指定错误处理函数，所以，如果商品456不存在，什么都不会打印。这是个未捕捉到的错误(Uncaught error)。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;需要提醒的一点：当你链式调用&lt;code&gt;then(onFulfilled, onRejected)&lt;/code&gt;，被执行的或者是&lt;code&gt;onFulfilled&lt;/code&gt;，或者是&lt;code&gt;onRejected&lt;/code&gt;，绝对不是两个都执行。&lt;/p&gt;&lt;p&gt;片段2中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果商品123不存在，代码直接进入&lt;code&gt;catch&lt;/code&gt;，打印“Either item 123 OR 456 does not exist”&lt;/li&gt;&lt;li&gt;由于在&lt;code&gt;then&lt;/code&gt;之后链式调用了&lt;code&gt;catch&lt;/code&gt;，在此之前任何promise转到了被拒状态，都将进入&lt;code&gt;catch&lt;/code&gt;。所以，如果商品456也不存在，也会在屏幕上看到“Either item 123 OR 456 does not exist”。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;使用new-Promise-创建promise&quot;&gt;&lt;a href=&quot;#使用new-Promise-创建promise&quot; class=&quot;headerlink&quot; title=&quot;使用new Promise()创建promise&quot;&gt;&lt;/a&gt;使用&lt;code&gt;new Promise()&lt;/code&gt;创建promise&lt;/h1&gt;&lt;p&gt;目前为止，我们通过&lt;code&gt;fetch&lt;/code&gt;API来了解了promise，通过&lt;code&gt;then&lt;/code&gt;来使用promise的结果。多数情况下，我们会用到各式各样的类库来使用promise。然而，有时还是需要自己创建promise，自主决定什么情况下转入完成，什么情况下转入被拒。&lt;/p&gt;&lt;p&gt;使用构造函数&lt;code&gt;Promise(resolver)&lt;/code&gt;来创建promise实例，其中&lt;code&gt;resolver&lt;/code&gt;接收两个参数：resolve和reject。似曾相识？恩哼？！&lt;/p&gt;&lt;p&gt;举个栗子：比如我们想创建一个随机数1到10生成函数，并且返回一个promise。如果数字小于5，进入&lt;code&gt;resolve&lt;/code&gt;（意味着操作成功），如果大于5，进入&lt;code&gt;reject&lt;/code&gt;（意味着操作失败）。&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generateRandomNumber&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; randomNumber = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor((&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (randomNumber &amp;lt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve(randomNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reject(randomNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;generateRandomNumber().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Success: &#39;&lt;/span&gt; + result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error: &#39;&lt;/span&gt; + error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;链式调用：一次只完成一个任务&quot;&gt;&lt;a href=&quot;#链式调用：一次只完成一个任务&quot; class=&quot;headerlink&quot; title=&quot;链式调用：一次只完成一个任务&quot;&gt;&lt;/a&gt;链式调用：一次只完成一个任务&lt;/h1&gt;&lt;p&gt;链式调用多个&lt;code&gt;then&lt;/code&gt;，可以做到进一步处理返回值，并且顺序化执行其它异步任务。&lt;/p&gt;&lt;p&gt;在一些业务场景，这非常有用。比如，你要调用某个终端来认证用户，一旦认证成功，我们调用另一个终端来获取用户资料。&lt;/p&gt;&lt;p&gt;上面那个场景用代码来表示的话，类似这样：&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 认证id为333的用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;&#39;/auth/333&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//将响应对象传值给authStatus，用以确认认证成功与否&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(authStatus)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//认证成功了，则继续调用loadProfile，并传入用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(loadProfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//认证失败了，进入catch处理程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;authStatus&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.status === &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用户名将传入下一个`then`，即loadProfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(response.userName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 认证失败，进入reject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.reject(&lt;span class=&quot;string&quot;&gt;&#39;User cannot be authenticated&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProfile&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fetch(&lt;span class=&quot;string&quot;&gt;&#39;/profile/&#39;&lt;/span&gt; + userName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(response.profileData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;建议花上一两分钟看上几遍上面代码，研究下各个部分是如何组合在一起的。&lt;/p&gt;&lt;p&gt;有两个地方需要特别注意下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一旦promise转为&lt;strong&gt;完成&lt;/strong&gt;状态，它的值将被当做参数自动传入下一个&lt;code&gt;then&lt;/code&gt;方法中。&lt;/li&gt;&lt;li&gt;如果认证失败，将立即进入&lt;code&gt;catch&lt;/code&gt;，并略过&lt;code&gt;.then(loadProfile)&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;Promise-all-：一次搞定！&quot;&gt;&lt;a href=&quot;#Promise-all-：一次搞定！&quot; class=&quot;headerlink&quot; title=&quot;Promise.all()：一次搞定！&quot;&gt;&lt;/a&gt;Promise.all()：一次搞定！&lt;/h1&gt;&lt;p&gt;如果我们不关心异步操作的执行顺序，换句话说，假如我们想在获取用户信息的同时，把最近发表的文章也获取了，该怎么办？&lt;/p&gt;&lt;p&gt;这时候就该&lt;code&gt;Promise.all()&lt;/code&gt;上场了。它将promise数组作为参数传入，并且实例化一个promise，只有当数组中所有的promise都转为完成状态时，该实例化promise才进入完成状态。但是，请记住，一旦参数中有一个promise是被拒状态，Promise.all()也就进入了被拒状态。要么所有的promise都完成，要么全部被拒。&lt;/p&gt;&lt;p&gt;Promise.all()完成返回的结果是一个数组，其中的值对应参数中的promise数组。下面根据刚刚提到的那个场景，我们使用Promise.all()来实现下：&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fetch(&lt;span class=&quot;string&quot;&gt;&#39;/profile/333&#39;&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;// 获取用户信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fetch(&lt;span class=&quot;string&quot;&gt;&#39;/posts/user/333&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 获取用户文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// `result`是一个长度为2的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; profileInfo = result[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].profileData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; recentPosts = result[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//处理数据 BLA BLA ~~~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;就这些了！我保证！（I-Promise）&quot;&gt;&lt;a href=&quot;#就这些了！我保证！（I-Promise）&quot; class=&quot;headerlink&quot; title=&quot;就这些了！我保证！（I Promise）&quot;&gt;&lt;/a&gt;就这些了！我保证！（I Promise）&lt;/h1&gt;&lt;p&gt;一旦开始在代码中实践Promise，你会发现一切都变得相当简单。因此我建议你打开Chrome/Firefox的开发者工具，走一遍这篇文章里的例子。&lt;/p&gt;&lt;p&gt;需要指出的是，有一个Promise的API我还没有提及:&lt;code&gt;Promise.race()&lt;/code&gt;。它和&lt;code&gt;Promise.all()&lt;/code&gt;类似，传入一个promise数组，并实例化一个promise，但不同之处在于传入的promise有任何一个转为完成，实例化的promise便进入完成，任何一个promise转为被拒，便进入被拒。个人认为，这并不十分实用，但我认为有一些特定业务场景会用得上它，你可以在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这儿&lt;/a&gt;熟悉下这个API，祝好运！&lt;/p&gt;&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://coligo.io/javascript-promises-plain-simple/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Promises: Plain and Simple&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN:Promise&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;promise.jpg&quot; alt=&quot;javascript promise&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;先看一段代码：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="它山之石" scheme="http://zerosoul.github.io/categories/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="译文" scheme="http://zerosoul.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="技术" scheme="http://zerosoul.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://zerosoul.github.io/tags/javascript/"/>
    
      <category term="promise" scheme="http://zerosoul.github.io/tags/promise/"/>
    
      <category term="ES6" scheme="http://zerosoul.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>读《从0到1》</title>
    <link href="http://zerosoul.github.io/2016/05/22/zero-to-one/"/>
    <id>http://zerosoul.github.io/2016/05/22/zero-to-one/</id>
    <published>2016-05-22T09:17:59.000Z</published>
    <updated>2016-05-22T11:01:00.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;paypal_team.jpg&quot; alt=&quot;paypal team&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我的生活里充满了套路：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;凌晨四点总会醒来，然后撒泡尿继续睡觉；&lt;/li&gt;&lt;li&gt;每天早上必须洗澡，不然一天浑身难受；&lt;/li&gt;&lt;li&gt;出门经常性不锁门，只是随手一带；&lt;/li&gt;&lt;li&gt;自行车从来不上锁，即使是放在了地铁口；&lt;/li&gt;&lt;li&gt;随身现金从来没超过200，能支付宝就微信；&lt;/li&gt;&lt;li&gt;跑完步一定要发朋友圈，不然就觉得白跑了；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;读书也是，一般会避开畅销书，挑选豆瓣评分较高的经典书，也会从一本书开始了解到作者，进而选读他的其他作品，还会无意间听到一个牛人，知道他写过某本书，然后买来开始拜读。好吧，绕了一大圈子，终于开始进入主题了，今天要记录的就是我读书套路的最后一种：彼得蒂尔写的《从0到1》。&lt;/p&gt;&lt;p&gt;这是本畅销书，和其他大多数畅销书类似，没有提出任何新知，一直在强调的是在我们中学课本上就在强调的创新，新瓶装旧酒，&lt;strong&gt;有用的废话&lt;/strong&gt;大集合。但是仍然值得一读，因为它确实有料。我们可以先从说一说彼得蒂尔开始…&lt;/p&gt;&lt;h1 id=&quot;其人其事&quot;&gt;&lt;a href=&quot;#其人其事&quot; class=&quot;headerlink&quot; title=&quot;其人其事&quot;&gt;&lt;/a&gt;其人其事&lt;/h1&gt;&lt;p&gt;彼得蒂尔毕业于斯坦福法学院，1996年成立Thiel Capital，2002年改名为Clarium Capital，公司拥有的资产达55亿美元。他于1998年与他人共同创立了PayPal，2002年以15亿美元的价格售出，个人获利6千万美元。他还是Facebook的首个外部投资者。他打造了多家异军突起的公司，《从0到1》展现了他到底是如何做到的。所以，当一个有冒险精神的人写书了，务必要读一读。&lt;/p&gt;&lt;p&gt;尼采曾在精神错乱前写道：“个人发生精神错乱很少见，但对群体、政党、国家、时代而言，精神错乱很普遍。”如果你能识别出那些不切实际你的大众观点，你就能看到隐藏在这些观点背后的反主流事实。《从0到1》就是能让我们识别出“反主流事实”的一本书。&lt;/p&gt;&lt;h1 id=&quot;其书珠玑&quot;&gt;&lt;a href=&quot;#其书珠玑&quot; class=&quot;headerlink&quot; title=&quot;其书珠玑&quot;&gt;&lt;/a&gt;其书珠玑&lt;/h1&gt;&lt;p&gt;从零到一，或者说从无到有，意味着企业要善于创造和创新，通过技术专利、网络效应、规模经济、品牌等形成壁垒，从而实现质的垂直性层级跨越，由此开辟一个只属于自己的蓝海市场而成为这个市场的唯一，这样的垄断足可以让企业安享丰厚利润。&lt;/p&gt;&lt;p&gt;当代企业的经营境界有三层：企业只是制造满足市场需求的产品，只要有原型，工业流水线可以让产品大量复制生产出来，是为第一层；企业创造了良好的基因组织，因而可以与时俱进地不断进化，实现纵向的传承，其最好的产品便是企业自身，是为第二层；企业创造了社会基因或者思想基因，可以跨界影响到整个行业乃至社会，实现横向传承，是为第三层。&lt;/p&gt;&lt;p&gt;今天的“最佳方法”可能会把我们引入死胡同，而最佳途径是未经尝试的新路径。科技是神奇的，它能事半功倍，将我们的基础能力提升到一个新的高度。成功人士总能在意想不到的地方发现价值，他们遵循的是基本原则，而非秘籍。&lt;/p&gt;&lt;p&gt;在什么重要问题上，你与其他人有不同看法？&lt;/p&gt;&lt;p&gt;大部分人认为世界的未来由全球化决定，但事实是——科技更有影响力。没有科技创新，也许中国能源产量在未来20年会加倍，但造成的污染也会加倍。如果印度亿万家庭也都像现在的美国家庭那样生活——只用现代工具，结果也将是对环境造成毁灭性的破坏。如果全世界都用同一种旧方法创造财富，那么创造的不是财富，而是灾难。在资源稀缺的今天，丢掉科技创新的全球化不会长久。&lt;/p&gt;&lt;p&gt;在功能极端失调的组织中，要想获得晋升机会，告诉别人你在工作比挽起袖子做事更重要。&lt;/p&gt;&lt;p&gt;最反主流的行动不是抵制潮流，而是在潮流中不丢弃自己的独立思考。&lt;/p&gt;&lt;p&gt;多家航空公司之间存在竞争，但是谷歌却只有一家。经济学家用两个简单模型解释了这两种现象：一是完全竞争，二是垄断。所以，如果你想创造并获得持久的价值，不要只是跟风建立一个没有特色的企业。&lt;/p&gt;&lt;p&gt;非垄断者通过把他们的市场定义成各种更小市场的交集来夸大自己的独特性；相反，垄断者通过描述若干大市场的并集来伪装他们的垄断性。&lt;/p&gt;&lt;p&gt;成功企业的特性————即使严守道德，也不会影响公司发展。垄断者除了想着赚钱外还有余力想着其他事情，而非垄断者就不行。在完全竞争中，企业着眼于短期利益，不可能对未来进行长期规划。要想将企业从每日的生存竞赛中解脱出来，唯一方法就是：获取垄断利益。&lt;/p&gt;&lt;p&gt;托尔斯泰在《安娜卡列尼娜》中以下面这段文字开头：“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”而在商业中，情形恰恰相反。企业成功的原因各不同：每个垄断企业都是靠解决一个独一无二的问题获得垄断地位，而企业失败的原因却相同：它们都无法逃脱竞争。&lt;/p&gt;&lt;p&gt;竞争是一场高成本的买卖。竞争使我们过分重视过去的机会，一味重复过去的模式。竞争意味着大家都没有利润，产品没有实质差异，而且还要挣扎求生。创造性垄断就是新产品既让大众受益，又可以给创造者带来长期利润。&lt;/p&gt;&lt;p&gt;胜利肯定比失败好，但如果这场战役不值得打，那每个参与者就都是输家。有时你不得不投入战斗。需要的时候，你不仅要战斗，还必须得赢，没有中间选择：要么和风细雨润物无声，要么暴风骤雨速战速决。&lt;/p&gt;&lt;p&gt;一个企业的今天价值是它以后创造利润的总和。科技公司通常是开始几年亏损。因为创造有价值的东西需要时间，所以收益延迟。&lt;/p&gt;&lt;p&gt;垄断企业的特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;专利技术&lt;/li&gt;&lt;li&gt;网络效应&lt;/li&gt;&lt;li&gt;规模经济&lt;/li&gt;&lt;li&gt;品牌优势&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;建立垄断企业的方法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;占领小市场&lt;/li&gt;&lt;li&gt;扩大规模&lt;/li&gt;&lt;li&gt;破坏性创新&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;初创企业是你可以明确掌握尽最大努力的机会。你不只拥有自己生命的代理权，还拥有这世界上某个重要角落的代理权。而这一切都要从抵制不公平的概率主宰开始，因为你并不是一张概率决定命运的彩票。&lt;/p&gt;&lt;h1 id=&quot;再说一句&quot;&gt;&lt;a href=&quot;#再说一句&quot; class=&quot;headerlink&quot; title=&quot;再说一句&quot;&gt;&lt;/a&gt;再说一句&lt;/h1&gt;&lt;p&gt;从0到1，知易行难，但是做一个改变世界的逆行者，是我能想象到的世界上最酷的事情，彼得蒂尔做到了，而且不止一次！&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;paypal_team.jpg&quot; alt=&quot;paypal team&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我的生活里充满了套路：&lt;/p&gt;&lt;ul
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="社科" scheme="http://zerosoul.github.io/tags/%E7%A4%BE%E7%A7%91/"/>
    
      <category term="彼得蒂尔" scheme="http://zerosoul.github.io/tags/%E5%BD%BC%E5%BE%97%E8%92%82%E5%B0%94/"/>
    
      <category term="商业与未来" scheme="http://zerosoul.github.io/tags/%E5%95%86%E4%B8%9A%E4%B8%8E%E6%9C%AA%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>如何获取谷歌浏览器的独立安装包</title>
    <link href="http://zerosoul.github.io/2016/05/11/download-chrome-standalone/"/>
    <id>http://zerosoul.github.io/2016/05/11/download-chrome-standalone/</id>
    <published>2016-05-11T15:37:26.000Z</published>
    <updated>2016-06-17T05:52:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;chrome.jpg&quot; alt=&quot;chrome pic&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;已经N久没有更新过Chrome了，听说版本号都到了50+，我却还停留在40+。工欲善其事必先利其器，可是问题来了：Chrome自带的更新功能在我机器上失效！&lt;/p&gt;&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;有问题了就要想办法解决，最为简单粗暴的方式便是重装Chrome。于是跑到官网（需翻墙），下载安装包。其实下载下来的安装包是个在线安装包，所以很小，这种思路挺好，但是问题又来了：在线安装包的进度条一直处于“进度中”，看来又是卡在了某个网络连接上。&lt;/p&gt;&lt;p&gt;Chrome有没有独立安装包？抱着这个想法在官网找了找有没有下载入口，很遗憾没找到。于是祭出Google大法：使用关键词&lt;strong&gt;chrome download standalone&lt;/strong&gt;搜索，从结果中很快找到了预期的解决方法：&lt;a href=&quot;http://www.askvg.com/official-link-to-download-google-chrome-standalone-offline-installer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Official Link to Download Google Chrome Full Standalone Offline Installer&lt;/a&gt;。其实很简单，在官网链接后面加参：&lt;code&gt;standalone=1&lt;/code&gt;，然后按照正常方式下载，便是下载的独立安装包。不过需要注意的是：默认下载的平台是&lt;code&gt;Windows 32-bit&lt;/code&gt;，如果需要&lt;code&gt;Windows 64-bit&lt;/code&gt;，那再加个参：&lt;code&gt;platform=win64&lt;/code&gt;，如果需要&lt;code&gt;Mac&lt;/code&gt;平台版本，加参：&lt;code&gt;platform=mac&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;独立安装包下载完，走一遍正常的安装程序，一切搞定！&lt;/p&gt;&lt;h1 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h1&gt;&lt;p&gt;其他小伙伴可能也遇到过这样的小问题，所以花了点时间把我是如何解决这个问题的写了下来。有些简单粗暴，不过有时候遇到问题不一定非得去针对这个具体问题去解决，换个思路或许能成本更小地解决问题&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;chrome.jpg&quot; alt=&quot;chrome pic&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;已经N久没有更新过Chrome了，听说版本号都到
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://zerosoul.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Chrome" scheme="http://zerosoul.github.io/tags/Chrome/"/>
    
      <category term="翻墙" scheme="http://zerosoul.github.io/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="小记" scheme="http://zerosoul.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HTTP的Node.js之旅</title>
    <link href="http://zerosoul.github.io/2016/04/29/Anatomy-of-an-HTTP-Transaction/"/>
    <id>http://zerosoul.github.io/2016/04/29/Anatomy-of-an-HTTP-Transaction/</id>
    <published>2016-04-29T07:48:52.000Z</published>
    <updated>2016-05-01T02:49:02.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http.jpg&quot; alt=&quot;http&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两天node.js发布了新版本，想看看具体更新了啥，于是去&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;找changelog看了看，顺便逛了逛其它栏目。没想到，在DOCS下的&lt;a href=&quot;https://nodejs.org/en/docs/guides/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guides&lt;/a&gt;发现了一篇好文，讲的是node.js对http请求的处理过程，虽然不是很适合初学者，但顺藤摸瓜，能挖掘出许多知识点，串联起来，干货满满。下面是译文，没有逐字逐句翻译，有添油加醋的地方，但不影响原文的表达。&lt;/p&gt;&lt;h1 id=&quot;译文&quot;&gt;&lt;a href=&quot;#译文&quot; class=&quot;headerlink&quot; title=&quot;译文&quot;&gt;&lt;/a&gt;译文&lt;/h1&gt;&lt;h2 id=&quot;温馨提示&quot;&gt;&lt;a href=&quot;#温馨提示&quot; class=&quot;headerlink&quot; title=&quot;温馨提示&quot;&gt;&lt;/a&gt;温馨提示&lt;/h2&gt;&lt;p&gt;这篇文章目的在于阐释HTTP请求在node.js中的处理过程。所以前提是假定你知道HTTP为何物，并且对node.js的&lt;a href=&quot;https://nodejs.org/api/events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventEmitters&lt;/a&gt;和&lt;a href=&quot;https://nodejs.org/api/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Streams&lt;/a&gt;有所了解，否则，最好快速过一下有关的&lt;a href=&quot;https://nodejs.org/dist/latest-v6.x/docs/api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;创建服务器&quot;&gt;&lt;a href=&quot;#创建服务器&quot; class=&quot;headerlink&quot; title=&quot;创建服务器&quot;&gt;&lt;/a&gt;创建服务器&lt;/h2&gt;&lt;p&gt;任何一个node web server在代码某一处都会通过&lt;a href=&quot;https://nodejs.org/api/http.html#http_http_createserver_requestlistener&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;createServer&lt;/a&gt;创建一个web服务器对象.&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 见证奇迹的时刻&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作为参数传入&lt;code&gt;createServer&lt;/code&gt;的函数是http请求必由之路，因此也叫作请求处理函数。事实上，&lt;code&gt;createServer&lt;/code&gt;返回的&lt;code&gt;server&lt;/code&gt;对象是一个&lt;code&gt;EventEmitter&lt;/code&gt;，因此，上面那段代码也可以这么写：&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = http.createServer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.on(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 见证奇迹的时刻&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当请求来临时，node.js会调用请求处理函数，并且封装好了两个常用对象：&lt;strong&gt;request&lt;/strong&gt;和&lt;strong&gt;response&lt;/strong&gt;。稍后我们会经常碰到这两个家伙的。&lt;/p&gt;&lt;p&gt;花开两朵，各表一枝。为了能够接收到http请求，还需要调用&lt;code&gt;server&lt;/code&gt;对象的&lt;code&gt;listen&lt;/code&gt;方法。多数情况下，你只需要传给&lt;code&gt;listen&lt;/code&gt;一个端口号。还有一些其他设置，感兴趣的话请参考&lt;a href=&quot;https://nodejs.org/api/http.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;Method-URL-和-Headers&quot;&gt;&lt;a href=&quot;#Method-URL-和-Headers&quot; class=&quot;headerlink&quot; title=&quot;Method,URL 和 Headers&quot;&gt;&lt;/a&gt;Method,URL 和 Headers&lt;/h2&gt;&lt;p&gt;处理一个请求时，你想知道的第一件事可能就是看一下这个请求的&lt;code&gt;method&lt;/code&gt;和&lt;code&gt;url&lt;/code&gt;，然后才会有相应的处理。node.js把这两个信息放在了&lt;code&gt;request&lt;/code&gt;对象里了，直接调用即可：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = request.method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = request.url;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注:request 对象是 &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IncommingMessage&lt;/a&gt;的一个实例&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;Headers&lt;/code&gt;也在&lt;code&gt;request&lt;/code&gt;对象里：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headers = request.headers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userAgent = headers[&lt;span class=&quot;string&quot;&gt;&#39;user-agent&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，无论客户端发送的是什么，node.js把所有的头信息关键词都小写化了。变单一的同时也就减少了因分歧出错的可能性。还有，如果有重复的头信息，有些会重写，有些会使用&lt;code&gt;,&lt;/code&gt;合并成字符串。在一些场景可能会出现问题，没关系，&lt;code&gt;request&lt;/code&gt;中还有个&lt;a href=&quot;https://nodejs.org/api/http.html#http_message_rawheaders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rawHeaders&lt;/a&gt;，你值得拥有。&lt;/p&gt;&lt;h2 id=&quot;Request-Body（请求体）&quot;&gt;&lt;a href=&quot;#Request-Body（请求体）&quot; class=&quot;headerlink&quot; title=&quot;Request Body（请求体）&quot;&gt;&lt;/a&gt;Request Body（请求体）&lt;/h2&gt;&lt;p&gt;当请求方法是&lt;code&gt;PUT&lt;/code&gt;或者&lt;code&gt;POST&lt;/code&gt;时，请求体就成了重点关注对象。获取请求体，相对于获取上面那三个值，就需要多知道点了：&lt;code&gt;request&lt;/code&gt;对象实现了&lt;a href=&quot;https://nodejs.org/api/stream.html#stream_class_stream_readable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadableStream&lt;/a&gt;接口，所以能够被监听或者管道化。因此，我们可以通过监听&lt;code&gt;data&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;事件来获取流内数据。&lt;/p&gt;&lt;p&gt;&lt;code&gt;data&lt;/code&gt;过来的数据块都是&lt;a href=&quot;https://nodejs.org/api/buffer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Buffer&lt;/a&gt;。如果你清楚的知道传输过来的数据是字符串，那么最好将它们存放在一个数组里，在&lt;code&gt;end&lt;/code&gt;事件中，合并(concatenate)并字符串化(stringify)。&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  body.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  body = Buffer.concat(body).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 代码执行到这里，body就拥有了整个字符串形式的数据了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;注：多数情况下，这样做有些啰嗦。幸运的是，npm上有许多能将这些逻辑隐藏的优秀模块，比如&lt;a href=&quot;https://www.npmjs.com/package/concat-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;concat-stream&lt;/a&gt;和&lt;a href=&quot;https://www.npmjs.com/package/body&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;body&lt;/a&gt;。即便如此，还是希望能够好好理解一下这个细节，因为这属于基础。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;有关错误（Errors）&quot;&gt;&lt;a href=&quot;#有关错误（Errors）&quot; class=&quot;headerlink&quot; title=&quot;有关错误（Errors）&quot;&gt;&lt;/a&gt;有关错误（Errors）&lt;/h2&gt;&lt;p&gt;既然&lt;code&gt;request&lt;/code&gt;是一个&lt;code&gt;EventEmitter&lt;/code&gt;，那么当有错误时，就可以触发&lt;code&gt;error&lt;/code&gt;事件。&lt;strong&gt;如果你没有监听这个事件，错误会被抛出，进而很可能导致node.js程序的崩溃。&lt;/strong&gt;所以，最佳实践便是给&lt;code&gt;request&lt;/code&gt;增加&lt;code&gt;error&lt;/code&gt;事件，在事件回调函数里面做一下日志记录的同时，最好给客户端返回对应的错误码，这个在后面会提到。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// console的错误标准输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err.stack);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有关错误的处理，还有其它方式，可以参考&lt;a href=&quot;https://nodejs.org/api/errors.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。记住，错误随时会发生，要对此有所警惕，对其有专门的处理总是好的。&lt;/p&gt;&lt;h2 id=&quot;小结一下&quot;&gt;&lt;a href=&quot;#小结一下&quot; class=&quot;headerlink&quot; title=&quot;小结一下&quot;&gt;&lt;/a&gt;小结一下&lt;/h2&gt;&lt;p&gt;走到这里，我们已经创建了一个web服务器，获取到了请求的&lt;code&gt;method&lt;/code&gt;，&lt;code&gt;url&lt;/code&gt;和&lt;code&gt;headers&lt;/code&gt;，哦，还有请求体内容。现在我们将这些放在一起：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headers = request.headers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = request.method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = request.url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body = Buffer.concat(body).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 至此，我们就获取到了所有需要响应给客户端的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Activates this server, listening on port 8080.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;很显然，如果运行这个代码，服务器能接收到请求（request），但没发出响应（response）。也就是说，在浏览器里面发出请求，会超时。&lt;/p&gt;&lt;p&gt;目前为止，我们还未碰触&lt;code&gt;response&lt;/code&gt;对象，它是&lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ServerResponse&lt;/a&gt;的一个实例，也是一个&lt;a href=&quot;https://nodejs.org/api/stream.html#stream_class_stream_writable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WritableStream&lt;/a&gt;，为了将数据传回客户端，其中包含了许多实用方法。好吧，依旧是花开两朵，各表一枝，我们先认识下http状态码，待会儿再谈&lt;code&gt;response&lt;/code&gt;对象。&lt;/p&gt;&lt;h2 id=&quot;HTTP状态码&quot;&gt;&lt;a href=&quot;#HTTP状态码&quot; class=&quot;headerlink&quot; title=&quot;HTTP状态码&quot;&gt;&lt;/a&gt;HTTP状态码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;response&lt;/code&gt;默认状态码是&lt;code&gt;200&lt;/code&gt;。当然，有些情况下，你需要返回不同的状态码。&lt;code&gt;response&lt;/code&gt;中的&lt;code&gt;statusCode&lt;/code&gt;属性就是为此存在的：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.statusCode = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//告诉客户端资源未找到...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;设置响应头&quot;&gt;&lt;a href=&quot;#设置响应头&quot; class=&quot;headerlink&quot; title=&quot;设置响应头&quot;&gt;&lt;/a&gt;设置响应头&lt;/h2&gt;&lt;p&gt;&lt;code&gt;response&lt;/code&gt;中的&lt;code&gt;setHeader&lt;/code&gt;该出场了：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.setHeader(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.setHeader(&lt;span class=&quot;string&quot;&gt;&#39;X-Powered-By&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;bacon&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，响应头关键词对大小写不敏感，如果重复设置一个响应头，那么客户端取到的是你最后一个。&lt;/p&gt;&lt;h2 id=&quot;显式发送响应头&quot;&gt;&lt;a href=&quot;#显式发送响应头&quot; class=&quot;headerlink&quot; title=&quot;显式发送响应头&quot;&gt;&lt;/a&gt;显式发送响应头&lt;/h2&gt;&lt;p&gt;上面提到的&lt;code&gt;statusCode&lt;/code&gt;和&lt;code&gt;setHeader&lt;/code&gt;属于&lt;strong&gt;隐式头部&lt;/strong&gt;：意思是在发送body数据前，依赖的是node.js来发送头部数据。&lt;/p&gt;&lt;p&gt;如果你愿意，也可以显式地将头部信息写到响应流里。&lt;code&gt;writeHead&lt;/code&gt;便是为此而生：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;X-Powered-By&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;bacon&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;设置完头部，接下来便是发送响应数据了。&lt;/p&gt;&lt;h2 id=&quot;发送响应数据&quot;&gt;&lt;a href=&quot;#发送响应数据&quot; class=&quot;headerlink&quot; title=&quot;发送响应数据&quot;&gt;&lt;/a&gt;发送响应数据&lt;/h2&gt;&lt;p&gt;既然&lt;code&gt;response&lt;/code&gt;对象是个&lt;code&gt;WritableStream&lt;/code&gt;，那么就可以使用流方法来向客户端写数据了。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;html&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;body&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/body&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/html&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.end();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上代码也可以简写成以下形式：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.end(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注:响应体在响应头之后，因此往response里写数据之前就设置好状态码和头信息，一切才会有意义。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;Response的错误处理&quot;&gt;&lt;a href=&quot;#Response的错误处理&quot; class=&quot;headerlink&quot; title=&quot;Response的错误处理&quot;&gt;&lt;/a&gt;Response的错误处理&lt;/h2&gt;&lt;p&gt;与&lt;code&gt;request&lt;/code&gt;一样，&lt;code&gt;response&lt;/code&gt;也会触发&lt;code&gt;error&lt;/code&gt;事件。所以，有关&lt;code&gt;request&lt;/code&gt;错误处理最佳实践，同样也适用于&lt;code&gt;response&lt;/code&gt;。&lt;/p&gt;&lt;h2 id=&quot;再来小结一下&quot;&gt;&lt;a href=&quot;#再来小结一下&quot; class=&quot;headerlink&quot; title=&quot;再来小结一下&quot;&gt;&lt;/a&gt;再来小结一下&lt;/h2&gt;&lt;p&gt;目前来讲，我们已经不会让浏览器傻等了。那么，把所有代码放在一起，我们可以做到让服务端把浏览器过来的请求组织下数据再传送过去，注意，使用&lt;code&gt;JSON.stringify&lt;/code&gt;格式化了下数据：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headers = request.headers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = request.method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = request.url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body = Buffer.concat(body).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// BEGINNING OF NEW STUFF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.statusCode = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.setHeader(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注：上面两行代码可以用下面一行替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// response.writeHead(200, &amp;#123;&#39;Content-Type&#39;: &#39;application/json&#39;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; responseBody = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      headers: headers,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      method: method,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: url,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body: body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.write(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(responseBody));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注：同样，可以这样替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// response.end(JSON.stringify(responseBody))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// END OF NEW STUFF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;Echo-服务器&quot;&gt;&lt;a href=&quot;#Echo-服务器&quot; class=&quot;headerlink&quot; title=&quot;Echo 服务器&quot;&gt;&lt;/a&gt;Echo 服务器&lt;/h2&gt;&lt;p&gt;基于上面代码，我们可以简化一下，做出一个Echo服务器，即请求什么数据，就返回什么数据。我们只需要从请求里面获取数据并写到响应里，和上面代码差不多：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body = Buffer.concat(body).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end(body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好吧，有些过于简单，我们再增加两个需求，满足下面两个条件才给出正确响应：&lt;br&gt;1.请求的&lt;code&gt;method&lt;/code&gt;是&lt;code&gt;GET&lt;/code&gt;&lt;br&gt;2.URL是&lt;code&gt;/echo&lt;/code&gt;&lt;br&gt;否则给出&lt;code&gt;404&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (request.method === &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt; &amp;amp;&amp;amp; request.url === &lt;span class=&quot;string&quot;&gt;&#39;/echo&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body = Buffer.concat(body).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      response.end(body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.statusCode = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注：检查URL，实质上就是一种路由&lt;code&gt;routing&lt;/code&gt;形式。其它形式有简单如&lt;code&gt;swtich&lt;/code&gt;语句，复杂如&lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/express&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express&lt;/a&gt;&lt;/strong&gt;框架。如果需要纯路由功能，可以试试[Router][&lt;a href=&quot;https://www.npmjs.com/package/router]。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/router]。&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;上面的代码能不能再精简下呢？别忘了，&lt;code&gt;request&lt;/code&gt;对象是一个&lt;code&gt;ReadableStream&lt;/code&gt;，&lt;code&gt;response&lt;/code&gt;对象是一个&lt;code&gt;WritableStream&lt;/code&gt;。这意味着可以使用管道（pipe）直接将数据从一端传到另一端。所以，更为精简的代码诞生了：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (request.method === &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt; &amp;amp;&amp;amp; request.url === &lt;span class=&quot;string&quot;&gt;&#39;/echo&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.pipe(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.statusCode = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事情还没完，程序出错了怎么办？好吧，加上错误处理机制：在此，我们仅仅打印出错误，并将状态码置为&lt;code&gt;404&lt;/code&gt;。（更为详细的错误处理机制可以参考&lt;a href=&quot;https://nodejs.org/api/errors.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;）&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.statusCode = &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  response.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (request.method === &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt; &amp;amp;&amp;amp; request.url === &lt;span class=&quot;string&quot;&gt;&#39;/echo&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.pipe(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.statusCode = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;OK，node.js如何处理http请求，目前为止，我们已经把大部分的基础知识讲解到了。最后，我们总结下这些知识点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;实例化一个HTTP服务器，并设置一个请求处理函数，另外别忘了监听一个端口&lt;/li&gt;&lt;li&gt;从&lt;code&gt;request&lt;/code&gt;获取&lt;code&gt;headers&lt;/code&gt;,&lt;code&gt;url&lt;/code&gt;,&lt;code&gt;method&lt;/code&gt;,&lt;code&gt;body&lt;/code&gt;等信息&lt;/li&gt;&lt;li&gt;根据&lt;code&gt;url&lt;/code&gt;或者其它信息路由&lt;/li&gt;&lt;li&gt;通过&lt;code&gt;response&lt;/code&gt;发送响应头、状态码和数据&lt;/li&gt;&lt;li&gt;&lt;code&gt;request&lt;/code&gt;数据管道化到&lt;code&gt;response&lt;/code&gt;&lt;/li&gt;&lt;li&gt;对&lt;code&gt;request&lt;/code&gt;和&lt;code&gt;response&lt;/code&gt;设置错误处理机制&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;原文链接：&lt;a href=&quot;https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anatomy of an HTTP Transaction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventEmitters&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Streams&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/http.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http.jpg&quot; alt=&quot;http&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两天node.js发布了新版本，想看看具体更新了啥，于是去&lt;a
    
    </summary>
    
      <category term="它山之石" scheme="http://zerosoul.github.io/categories/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="译文" scheme="http://zerosoul.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="技术" scheme="http://zerosoul.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="node.js" scheme="http://zerosoul.github.io/tags/node-js/"/>
    
      <category term="http" scheme="http://zerosoul.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>读《黑客与画家》</title>
    <link href="http://zerosoul.github.io/2016/04/24/hackers-and-painters/"/>
    <id>http://zerosoul.github.io/2016/04/24/hackers-and-painters/</id>
    <published>2016-04-24T06:40:20.000Z</published>
    <updated>2016-04-24T08:43:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;hacker.jpg&quot; alt=&quot;黑客与画家&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我们生活中的一切，都正在成为计算机。所以，如果你想理解我们目前的世界以及它的未来动向，那么多了解一些黑客的想法会对你有帮助。 — 格雷厄姆 《黑客与画家》&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;《黑客与画家》是去年读过的一本书，作者是美国互联网举足轻重、有“创业教父”之称的格雷厄姆，本书是他的文集。最近快速重温了一遍，于我而言，这又是一本常读常新的经典书。&lt;/p&gt;&lt;p&gt;格雷厄姆既是一名黑客，又是一名画家，所以才有了这么酷的书名。酷且有内涵，干货满满，每一篇文章都抵得上一本好书，下面写一些对我有感触的。&lt;/p&gt;&lt;h1 id=&quot;书呆子&quot;&gt;&lt;a href=&quot;#书呆子&quot; class=&quot;headerlink&quot; title=&quot;书呆子&quot;&gt;&lt;/a&gt;书呆子&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;“书呆子”的目标具有两重性。他们毫无疑问想让自己受欢迎，但是他们更愿意让自己聪明。&lt;/li&gt;&lt;li&gt;书呆子不受欢迎的真正原因，是他们脑子里想着别的事情。他们的注意力都放在读书或者观察世界上面，而不是放在穿衣打扮、开晚会上面。&lt;/li&gt;&lt;li&gt;不去埋头探寻，就不会发现具体的证据，就会永远以为这件事是抽象的。当所做的事情能产生真实的效果，那就不仅仅是好玩了，发现正确的答案就开始变得重要了，这正是书呆子的优势所在。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;黑客与画家&quot;&gt;&lt;a href=&quot;#黑客与画家&quot; class=&quot;headerlink&quot; title=&quot;黑客与画家&quot;&gt;&lt;/a&gt;黑客与画家&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;黑客与画家的共同之处，在于他们都是创作者。与作曲家、建筑师、作家一样，黑客与画家都是试图创作出优秀作品。他们本质上都不是在做研究，虽然在创作过程中，他们可能会发现一些新技术（那样当然更好）。&lt;/li&gt;&lt;li&gt;没有什么比一个错误的前提更容易产生大量待解决的问题了。&lt;/li&gt;&lt;li&gt;创造优美事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小调整，或者将已有观点用比较新颖的方式组合起来。&lt;/li&gt;&lt;li&gt;编程语言是用来帮助思考程序的，而不是用来表达已经想好的程序。把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家、画家和建筑师做法完全一致。&lt;/li&gt;&lt;li&gt;黑客中没人喜欢用静态类型语言编程。他们需要的是一种可以随意涂抹、擦擦改改的语言，他们不想正襟危坐，把一个盛满各种变量类型的茶杯，小心翼翼放在自己膝盖上，为了与一丝不苟的编译器大婶交谈，努力地挑选词语，确保变量类型匹配，好让自己显得周到又礼貌。&lt;/li&gt;&lt;li&gt;大学和实验室强迫黑客成为科学家，企业强迫成为工程师。&lt;/li&gt;&lt;li&gt;如果你不爱一件事，就不可能把它做得真正优秀，要是你很热爱编程，就不可避免地会开发你自己的项目。&lt;/li&gt;&lt;li&gt;我们应该对&lt;strong&gt;过早设计&lt;/strong&gt;(premature design)抱有担忧，不要太早决定一个程序应该怎么做。&lt;/li&gt;&lt;li&gt;如果黑客只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，那么他其实与一个挖水沟工人是一样的，从这头挖到那头，仅此而已。但是，如果黑客是一个创作者，他从事的工作就不是机械性的工作，他必须具备灵感。&lt;/li&gt;&lt;li&gt;判断一个人是否具备“换位思考”的能力有个好办法，那就是看他怎样向没有技术背景的人解释技术问题。&lt;/li&gt;&lt;li&gt;程序写出来是给人看的，附带能在机器上运行。 —《计算机程序的结构与解释》&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;不能说的话&quot;&gt;&lt;a href=&quot;#不能说的话&quot; class=&quot;headerlink&quot; title=&quot;不能说的话&quot;&gt;&lt;/a&gt;不能说的话&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;历史的常态似乎就是，任何一个年代的人们，都会对一些荒谬的东西深信不疑。我们这个时代是否有所不同？只要读过一些历史，就知道答案几乎确定无疑，就是“没有不同”。&lt;/li&gt;&lt;li&gt;一想到现在我们言之凿凿的东西，在未来人们眼里却是荒诞不经，怎能不令人感叹呢！&lt;/li&gt;&lt;li&gt;有时候，别人会对你说：要根据社会需要，改造自己的思想。这种说法隐含的意思似乎是，如果你不认同社会，那么肯定是你自己的问题。事实上，它不仅不对，而且会让历史倒退。如果你真的相信了它，凡是不认同社会之处，连想都不敢想，那才会真出问题。&lt;/li&gt;&lt;li&gt;一个公司是否健康运作，可以用一个指标衡量，那就是对负面评价的容忍程度。做出伟大产品的公司，自我评价往往以“批评”和“自嘲”为主，而不是以“肯定”和“表扬”为主。我认识的杰出成就人士都认为自己做的不够好，之所以成功只是因为其他人做的更差。&lt;/li&gt;&lt;li&gt;如果思想很保守，自己不会知道。而且很可能还会持有相反的看法。所谓流行，本质上就是自己看不见自己的样子。否则就不会有流行了。&lt;/li&gt;&lt;li&gt;小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;设计与研究&quot;&gt;&lt;a href=&quot;#设计与研究&quot; class=&quot;headerlink&quot; title=&quot;设计与研究&quot;&gt;&lt;/a&gt;设计与研究&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;任何一个领域的最佳作品都不可能由对用户言听计从的人做出来。&lt;/li&gt;&lt;li&gt;用户不了解所有可能的选择，也经常弄错自己真正想要的东西。做一个好的产品设计师就像做一个好医生一样。你不能头痛医头，脚痛医脚。病人告诉你症状，你必须找出他生病的真正原因，然后针对病因进行治疗。&lt;/li&gt;&lt;li&gt;在软件领域，贴近用户的设计思想被归纳为“弱即是强”（Worse is Better）：如果正在设计某种新东西，就应该尽快拿出原型，听取用户的意见。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;书中两个新的看法&quot;&gt;&lt;a href=&quot;#书中两个新的看法&quot; class=&quot;headerlink&quot; title=&quot;书中两个新的看法:&quot;&gt;&lt;/a&gt;书中两个新的看法:&lt;/h1&gt;&lt;p&gt;大饼谬论，许多人认为世界上的财富总额是固定不变的，意思是，如果富人拿走所有的钱，那么其他人就变得更穷了，但是，金钱不是财富，人类历史上的财富一直在不停地增长和毁灭（总体上净增长），你要做的是创造财富，同时让自己变得更富有。&lt;/p&gt;&lt;p&gt;贫富差距，一般认为贫富差距拉大是一件坏事。作者的观点是：在工业社会，愿意创造价值的人理应获得更多的财富。其中一个例子，让苹果公司创始人每天工作20小时，为社会提供苹果电脑，最后得到的工资和普通上班族一样，如果这样，还会不会有人愿意创造财富。所以，一定程度上，现代社会的收入差距扩大是一种健康的信号，不断跟新的技术使生产率的差异加速扩大，而这种差异会直接体现在收入上。&lt;/p&gt;&lt;h1 id=&quot;想快速致富吗，去创业吧&quot;&gt;&lt;a href=&quot;#想快速致富吗，去创业吧&quot; class=&quot;headerlink&quot; title=&quot;想快速致富吗，去创业吧!&quot;&gt;&lt;/a&gt;想快速致富吗，去创业吧!&lt;/h1&gt;&lt;p&gt;书中原话：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从经济学的角度，创业是一个压缩过程，把几十年的工作年份压缩到短短几年，时间压缩了，但总的回报是一样的。&lt;/li&gt;&lt;li&gt;大公司会使每个员工的贡献平均化，即使你再努力，获得的回报和无能或懒惰的人却是一样的，所以，创业的真正意义是，你与其他愿意更努力工作的人一起组成一个团体，共同谋取更高的回报。由精英组成的小团体，即使工作平均化，也会显示出巨大的优势。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我喜欢这个理由。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;hacker.jpg&quot; alt=&quot;黑客与画家&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我们生活中的一切，都正在成为计算机。所以，如果你想理解我们目前的世界以及它的未来动向，那么多了解一些黑客的想法会对你有帮助。 — 格雷厄姆 《黑客与画家》&lt;/p&gt;&lt;/b
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="技术" scheme="http://zerosoul.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机史" scheme="http://zerosoul.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%B2/"/>
    
      <category term="阮一峰" scheme="http://zerosoul.github.io/tags/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>读《富爸爸穷爸爸》</title>
    <link href="http://zerosoul.github.io/2016/04/16/Financial-IQ/"/>
    <id>http://zerosoul.github.io/2016/04/16/Financial-IQ/</id>
    <published>2016-04-16T12:02:00.000Z</published>
    <updated>2016-04-24T08:28:31.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;fubaba.jpg&quot; alt=&quot;富爸爸&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久。 –巴克敏斯特.富勒&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;美国作家罗伯特清崎写的&lt;a href=&quot;https://book.douban.com/subject/1033778/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《富爸爸穷爸爸》&lt;/a&gt;是本老书了，因为在我的记忆里，自家小书店很久就有这本书了，而且属于积压货，对，就是连我都不屑翻看的那种积压货。前段时间有同事推荐一读，于是买来就一直放着，最近两天才拿起。差点被这沾满铜臭味的书名欺骗了，其实不谈钱就像迷恋钱一样，是一种精神上的疾病，书中所讲的一些观点还是值得深思与实践的。&lt;/p&gt;&lt;h1 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h1&gt;&lt;p&gt;罗伯特清崎从人的个体出发分析富人之所以成为富人，穷人之所以成为穷人，提出了一个全新的“财商”的概念，并向学校教育提出挑战。清崎有两个爸爸，一个有博士学位是他的亲生爸爸，也就是本书中的穷爸爸，另外一个初中都没有读完是他好友的爸爸，即富爸爸。两个爸爸都有非常高的收入，但是穷爸爸却常为钱所烦恼，而富爸爸最终成为了夏威夷最富有的人，并在过世后给家人留下了很多财产，而穷爸爸则给家人留下了很多还没有还清的债务。之所以会出现这种情况，是因为穷爸爸缺乏基本的财务知识，而关于财商的培养最大的问题是学校没有教授过这门学科，即使穷爸爸是博士学位。有关财商的教育基本是来自家庭，这就造成了穷人家庭接受的是穷人思维，富人更富有创造性，愿意经过精心筹划后再去冒险，阶级自此划分。&lt;/p&gt;&lt;p&gt;我们从小就被教育说：好好上学，毕业了找份好工作，但几乎从未认真思考过这样一个问题：好好读书就可以找到好工作吗，找到好工作就可以变富有吗。现在来看，尤其是工作几年后，答案应该都是否定的。真相是天天为金钱而忙碌，一旦陷入这种虚假的忙碌陷阱，就和那些蹬着小铁笼不停转圈的老鼠一样，它们的小毛腿蹬得飞快，小铁笼也转的飞快，可到了第二天早上，发现自己依然被困在笼子里，就像你被你的工作困住一样。这样的生活毫无意义，疲于奔命却摆脱不了贫困的现实。，那么，为什么不能让金钱为我们工作呢？学会管理风险与投资，似乎是走向这条道路的第一步。把金钱看得越重，就会为金钱工作得越辛苦，如果知道“金钱不是真实的资产”这一道理，小铁笼似乎就开始松垮了…&lt;/p&gt;&lt;h1 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h1&gt;&lt;p&gt;如果你和我一样并没有出身在那1%的家庭，可以学习作者向富爸爸学习的知识：首先，必须要了解两个词&lt;strong&gt;资产&lt;/strong&gt;和&lt;strong&gt;负债&lt;/strong&gt;。资产就是能把钱放入自己口袋的东西，而负债就是把钱从口袋里取走的东西。任何东西都可以是资产，也可以是负债。比如说你拥有一套房子，每个月要支付3000元，那这套房子就是负债，而如果租出去每月能带来3000元房租，那它就是你的一项资产了。了解这两者的差别非常重要，因为穷人花钱只有消费，没有购置资产的意识，富人花钱则是买进资产，而中产阶级花钱买自以为是资产的负债。&lt;/p&gt;&lt;p&gt;毕业后在求职大军里谋得一份工作，于是就有了收入，随着经验的丰富，薪水提高了，但更多的问题产生了，会面临着买房买车，也会想换一个iPhone 6s，于是就开始买入自以为是资产的负债，每个月要为房子还贷，为车子加油，为电话缴费，除非对金钱的思维方式作出重大改变，也就是买能把钱放进口袋的资产，不然无论薪水有多高，钱都会比必要支出多出那么一点点而已。朋友可能会羡慕你的最新款手机，但实际上并没有钱，只是看起来很有钱罢了。&lt;/p&gt;&lt;p&gt;如果跟随上学然后上班的道路，那么在继续工作的同时，要确保辛苦赚来的钱投入在购买真正的资产而非看起来像资产的负债上，当资产产生的收入，这好像叫&lt;strong&gt;被动收益&lt;/strong&gt;，高于你的支出，那就不再需要这份工作了，进而达到了财务自由的境界。&lt;/p&gt;&lt;h1 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h1&gt;&lt;p&gt;学校是生产好雇员而非好雇主的地方，当前的教育体系致力于让学生学习知识并找到好工作，一旦从学校走出，每个人便不得不贴上职业标签：程序员，销售员，工程师，科学家，厨师，警察等等。成为工薪阶层，并为钱而工作，但是只局限于所学专业的可怕后果在于：它会让你忘记关注自己的事业，反而耗尽一生去关注别人的事业，也就是老板的事业，并使他人致富。而自己的事业重心是资产项，而不是收入项，正如前面说过的秘诀是要知道资产与负债的区别，并且去买入资产。富人关心的是资产，而其他人关心的是收入，如果我们学习掌握一些财务知识，在通向财务自由的路上还是会面临许多的障碍：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;恐惧心理&lt;/li&gt;&lt;li&gt;愤世嫉俗&lt;/li&gt;&lt;li&gt;懒惰&lt;/li&gt;&lt;li&gt;不良习惯&lt;/li&gt;&lt;li&gt;自负&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果我们知道自己在哪一个问题上有所欠缺，那最好找本领域的相关书籍好好学习克服我们所面临的困难。解决了这五个问题就可以开始行动了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先要有发自内心深处的精神动力，如果促使前进的动力不够强大，那么前行道路上的严酷现实就会退缩，所以必须要有一个强有力的理由和目标，只有这样才会有持续前进的动力。&lt;/li&gt;&lt;li&gt;行动中也要明白关系的力量，也就是朋友圈。当然不应该把金钱当成挑选朋友的唯一标准，朋友中可以有穷困潦倒的，也有财务自由的，三人行必有我师焉，学习每个人身上的优点，与有钱的朋友交往并非是为了得到他们的钱财，而是学习他们得以致富的方法和知识。&lt;/li&gt;&lt;li&gt;掌握一种模式，然后再学习一种新的模式，重要的是要学会快速学习。在钱的问题上，大多数人只知道一个基本的挣钱模式，这个模式在学校就已经奠定，就是为了金钱工作，每天数以亿计的人起床上班挣钱还贷支付账单，如果对自己所做的工作感到厌倦或是觉得挣得不多，那么可以尝试下改变你的挣钱模式，&lt;/li&gt;&lt;li&gt;学会控制自己，也就是自律，首先支付自己，当资金短缺时，让压力发挥作用，而不要动用储蓄或资本。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h1&gt;&lt;p&gt;在今天这个日新月异的社会中，如果想找一个赚钱的方法机会很多，可以先停下来评估下自己的做法中哪些有效，哪些无效，在学习中寻找新的思想和新的赚钱模式。上天赐予每个人两样伟大礼物：思想和时间。运用这两件礼物去做愿意做的事情吧，比如致富。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;fubaba.jpg&quot; alt=&quot;富爸爸&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久。 –巴克敏斯特.富勒&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;一&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="理财" scheme="http://zerosoul.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="富爸爸穷爸爸" scheme="http://zerosoul.github.io/tags/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8/"/>
    
      <category term="财商" scheme="http://zerosoul.github.io/tags/%E8%B4%A2%E5%95%86/"/>
    
  </entry>
  
  <entry>
    <title>读《激荡三十年》</title>
    <link href="http://zerosoul.github.io/2016/04/10/about-chinese-business/"/>
    <id>http://zerosoul.github.io/2016/04/10/about-chinese-business/</id>
    <published>2016-04-10T14:31:44.000Z</published>
    <updated>2016-04-24T08:29:20.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;acb.jpg&quot; alt=&quot;lost man&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;成功是一种了不起的除臭剂，它可以去除你过去所有的气味。&lt;br&gt;——伊丽莎白.泰勒，美国影星&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;《英国简史》作者伍德沃德曾经写道：“历史涉及的只是一个民族生活的极小部分，人民的大部分生活和艰辛创业，过去和未来都不会有文字记载”。他还引用&lt;a href=&quot;http://www.zwbk.org/MyLemmaShow.aspx?lid=296672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《便西拉智训》&lt;/a&gt;中的一段名句说：“有的人湮没无闻，他们死去，无人知晓，仿佛他们从未来过这个世界一样”。作为历史小白，总想了解下中国当代历史细节，于是在偶然的际遇，去年大概六月份入手了一套&lt;a href=&quot;http://baike.baidu.com/subview/701659/7602430.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;吴晓波&lt;/a&gt;编著的《激荡三十年》，上下两册，外加一本珍藏版的纪实画册，没想到这套书成为了我的商业启蒙读物。&lt;/p&gt;&lt;h1 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h1&gt;&lt;p&gt;断断续续大概用了多半年的阅读时间，最近又拿起快速重温一遍：&lt;/p&gt;&lt;p&gt;全书组织以编年形式，每一年为一章。而每一章中，选择重要政策变化进行解读，再辅以全国经济形势的阐述，热点社会事件再现，另穿插以典型企业家，在若干相关章节中连续提起，使各章节间既有历史逻辑性连贯，又有人物或企业命运的连贯，读起来手不释卷。另外，在每一章结尾，又附有一二人物传记，更将突出的典型人物着力描绘。如此写法，不光是书的可读性强，在理论上也使得我所感兴趣的宏观与微观之间的联系得以展示，且相互解释，不得不佩服作者深厚的研究功底和文学修养。&lt;/p&gt;&lt;h1 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h1&gt;&lt;p&gt;股市之狂热，楼市之飙升，人民币之升值，通货膨胀之隐患，贸易摩擦之激烈以及大国情结之高昂，每每让人想起那句名言：历史往往是重复的，只是经常以另一种方式呈现出来罢了。&lt;/p&gt;&lt;p&gt;在这片神奇的土地，以下描述一再被证实：任何被视为奇迹的事物，往往都很难延续，因为它经历的是非常规的历程，身处其中的人们，因此而获得巨大利益，每每不可能摆脱那些终身难忘的际遇，他们相信那就是命运，总希望每次都能鸿运高照，每次都能侥幸胜出，然而最后，所有的光荣往往枯萎在自己的光环中。&lt;/p&gt;&lt;p&gt;所以，当一个商业故事以无比圆滑和生动的姿态出现在你面前的时候，首先必须怀疑，而所有的怀疑，最终都会被证明是正确的，或者至少是值得的。&lt;/p&gt;&lt;p&gt;也许在多年后回望，人们会说，这激荡的30年是一个多么世俗的年代，人人以物质追求为目标，道德底线被轻易打破，心灵焦虑无处不在，身份认同时常颠覆。所有的财富故事都暧不清，很多企业家前途叵测，挣扎在产权灰色地带，不能自拔。&lt;/p&gt;&lt;p&gt;但同时不得否认的是，30年催生了一个时代的伟岸和壮观，也同样滋养了世故，丑陋和空虚。我们遭遇的是一个空前复杂而大半面目未清的时代。急速变化的世界，怅然若失的个人命运，传统与现代，个人与群体，不同利益集团的冲撞和拷问，这是30年成长底色。&lt;/p&gt;&lt;p&gt;尽管充斥着种种抱怨，失落和焦虑，但是，仍然要说，那是一个好的时代。因为，它允许新的可能性发生。&lt;/p&gt;&lt;h1 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h1&gt;&lt;p&gt;成功，在中国已经是一个烂大街的名词。人人都在渴望，却终究不得其法。历史一再告诫我们：毁灭的种子是什么？第一个就是繁荣自身。那么我们这代人何去何从？作为一名技术从业者，似乎在互联网公司看到了些许希望：既无模糊产权之累、又无灰色创业之原罪、也无国有垄断企业之压迫，且还在竞争中屡屡击败跨国公司。&lt;/p&gt;&lt;p&gt;写到此，我惊喜地发现自己在以一个从未有过的角度来思考问题，正如法国人&lt;a href=&quot;http://baike.baidu.com/view/83542.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;罗兰巴特&lt;/a&gt;所说：“我对不太可能发生的事，以及历史的本质始终迷惑不解”。阅读当代史的快感和诡异，便全在这里了。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;acb.jpg&quot; alt=&quot;lost man&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;成功是一种了不起的除臭剂，它可以去除你过去所有的气味。&lt;br&gt;——伊丽莎白.泰勒，美国影星&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="激荡三十年" scheme="http://zerosoul.github.io/tags/%E6%BF%80%E8%8D%A1%E4%B8%89%E5%8D%81%E5%B9%B4/"/>
    
      <category term="中国企业史" scheme="http://zerosoul.github.io/tags/%E4%B8%AD%E5%9B%BD%E4%BC%81%E4%B8%9A%E5%8F%B2/"/>
    
      <category term="吴晓波" scheme="http://zerosoul.github.io/tags/%E5%90%B4%E6%99%93%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>探索Object.assign()</title>
    <link href="http://zerosoul.github.io/2016/03/25/explore-object-assign/"/>
    <id>http://zerosoul.github.io/2016/03/25/explore-object-assign/</id>
    <published>2016-03-25T09:17:47.000Z</published>
    <updated>2016-06-17T05:52:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;obj.jpg&quot; alt=&quot;extend obj&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;最近在重构以前写过的&lt;strong&gt;javascript&lt;/strong&gt;代码，目的是为了去掉对&lt;strong&gt;jQuery&lt;/strong&gt;的依赖。其中有多处用到了&lt;a href=&quot;http://api.jquery.com/jQuery.extend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;$.extend()&lt;/code&gt;&lt;/a&gt;方法，自然而然会想到这么一个问题：如何用自己的方式来实现？&lt;/p&gt;&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;首先，定义函数的功能：&lt;strong&gt;传入多个对象，将多个对象的内容合并到第一个对象中，最后返回合并后的对象，即参数中的第一个对象。&lt;/strong&gt;这样的定义是否似曾相识？没错，和ES6中的新特性&lt;code&gt;Object.assign()&lt;/code&gt;几乎一模一样。所以，可以从探索&lt;code&gt;Object.assign()&lt;/code&gt;开始。&lt;/p&gt;&lt;h1 id=&quot;探索Object-assign&quot;&gt;&lt;a href=&quot;#探索Object-assign&quot; class=&quot;headerlink&quot; title=&quot;探索Object.assign()&quot;&gt;&lt;/a&gt;探索Object.assign()&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Object.assign(target, ...sources)&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;h3 id=&quot;拷贝对象&quot;&gt;&lt;a href=&quot;#拷贝对象&quot; class=&quot;headerlink&quot; title=&quot;拷贝对象&quot;&gt;&lt;/a&gt;拷贝对象&lt;/h3&gt;&lt;p&gt;只需要传入的第一个参数是空对象即可：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123; foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(copy); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; foo: 1 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 id=&quot;合并对象&quot;&gt;&lt;a href=&quot;#合并对象&quot; class=&quot;headerlink&quot; title=&quot;合并对象&quot;&gt;&lt;/a&gt;合并对象&lt;/h3&gt;&lt;p&gt;注意第一个传参将会被改变，所以如果不想改变第一个有值参数，可以传入一个空对象：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o1 = &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o2 = &amp;#123; b: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o3 = &amp;#123; c: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(o1, o2, o3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: 2, c: 3 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o1);  &lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: 2, c: 3 &amp;#125;, 注意第一个参数，即o1有了变化。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;在&lt;code&gt;Object.assign()&lt;/code&gt;中，原型属性和非可枚举属性不会被拷贝。（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;两种属性的解释&lt;/a&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(&amp;#123; foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;comment&quot;&gt;// foo是obj原型链上的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// bar 是非可枚举（non-enumerable）属性.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baz: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// baz是可枚举属性.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(copy); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; baz: 3 &amp;#125;，只拷贝了baz属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;元类型会被转化为对象&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v1 = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v2 = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v3 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, v1, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, v2, &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;, v3); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//元类型里面的字符串被转化为字符数组，null和undefined被忽略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;异常会抛出，但是已经执行的代码会生效&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(&amp;#123;&amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  writable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// target.foo 为只读属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(target, &amp;#123; bar: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;, &amp;#123; foo2: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, foo: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, foo3: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;, &amp;#123; baz: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 会抛出异常：TypeError: &quot;foo&quot; is read-only，但是之前的赋值操作已经生效。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(target.bar);  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(target.foo2); &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(target.foo);  &lt;span class=&quot;comment&quot;&gt;// 1, 异常就是在这儿发生的，所以还是1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(target.foo3); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(target.baz);  &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;pollyfill&quot;&gt;&lt;a href=&quot;#pollyfill&quot; class=&quot;headerlink&quot; title=&quot;pollyfill&quot;&gt;&lt;/a&gt;pollyfill&lt;/h1&gt;&lt;p&gt;上面是对&lt;code&gt;Object.assign()&lt;/code&gt;概念层面的探索，由于要考虑旧版本浏览器兼容性问题，需要写一个&lt;strong&gt;pollyfill&lt;/strong&gt;，其实这才是重头戏。不过，只有理解了&lt;code&gt;Object.assign()&lt;/code&gt;都干了些什么，才有可能写出来：&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign != &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;target&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//第一个传参不能是undefined和null，因为它们不能被转为对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; || target === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Can not convert undefined or null to object&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//使用Object对象化target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idx = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,l=&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length; index &amp;lt; l; idx++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//后续传参也需要判断undefined和null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (source !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; source !== &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; source) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(source, key)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                output[key] = source[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h1&gt;&lt;p&gt;好了，现在可以在宿主环境大胆使用&lt;code&gt;Object.assign()&lt;/code&gt;了，Let’s rock it~~~&lt;/p&gt;&lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN:Object.assign()&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;obj.jpg&quot; alt=&quot;extend obj&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;最近在重构以前写过的&lt;strong&gt;javascrip
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://zerosoul.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://zerosoul.github.io/tags/ES6/"/>
    
      <category term="jquery" scheme="http://zerosoul.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>读《人类简史》</title>
    <link href="http://zerosoul.github.io/2016/03/19/from-animal-to-god/"/>
    <id>http://zerosoul.github.io/2016/03/19/from-animal-to-god/</id>
    <published>2016-03-19T00:43:27.000Z</published>
    <updated>2016-04-24T08:28:50.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;renleijianshi.jpg&quot; alt=&quot;人类简史&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;从认知革命、农业革命到科学革命，我们真的了解自己吗？&lt;/li&gt;&lt;li&gt;我们过得更加快乐吗？&lt;/li&gt;&lt;li&gt;我们知道金钱和宗教从何而来，为何产生吗？&lt;/li&gt;&lt;li&gt;人类创建的帝国为何一个接一个衰亡又兴起？&lt;/li&gt;&lt;li&gt;为什么地球上几乎每一个社会都有男尊女卑的观念？&lt;/li&gt;&lt;li&gt;为何一神教成为最为广泛接受的宗教？&lt;/li&gt;&lt;li&gt;科学和资本主义如何成为现代社会最重要的信条？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果说有这么一本书，能对上面的疑问进行探索与解答，并且做到让人折服，那么&lt;strong&gt;《人类简史》&lt;/strong&gt;做到了。更重要的是，这本书竟然不到五百页，没有一堆令人晕头转向的年份、人名、地名、编号。看完这本书，有一种跟着人类一同走过十万年的感觉，见微知著、以小写大，重新审视自己。&lt;/p&gt;&lt;p&gt;就个人的切身感受来说，该书是不支持如饥似渴的阅读模式的，即便是笔者写的饶有趣味，但是以其深刻的内容，也使得读时必须要边看边想的琢磨，和消遣时看的小说不同，看这样的理论性书籍不只是要过脑子的，甚至还是需要动脑子的。本以为400多页的书，一天一小时的阅读时间，看个40页左右，怎么的10天下来也够看完的了，虽然很不好意思，到现在为止也没能完全消化，只能先写个一部分：认知革命。&lt;/p&gt;&lt;h1 id=&quot;认知革命&quot;&gt;&lt;a href=&quot;#认知革命&quot; class=&quot;headerlink&quot; title=&quot;认知革命&quot;&gt;&lt;/a&gt;认知革命&lt;/h1&gt;&lt;p&gt;相对于后面章节所讲的&lt;strong&gt;农业革命、人类的融合与统一、科学革命&lt;/strong&gt;，开篇所讲的认知革命给我带来了更多的启发与触动。因为自己这方面的知识十分匮乏，所以今天重点梳理下我对这本书认知革命章节的理解。&lt;/p&gt;&lt;h2 id=&quot;我的理解&quot;&gt;&lt;a href=&quot;#我的理解&quot; class=&quot;headerlink&quot; title=&quot;我的理解&quot;&gt;&lt;/a&gt;我的理解&lt;/h2&gt;&lt;p&gt;大约在250万年前，人类从东非开始演化，逐渐向世界各地扩散，受地域气候自然条件等等外界因素的影响，人类进化出了许多品种，就像猫有加菲猫，波斯猫一样，人也有各式各样的类型：有的人种高大，像巨人一样适合在寒冷的气候生活；有的特别矮，适合在洞穴群居；有的动作敏捷，反应迅速，适合在草原捕猎；有的性格温和，靠采集为生。但当时的人类有个共同点：全都还不会说话，也不会大规模合作，和猿类一样，三五成群地生活在地球上，和其他动物没有本质的区别。&lt;/p&gt;&lt;p&gt;大约在7万年前，有个母猿产下了两个女儿，一头变成了黑猩猩的祖先，演化出了猩猩分支，另一头也就演化成了现代人类的雏形，也就是智人分支。为啥称之为&lt;strong&gt;智人&lt;/strong&gt;？因为智人有个特点，就是其大脑在不断进化，从最初600cm³的脑容量扩容到了现在1400cm³，而猩猩这个分支走的则是肌肉进化的路线。现在看来，肯定是发展智力有好处，利用知识来武装自己，比如制造出枪炮攻击与自卫，黑猩猩根本不是对手。可是在进化的初期，智人并没有任何优势可言。这个发展路线让智人的头越来越大，更不能生育，为了这一点，智人必须早产，以至于生下的婴儿没有任何生存能力，必须在外面成长几年才能有基本的活动能力。祸不单行，大脑还要抢走智人身体大部分能量，进而造成肌肉退化，运动能力减弱。&lt;/p&gt;&lt;p&gt;虽然黑猩猩要讲道理绝对讲不过智人，但它却能直接把智人像布娃娃一样扯个稀烂。在演化的游戏里，智人一开始便选择了困难模式。开始的时候，智人活得并不舒坦，处于食物链的中间，根本捕不到猎物。想吃肉了，就只能等老虎狮子捕食完，再等鬣狗把剩下的肉抹干净，走后才敢靠近猎物，用石头砸开骨头吃点骨髓。而平时智人的食物基本就是昆虫、野菜，处于饿不死的状态，整天还要担惊受怕，被其他动物欺负得死去活来的。终于有一天，智人偶然间发现了火的威力，这一发现让其咸鱼翻身，直接从食物链中间越到顶端。智人可以看心情选择时间地点放一把火，不但会出现一片平地，还能顺便烤熟一堆动物，这个能力瞬间又把其他动物欺负得不要不要的。火可以把食物烤熟，大大缩短了智人消化时间：黑猩猩吃一块生肉要消化5小时，智人吃熟肉1小时搞定。进食变快了，消化也快了，这种变化让肠道也开始缩短，节省了更多的能量来发展大脑，为变得越来越聪明打下了坚实基础。&lt;/p&gt;&lt;p&gt;然而，智人变得越来越聪明的同时，并没有变得越来越善良。他们在地球上四处乱逛，每到一个地方就开始大屠杀，进行种族清洗，比如马达加斯加这个岛屿上的大型动物就是因为智人的活动全部消失，澳大利亚的巨型动物的命运也是如此，所到之处，寸草不生。当然，即使学会了用火，能做出种族清洗这样的事情，也不是一件容易的事。除此之外，智人的大脑也进化出了语言能力，发明了一种比其他物种都复杂的交流方式，这个被称为&lt;strong&gt;认知革命&lt;/strong&gt;。其实其他动物也可以交流，比如汪星人和喵星人，猩猩也会向同伴通风报信，但智人的语言复杂系数更高。比如在河边遇到一只狮子，猩猩只会简单地对同伴说河边有只狮子，而智人会对同伴进行描述，长得什么样，待会咱抄后路放把火把狮子吓走，然后把羚羊偷走。语言还有个好处就是可以用来八卦，比如智人吃饱后，小伙伴之间就开始相互说坏话，谁谁谁不靠谱上次捕猎临阵脱逃，谁谁谁勾搭别人老婆，然后就会产生群体内的舆论趋势，分辨出谁不靠谱，然后将其赶出队伍，慢慢的，智人形成了三观一致的相对稳定群体。&lt;/p&gt;&lt;p&gt;语言更大的好处是可以用它讲故事，虚构一些根本不存在的事物，把小伙伴们说信服了，然后跟着一块想象。这个能力可就牛X了，比如动物看见狮子本能反应只会跑，但智人当中会讲故事的人就会告诉小伙伴不要怕，狮子其实是我们的保护神，然后智人一下子对狮子的恐惧转变成了崇拜。后来又有人说，狮子保护神告诉我，隔壁部落有一群坏人，捕杀了我们好多食物，害的我们都没有饭吃，也没办法养育下一代。语言虚构的故事开始有了实质性的影响：智人组团去灭团。但是打仗和旅游可不一样，有可能就是有去无回。小伙伴们开始有点顾虑，万一灭团不成反被灭怎么办？这个时候又有人开始编故事了，说不用担心，狮子神已经都安排好了，死了之后就可以去它那里，从此过上丰衣足食的小康生活。小伙伴们一想：打一仗活下来可以分享战利品，死了也可以去神明那里过好日子，稳赚！于是就兴高采烈，屁颠屁颠地去打架了。语言的发明让社群有了组织协作能力，而且虚构故事的能力又极其灵活，可以组织大量陌生人产生大规模的协作，而此时其他物种还只会简单沟通，当遇到智人这群又团结又不怕死的家伙，自然逃脱不掉挨宰的命运。整个动物界从古至今，最重要也最具破坏性的力量，就是这群四处游荡、讲着故事的智人。&lt;/p&gt;&lt;p&gt;故事讲得多了，便形成了文化，文化团结了更多的智人生活在一起，部落变成了城市，城市组成了国家。可以说语言和文化是认知革命最重要的成就，自此之后，智人就能依据不断变化的需求迅速调整行为。这等于开启了一条采用“文化演化”的快速通道，而不再停留在“基因演化”这条总是堵车的道路上…&lt;/p&gt;&lt;h1 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h1&gt;&lt;p&gt;相对于学生时代学的历史，没有金戈铁马、成王败寇、没有歌功颂德。只是把一些看起来影响了进程的节点展示在你面前。让你开启上帝视角穿越到几万年前，虽然凡人在某些节点也许会想到换一个岔路会怎样？但是也只能看不能碰，即使未来也是：他要疯狂就疯狂，他想灭亡就灭亡，他要善良就善良。&lt;/p&gt;&lt;p&gt;看，上帝原来是个自由主义者。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;renleijianshi.jpg&quot; alt=&quot;人类简史&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;从认知革命、农业革命到科学革命，我们
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人类简史" scheme="http://zerosoul.github.io/tags/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>读《清醒思考的艺术》</title>
    <link href="http://zerosoul.github.io/2016/03/12/think-again/"/>
    <id>http://zerosoul.github.io/2016/03/12/think-again/</id>
    <published>2016-03-12T00:17:59.000Z</published>
    <updated>2016-04-24T08:29:11.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;whereareyou.jpg&quot; alt=&quot;think clearly&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在群体里容易按照他人的想法生活，在孤独中容易按照自己的想法生活。但值得记住的只是那些在群体中保持独立的人。by 爱默生&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;人类一思考，上帝就发笑。&lt;/strong&gt;我一直怀疑这句话存在断章取义，&lt;strong&gt;人类不思考，上帝就绝望&lt;/strong&gt;是不是后一句？最近读到的一本书，肯定了自己的想法：《清醒思考的艺术》。&lt;/p&gt;&lt;p&gt;书的篇幅不长，阅读起来就像是看情景剧，每天两三集，有时上下班途中想想每个小故事对“思考”带来的启发，也是件可笑和沮丧的事。可笑在于我竟然在&lt;strong&gt;思考思考&lt;/strong&gt;，沮丧在于这样做除了&lt;strong&gt;意识到自己一直在犯蠢&lt;/strong&gt;之外，似乎没有任何积极的作用。&lt;/p&gt;&lt;p&gt;总得做点什么，于是我想到了一种笨办法：罗列书中所讲的思维偏误，尽可能用自己的话再解释一遍。咀嚼一遍，权当备忘。&lt;/p&gt;&lt;h1 id=&quot;思维偏误&quot;&gt;&lt;a href=&quot;#思维偏误&quot; class=&quot;headerlink&quot; title=&quot;思维偏误&quot;&gt;&lt;/a&gt;思维偏误&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;幸存偏误&lt;/strong&gt;&lt;br&gt;日常生活中，尤其各种媒体信息，更容易看到成功，看不到失败，这样会系统性地高估成功的希望。所以尽可能常去关注并了解下失败的案例，虽然伤感，但还是有好处的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;游泳选手身材错觉&lt;/strong&gt;&lt;br&gt;游泳健将身材匀称、优美，并不是因为锻炼充分，实际情况正好相反：之所以成为游泳选手，是因为拥有这样的好身材。身躯是选择标准，而非运动的结果。所以在跨入游泳池之前，先照照镜子，诚实地对待自己。我们经常看到的由美女代言的化妆品广告，美丽是一种选择标准，而不是结果。所以在入手一份化妆品之前，想一想，是不是一瓶大宝就能解决问题？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;从众心理&lt;/strong&gt;&lt;br&gt;凭什么一种产品“销量最高”就应该更好呢？英国作家毛姆说过：就算有5000万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;纠缠于沉默成本&lt;/strong&gt;&lt;br&gt;有许多好理由支持你继续花费精力，但如果你只是因为舍不得已经投入的精力而决定继续下去，就不是一个好理由了。理性的决定意味着忽视已经投入的成本，唯一重要的是现在的形势以及你对未来的评估。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;确认偏误&lt;/strong&gt;&lt;br&gt;事实不会因为被忽视、被歪曲而消失。请写下你的信条–有关世界观、投资、婚姻、健康、成功等等，寻找反驳的证据。干掉自己最心爱的理论，这是一桩艰苦的工作。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;权威偏误&lt;/strong&gt;&lt;br&gt;出错是人类的通病，权威也不例外。但我们面对权威，常常会将独立思考调低一级。对权威的批判性越强，就越自由，就越相信自己有更多的能力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;现成偏误&lt;/strong&gt;&lt;br&gt;我们依据现成的例子来想象世界，但外界现实中的某种东西不会因为我们更容易想到而出现得更频繁。我们的大脑是剧本式思维，而不是量化思维，喜欢新奇，华丽，壮观，吸引眼球的一切。所以，学点概率与统计吧，用数字做决策虽然有时候也会产生非预期的结果，但总比拍屁股决定靠谱多了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;故事偏误&lt;/strong&gt;&lt;br&gt;瑞士作家马克斯.弗里施说过：我们尝试编故事，就像人们喜欢试穿衣服。用故事扭曲和简化现实，它们排斥掉不合适编进故事的一切。意义只是我们事后虚构的。经常对自己做这样的训练：将故事拆解开来，故事背后想隐藏什么？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;司机的知识&lt;/strong&gt;&lt;br&gt;“司机”寓指那些装得好像自己知道的人。它们会模仿别人表演，也可能拥有动听的声音或具有说服力的形象，但传播出的知识是空洞的，只是在高谈阔论挥霍着华丽词汇。真正有知识的人知道他们知道什么，也知道不知道什么。这类人一旦来到了“能力范围”之外，要么什么也不说，要不就说“我不知道”。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;控制错觉&lt;/strong&gt;&lt;br&gt;相信我们能够控制或影响某种我们客观上无法控制或影响的东西的倾向，就是控制错觉。所以，将有限的注意力集中于真正能影响的少量东西，其他的听之任之，不失为一种聪明之举。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;回归均值&lt;/strong&gt;&lt;br&gt;事情不会永远的好下去，也不会永远的坏下去。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;结果偏误&lt;/strong&gt;&lt;br&gt;结果差并不一定意味着当时所作的决定不对，反之亦然。分析过程，而非结果。这个决定是出于理性而做出的吗？如果是，那下回最好仍然这样做，哪怕上回的结果很糟糕。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择悖论&lt;/strong&gt;&lt;br&gt;过多的选择会降低生活质量。所以在存在好几个选项面前，仔细考虑你想要什么，写下你的标准，并务必遵守它，适合才是最好的。选择伴侣，亦是如此。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;团体迷思&lt;/strong&gt;&lt;br&gt;一群智慧的人做出愚蠢的决定，因为每个人都误以为自己的意见是正确的共识。所以，如果你是智囊团成员，无论何时，都要讲出你的看法–哪怕这看法不是很中听。如果你领导着一支团队，请指定某人唱反调，他将不是团队最受欢迎的人，但也许是最重要的人。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;忽视概率偏误&lt;/strong&gt;&lt;br&gt;我们对一件事的预期强度做出反应，而不是对它的概率，换个说法就是，我们缺少概率的直觉理解。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;稀少性谬误&lt;/strong&gt;&lt;br&gt;典型反应便是丧失清晰思考的能力，我们的一个物品被人夺走了，就会认为失去的物品更有价值，更有魅力。因此请你仅按照价格和作用判断一样东西，不要在乎它是否稀少，某个名人是否代言或用过。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;赌徒谬误&lt;/strong&gt;&lt;br&gt;人们相信命运具有一种平衡力量，但独立事件不存在平衡的力量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;锚定效应&lt;/strong&gt;&lt;br&gt;谈判之前，先下定一个锚，从那里开始，结果往往不会偏离太远。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;规避损失&lt;/strong&gt;&lt;br&gt;恶比善更有影响力。我们对不利东西的反应要比对有利东西的反应更为敏感。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;社会性懈怠&lt;/strong&gt;&lt;br&gt;一同拉一根绳子的人越多，个人的贡献就越低。责任扩散，风险分摊。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;指数增长&lt;/strong&gt;&lt;br&gt;石器时代几乎没有人遇到过指数增长的例子，但今天不同。所以有关增长率时，不要相信你的感觉，计算器更有助于做出决策。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;错误的因果关系&lt;/strong&gt;&lt;br&gt;相互关系不等于因果关系。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;光环效应&lt;/strong&gt;&lt;br&gt;我们让某一个方面照花了眼睛，并由此推及全貌。所以为了接近真实，请排除醒目的特征，这样挖掘出来的东西并不总是漂亮的，但有时很有教益。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;行动偏误&lt;/strong&gt;&lt;br&gt;在过去，闪电式反应关乎生死存亡，思考则可能会致命。但我们今天的世界与过去不同，与行动相比，今天的世界奖励深刻的思考。这一转变让我们很难适应。所以，如果情况不明，请不要采取任何行动，直到能更好地分析形势。总之，克制自己，很有可能会带来额外的奖励。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;不作为偏误&lt;/strong&gt;&lt;br&gt;如果你不是答案的一部分，那就是问题的一部分。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;享乐适应症&lt;/strong&gt;&lt;br&gt;事业上迈进了一步的人在平均3个月后的幸福感又与先前一样了。我们工作，升迁，给自己购买更多更漂亮的东西，但我们不会变的更幸福。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;新手的运气&lt;/strong&gt;&lt;br&gt;假如开始时一切顺利，务必多加小心。请像一位科学家那样，武装自己，以防自欺欺人。测试你的看法，试着证明它们是错误的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;双曲贴现&lt;/strong&gt;&lt;br&gt;一个决定离现在越近，我们的“情感利息”就越多，是否拥有延迟满足的能力是后来事业是否成功的一个可靠指示器。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;读后感&quot;&gt;&lt;a href=&quot;#读后感&quot; class=&quot;headerlink&quot; title=&quot;读后感&quot;&gt;&lt;/a&gt;读后感&lt;/h1&gt;&lt;p&gt;现实生活中，许多决定都是本能做出的，事后再虚构选择的理由，它让我们感觉自己是清醒地做出了决定。这种思维方式更像律师，精通于为一个已经确定的推论虚构出可能性最大的理由。&lt;/p&gt;&lt;p&gt;因此，思考本身是不纯粹的，是永远会犯错误的，所有人都一样，就连高智商的人也会再三触犯常见的思维偏误。但我们依然需要锻炼自己的思考，尽可能规避本能反应，因为今天的世界奖励深刻思考和自由行动。&lt;/p&gt;&lt;p&gt;清醒思考是奢侈的，回避思维偏误是很麻烦的，所以如果可能的损害较小，就无需绞尽脑汁，要允许错误的发生，这样才会活的更轻松。只要有一定把握应付生活，只要在关键时刻小心留神，决定是否完美，并不需要太在意。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;whereareyou.jpg&quot; alt=&quot;think clearly&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在群体里容易按照他人的想法生活，在孤独中容易按照自己的想法生活。但值得记住的只是那些在群体中保持独立的人。by 爱默生&lt;/p&gt;&lt;/blockq
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="清醒思考的艺术" scheme="http://zerosoul.github.io/tags/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
      <category term="思维错误" scheme="http://zerosoul.github.io/tags/%E6%80%9D%E7%BB%B4%E9%94%99%E8%AF%AF/"/>
    
      <category term="认知偏差" scheme="http://zerosoul.github.io/tags/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/"/>
    
      <category term="社科" scheme="http://zerosoul.github.io/tags/%E7%A4%BE%E7%A7%91/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题的思考</title>
    <link href="http://zerosoul.github.io/2016/03/06/how-to-interview/"/>
    <id>http://zerosoul.github.io/2016/03/06/how-to-interview/</id>
    <published>2016-03-06T02:43:44.000Z</published>
    <updated>2016-05-24T08:12:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;areyouok.png&quot; alt=&quot;are you ready&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近公司在招前端，一件说大不大，说小不小的事情。第一次当起了面试官，不敢掉以轻心，准备工作要做足，毕竟要招进来的人是经常朝夕相处的同事，靠谱些为好。经过几天的实践与反思，总结了一套适合自己的面试问题，希望对一些人有所启发。每个题目都没有标准答案，注重的是答题的思路以及对问题本身的拓展，有些给出了&lt;strong&gt;参考链接&lt;/strong&gt;，都是我曾经读过的文章，恩，如果英语不过关，祝好运。&lt;/p&gt;&lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&quot;预热&quot;&gt;&lt;a href=&quot;#预热&quot; class=&quot;headerlink&quot; title=&quot;预热&quot;&gt;&lt;/a&gt;预热&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;昨天或者最近这一周，学了些什么？&lt;/strong&gt;&lt;br&gt;前端这个工种是依托互联网的繁荣快速发展起来的，因而也就促使着前端不断革新技术来满足日新月异的互联网。学习不是为了跟风，什么新学什么，而是为了完善和更新自己的技能树，保持核心竞争力。如果能从这个问题的回答看出你有阅读，学习，实践的习惯，那就更好了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;如果今年想掌握一门新技术，会是什么？为什么选择它？&lt;/strong&gt;&lt;br&gt;如果说上面那个问题是战术问题，那么这个应该就是战略问题。无论想横向发展还是纵向发展，都逃不脱一个&lt;strong&gt;成长&lt;/strong&gt;的话题，透过这个问题，可以了解下应聘者的技术视野，同时也是其成长的方向与潜力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;最近有没有遇到些问题？你是如何解决的？&lt;/strong&gt;&lt;br&gt;这个问题比较开放，即使遇到的不是技术问题，也可以回答，比如，遇到的问题是马桶堵了，也可以说出来。主要是了解下应聘者解决问题的思路。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;谈谈你的开发流程与环境&lt;/strong&gt;&lt;br&gt;有多热爱开发，就得有多热心于开发环境的打磨，因为上班的绝大部分时间都是沉浸在这个环境下，舒适度很重要。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;有没有在线的得意之作，为了完成这个作品，用到了哪些工具，你贡献了哪些功能或者想法，能谈谈吗？&lt;/strong&gt;&lt;br&gt;有些前端业余会做一些小项目，实践新知的同时涨涨姿势。这些小作品往往能给面试锦上添花。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;有写博客吗？&lt;/strong&gt;&lt;br&gt;写博客是一种输出，也是一种沉淀，即便不怎么写技术类文章，能坚持写的，是靠谱特征之一。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;HTML是骨架，是基础。语义化标签，SEO，兼容性，加载和渲染顺序与性能等等，在写HTML代码时都需要考虑进来。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;大概写一下你常用的HTML骨架（PC&amp;amp;Mobile）&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quirks Mode（怪异模式）和Standards Mode（标准模式）的异同点&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;什么是Flash of Unstyled Content（FOUC），如何避免？&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.techrepublic.com/blog/web-designer/how-to-prevent-flash-of-unstyled-content-on-your-websites/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;尽可能多地列举出HTML5新标签&lt;/strong&gt;&lt;br&gt;基础问题，如果不能列举出三个以上，下面那个问题也没必要问了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTML5的新特性里面，你最喜欢哪个？为什么？&lt;/strong&gt;&lt;br&gt;开放性问题，目的在于了解对HTML5的认知与实践。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;cookie,localStorage和sessionStorage 异同点&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;解释下CORS，怎样使用&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;script标签 &lt;code&gt;async&lt;/code&gt; 与&lt;code&gt;defer&lt;/code&gt;两个特性的异同点&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS放在head标签头部，js放在body标签底部，有啥优点？可不可以不这样？&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/a/25275805&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;event.PreventDefault&lt;/code&gt;，&lt;code&gt;event.stopPropagation&lt;/code&gt;与&lt;code&gt;return false&lt;/code&gt;异同点&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;p&gt;CSS是我的薄弱项，只考察基础，但是有这些基础我认为也就够了。任重道远，共勉。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;尽可能多地列举display属性值，追问：&lt;code&gt;inline&lt;/code&gt;和&lt;code&gt;inline-block&lt;/code&gt;的区别&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;尽可能多地列举position属性值，追问：&lt;code&gt;absolute&lt;/code&gt;是怎么工作的&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;为什么会产生浮动，清除浮动的技巧&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;描述下你对盒模型的理解，通过CSS怎么告知浏览器使用不同的盒模型&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;解释下Block Formatting Content (BFC)，它是如何工作的&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用过哪些CSS框架？有没有试过更改或者改进它们？&lt;/strong&gt;&lt;br&gt;开放性问题，目测一般会回答Bootstrap。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;p&gt;公司项目中写交互的场景比较多，所以这一块是重点考察的，虽然平时都使用jQuery，但有javascript的基础更为重要。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;===&lt;/code&gt;与&lt;code&gt;==&lt;/code&gt;异同点&lt;/strong&gt;&lt;br&gt;基础问题，这个如果表现出不知所措，就没必要往下进行了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;实现下面的函数&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;duplicate([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//[1,2,3,1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;描述下document.write()使用场景&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;onload&lt;/code&gt;和 &lt;code&gt;$(document).ready&lt;/code&gt;的区别&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3698200/window-onload-vs-document-ready&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;immediately-invoked function expression（IIFE）的工作原理&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;谈一下你对javascript中&lt;code&gt;this&lt;/code&gt;的理解&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;事件代理(Event Delegation)&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://davidwalsh.name/event-delegate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;闭包是什么？举例它在实际工作的应用&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;说出下面代码Person函数使用的区别&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1=Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;的异同点&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;你是如何理解&lt;strong&gt;hoisting&lt;/strong&gt;的&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;尽可能详细地解释下AJAX，请写出创建并发送一个AJAX请求的过程。&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;解释下JSONP，为什么说它不是真正的AJAX?&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7115940/difference-between-ajax-restful-rest-json-and-jsonp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;当写&lt;code&gt;onscroll&lt;/code&gt;事件的回调函数时，你能想到的最佳实践是什么？&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://dannyvankooten.com/delay-scroll-handlers-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h2&gt;&lt;p&gt;公司项目中，用到了jQuery，所以有必要考察一下这方面的基础，其实如果前面问题回答的足够出色，这一块可以忽略，因为相信有了前面的基础，jQuery上手会很快。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;jQuery是个框架还是类库，为什么使用？&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;如何使用jQuery获取元素的属性&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;如何使用jQuery同时选取多个元素&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;单击下面P标签，其背景色变为黑色，再单击回复原来颜色，使用jQuery实现&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test_tag&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;点我变色，再点我恢复&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;大概写出jQuery下AJAX使用场景&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;为什么说在多个域名下存放静态资源会好一些？&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;浏览器地址栏输入URL敲回车那一刻起到页面完全呈现出，尽可能详细描述出中间发生了什么。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;长轮询，Websocket，SSE&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP Method 有哪些，尽可能多地列举&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h1&gt;&lt;p&gt;以上是我经过思考与总结的一套前端技术面试题，大部分都能在网上找到答案。当然，面试时不会都问到，随机选七八个问题就差不多了。前端远不止这些，有很多比较成熟的技术并没有提及，比如NODE.js，比如Angular.js，再比如React.js，但招聘的目的不是为了炫技，更不是要故意为难应聘者，而是筛选出适合公司发展的人员。可以参考，但不要照搬，靠谱与否，自己衡量。&lt;/p&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Front-end Job Interview Questions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;areyouok.png&quot; alt=&quot;are you ready&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近公司在招前端，一件说大不大，说小不
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://zerosoul.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://zerosoul.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="面试题" scheme="http://zerosoul.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>再读雅虎14条军规</title>
    <link href="http://zerosoul.github.io/2016/01/30/high-performance-web-sites-note/"/>
    <id>http://zerosoul.github.io/2016/01/30/high-performance-web-sites-note/</id>
    <published>2016-01-30T04:10:05.000Z</published>
    <updated>2016-01-30T04:55:35.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章是&lt;a href=&quot;http://book.douban.com/subject/3132277/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《高性能网站建设指南——前端工程师技能精髓》&lt;/a&gt;的读书笔记，即，&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;雅虎14条军规&lt;/a&gt;扩展版。个人认为书名副标题取名并不精确，&lt;strong&gt;前端工程师优化技能精髓&lt;/strong&gt;似乎更适合，本文粗线条地记录了我觉得应该记录下来的知识点。个人备忘录，不具备连贯性，看不懂就对了。&lt;/p&gt;&lt;h1 id=&quot;通识&quot;&gt;&lt;a href=&quot;#通识&quot; class=&quot;headerlink&quot; title=&quot;通识&quot;&gt;&lt;/a&gt;通识&lt;/h1&gt;&lt;h2 id=&quot;性能黄金法则&quot;&gt;&lt;a href=&quot;#性能黄金法则&quot; class=&quot;headerlink&quot; title=&quot;性能黄金法则&quot;&gt;&lt;/a&gt;性能黄金法则&lt;/h2&gt;&lt;p&gt;最终用户只有10%~20%的响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的所有组件上。&lt;br&gt;&lt;strong&gt;注：该统计出于大概十年前，现在比例应该有所变化，但还是有很大的优化空间&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;HTTP备忘点&quot;&gt;&lt;a href=&quot;#HTTP备忘点&quot; class=&quot;headerlink&quot; title=&quot;HTTP备忘点&quot;&gt;&lt;/a&gt;HTTP备忘点&lt;/h2&gt;&lt;h3 id=&quot;压缩&quot;&gt;&lt;a href=&quot;#压缩&quot; class=&quot;headerlink&quot; title=&quot;压缩&quot;&gt;&lt;/a&gt;压缩&lt;/h3&gt;&lt;p&gt;Request：&lt;code&gt;Accept-Encoding: gzip,deflate&lt;/code&gt;&lt;br&gt;Response:&lt;code&gt;Content-Encoding: gzip&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;条件Get请求&quot;&gt;&lt;a href=&quot;#条件Get请求&quot; class=&quot;headerlink&quot; title=&quot;条件Get请求&quot;&gt;&lt;/a&gt;条件Get请求&lt;/h3&gt;&lt;p&gt;Request:&lt;code&gt;If-Modified-Since: Wed, 22 Feb 2016 09:23:44 GMT&lt;/code&gt;&lt;br&gt;Response:&lt;code&gt;Last-Modified: Wed, 22 Feb 2016 09:23:44 GMT&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h3&gt;&lt;p&gt;Response:&lt;code&gt;Expires: Wed, 22 Feb 2016 09:23:44 GMT&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;Keep-Alive&quot;&gt;&lt;a href=&quot;#Keep-Alive&quot; class=&quot;headerlink&quot; title=&quot;Keep-Alive&quot;&gt;&lt;/a&gt;Keep-Alive&lt;/h3&gt;&lt;p&gt;Request:&lt;code&gt;Connection: keep-alive&lt;/code&gt;&lt;br&gt;Response:&lt;code&gt;Connection: keep-alive&lt;/code&gt;&lt;/p&gt;&lt;h1 id=&quot;14军规&quot;&gt;&lt;a href=&quot;#14军规&quot; class=&quot;headerlink&quot; title=&quot;14军规&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;14军规&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;减少HTTP请求-Make-Fewer-HTTP-Request&quot;&gt;&lt;a href=&quot;#减少HTTP请求-Make-Fewer-HTTP-Request&quot; class=&quot;headerlink&quot; title=&quot;减少HTTP请求 Make Fewer HTTP Request&quot;&gt;&lt;/a&gt;减少HTTP请求 &lt;em&gt;Make Fewer HTTP Request&lt;/em&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;图片地图&lt;/li&gt;&lt;li&gt;CSS Sprites&lt;br&gt;很多人认为合并后的图片会比分离的图片综合要大，因为合并后包含附加的空白区域。实际上恰恰相反，因为它降低了图片自身的开销（颜色表，格式信息，等等）&lt;/li&gt;&lt;li&gt;内联图片&lt;br&gt;&lt;code&gt;data:[&amp;lt;mediatype&amp;gt;][;base64],&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;合并脚本和样式表&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;使用内容发布网络（CDN）&quot;&gt;&lt;a href=&quot;#使用内容发布网络（CDN）&quot; class=&quot;headerlink&quot; title=&quot;使用内容发布网络（CDN）&quot;&gt;&lt;/a&gt;使用内容发布网络（CDN）&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;缺点：修改HTTP响应头必须通过第三方完成。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;添加Expires头&quot;&gt;&lt;a href=&quot;#添加Expires头&quot; class=&quot;headerlink&quot; title=&quot;添加Expires头&quot;&gt;&lt;/a&gt;添加Expires头&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;可以同时制定两个响应头：Expires和Cache-Control的max-age。如果两者同时出现，HTTP规范规定max-age指令将重写Expires头，例如：&lt;br&gt;&lt;code&gt;Expires: Mon,15 Apr 2024 20:00:00 GMT&lt;/code&gt;&lt;br&gt;&lt;code&gt;Cache-Control: max-age=312&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;开启Gzip压缩&quot;&gt;&lt;a href=&quot;#开启Gzip压缩&quot; class=&quot;headerlink&quot; title=&quot;开启Gzip压缩&quot;&gt;&lt;/a&gt;开启Gzip压缩&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;注意点：代理缓存&lt;/li&gt;&lt;li&gt;在Web服务器相应中添加&lt;code&gt;Vary&lt;/code&gt;头，这样就可以告诉代理根据一个或多个请求头来改变缓存的响应。&lt;br&gt;&lt;code&gt;Vary: Accept-Encoding&lt;/code&gt;&lt;br&gt;代理缓存响应的多个版本，当有gzip头的请求时，响应压缩过的，反之是未经压缩的。&lt;/li&gt;&lt;li&gt;禁用缓存：&lt;code&gt;Vary: *&lt;/code&gt;或&lt;code&gt;Cache-Control: private&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;将样式表放在顶部&quot;&gt;&lt;a href=&quot;#将样式表放在顶部&quot; class=&quot;headerlink&quot; title=&quot;将样式表放在顶部&quot;&gt;&lt;/a&gt;将样式表放在顶部&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;样式表放在底部对加载页面所需的实际时间并没有太大影响，但会导致浏览器阻止内容逐步呈现，这让用户感性上觉得页面加载更慢。&lt;/li&gt;&lt;li&gt;无样式内容的闪烁FOUC（Flash of Unstyled Content）是浏览器行为，在样式表正确地下载并解析后，已经呈现的文字和图片要用新的样式重绘了。浏览器可以延迟呈现，知道所有样式表下载完毕，这导致了白屏，反之可以逐步呈现，但要承担闪烁的风险，这里没有完美的选择。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;将脚本放在底部&quot;&gt;&lt;a href=&quot;#将脚本放在底部&quot; class=&quot;headerlink&quot; title=&quot;将脚本放在底部&quot;&gt;&lt;/a&gt;将脚本放在底部&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;放在顶部的影响：&lt;ul&gt;&lt;li&gt;会阻塞对其后面内容的呈现&lt;/li&gt;&lt;li&gt;会阻塞对其后面资源的下载&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;属性表明脚本不包含&lt;code&gt;document.write&lt;/code&gt;，浏览器有这个线索可以继续呈现。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;避免CSS表达式&quot;&gt;&lt;a href=&quot;#避免CSS表达式&quot; class=&quot;headerlink&quot; title=&quot;避免CSS表达式&quot;&gt;&lt;/a&gt;避免CSS表达式&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;谁会想到用户点击了一个文本框会导致IE锁死呢。&lt;/li&gt;&lt;li&gt;避免方式：创建一次性表达式和使用事件处理器取代CSS表达式&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: expression( altBg(this));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function altBg(ele)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ele.style.backgroundColor=(new Date()).getHours()%2 ? &amp;quot;#f08&amp;quot;:&amp;quot;B98&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;使用外部javascript和css&quot;&gt;&lt;a href=&quot;#使用外部javascript和css&quot; class=&quot;headerlink&quot; title=&quot;使用外部javascript和css&quot;&gt;&lt;/a&gt;使用外部javascript和css&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;页面浏览量越少，内联论据越强势，反之外置论据越强势。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;减少DNS查找&quot;&gt;&lt;a href=&quot;#减少DNS查找&quot; class=&quot;headerlink&quot; title=&quot;减少DNS查找&quot;&gt;&lt;/a&gt;减少DNS查找&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;将静态资源放在独立域名下较好，但不要超过四个，在减少DNS查找和允许并行下载之间做出权衡。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;精简javascript和CSS&quot;&gt;&lt;a href=&quot;#精简javascript和CSS&quot; class=&quot;headerlink&quot; title=&quot;精简javascript和CSS&quot;&gt;&lt;/a&gt;精简javascript和CSS&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;gzip压缩产生的影响更大，但精简能够进一步减小文件大小。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;避免重定向&quot;&gt;&lt;a href=&quot;#避免重定向&quot; class=&quot;headerlink&quot; title=&quot;避免重定向&quot;&gt;&lt;/a&gt;避免重定向&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;当服务器向浏览器返回一个重定向时，是指一个范围在3XX的状态码，表示用户代理必须执行进一步操作才能完成请求。&lt;ul&gt;&lt;li&gt;300 Multiple Choices&lt;/li&gt;&lt;li&gt;302 Moved Permancently&lt;/li&gt;&lt;li&gt;302 Moved Temporarily&lt;/li&gt;&lt;li&gt;303 See other&lt;/li&gt;&lt;li&gt;304 Not Modified (并非重定向，用来响应条件GET请求)&lt;/li&gt;&lt;li&gt;305 Use Proxy&lt;/li&gt;&lt;li&gt;306 不再使用&lt;/li&gt;&lt;li&gt;307 Temporary Redirect&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;301&lt;/code&gt;和&lt;code&gt;302&lt;/code&gt;是使用最多的,&lt;code&gt;303&lt;/code&gt;和&lt;code&gt;307&lt;/code&gt;是HTTP 1.1添加的，用来澄清对302的使用，但现实情况是几乎没人采用。&lt;/li&gt;&lt;li&gt;还有其他方式：&lt;ul&gt;&lt;li&gt;HTML META :&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0; url=http://google.com&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;删除重复脚本&quot;&gt;&lt;a href=&quot;#删除重复脚本&quot; class=&quot;headerlink&quot; title=&quot;删除重复脚本&quot;&gt;&lt;/a&gt;删除重复脚本&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;确保脚本只被包含一次，否则会带来性能损伤。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;配置ETag&quot;&gt;&lt;a href=&quot;#配置ETag&quot; class=&quot;headerlink&quot; title=&quot;配置ETag&quot;&gt;&lt;/a&gt;配置ETag&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ETag是唯一标识一个静态资源特定版本的字符串。&lt;/li&gt;&lt;li&gt;If-None-Match比If-Modified-Since具有更高的优先级&lt;/li&gt;&lt;li&gt;ETag可能会引发性能问题，这时候完全可以移除ETag&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;使AJAX可缓存&quot;&gt;&lt;a href=&quot;#使AJAX可缓存&quot; class=&quot;headerlink&quot; title=&quot;使AJAX可缓存&quot;&gt;&lt;/a&gt;使AJAX可缓存&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;当数据被认为是私有的时候，大多会使用&lt;code&gt;Cache-Control: no-store&lt;/code&gt;。这样的响应根本不会被写入磁盘。&lt;/li&gt;&lt;li&gt;确保AJAX请求遵守性能优化原则，尤其应具有长久的Expires头&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;读后感&quot;&gt;&lt;a href=&quot;#读后感&quot; class=&quot;headerlink&quot; title=&quot;读后感&quot;&gt;&lt;/a&gt;读后感&lt;/h1&gt;&lt;p&gt;虽然知识点比较基础，但并不过时，读后我立即在自己博客上实践了下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;图片使用七牛CDN，感谢&lt;a href=&quot;https://github.com/gyk001/hexo-qiniu-sync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-qiniu-sync&lt;/a&gt;，访问速度明显加快。&lt;/li&gt;&lt;li&gt;删掉和替换掉了一些鸡肋功能，比如&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT主题&lt;/a&gt;自带的浏览图片插件，换成了自己的简洁实现。&lt;/li&gt;&lt;li&gt;本来想搞一下HTTP配置，由于本站HOST在Github上，无从下手，好在Github在HTTP优化原则上已经做得很好了，省心省力。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除了HTML/CSS/JavaScript(这三样已经够折腾的了)，一个优秀的前端工程师还应该具备什么样的技能呢？从这本书可以得到点启发：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;理解HTTP协议[&lt;a href=&quot;http://book.douban.com/subject/10746113/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTTP权威指南》&lt;/a&gt;足矣]&lt;/li&gt;&lt;li&gt;了解浏览器工作原理及不同浏览器间的差异&lt;/li&gt;&lt;li&gt;掌握服务器端编程[可以从Node入手]&lt;/li&gt;&lt;li&gt;了解网络环境配置[可以学学Nginx]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;hp.jpg&quot; alt=&quot;high performance&quot;&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章是&lt;a href=&quot;http://book.douban.com/subject/3132277/&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://zerosoul.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="最佳实践" scheme="http://zerosoul.github.io/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="优化" scheme="http://zerosoul.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>会议&amp;活动拍摄备忘录</title>
    <link href="http://zerosoul.github.io/2016/01/25/shoot-the-meeting/"/>
    <id>http://zerosoul.github.io/2016/01/25/shoot-the-meeting/</id>
    <published>2016-01-25T14:12:16.000Z</published>
    <updated>2016-01-27T13:19:38.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从有单反开始，已经多次跟拍公司活动和会议。依旧小白，经验为数不多，教训却一大堆。最近一次的年会拍摄，环境比较复杂，幸好有位经验丰富的姐姐，我与她一起工作，学了不少实战经验，这篇文章记录了我觉得应该注意的地方，以备后忘。&lt;/p&gt;&lt;h1 id=&quot;硬件准备&quot;&gt;&lt;a href=&quot;#硬件准备&quot; class=&quot;headerlink&quot; title=&quot;硬件准备&quot;&gt;&lt;/a&gt;硬件准备&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;相机：确认没故障，如果有条件，可以有个备用相机；&lt;/li&gt;&lt;li&gt;电池：最好两块以上的电池，并带好充电器，以免电池原因耽误工作。我有过两次因为相机没电不得不终止拍摄任务的时候，给人一种不专业的感觉。&lt;/li&gt;&lt;li&gt;镜头：以24-70焦段作为主要镜头。原因很简单，这个焦段广角变形不严重而且包含人像拍摄最佳的50焦段。广角镜头边缘变形很严重，谁也不想自己的面部在照片里变形，所以最好不用。如果可能，带上70-200或100-300的镜头，长焦镜头拍一些领导讲话的特写十分方便，如果可以在会场里走来走去甚至走上主席台，那这个长焦也不用带了；&lt;/li&gt;&lt;li&gt;储存卡：最好带上一个备用储存卡，尽管现在的记录介质储存容量可以达到2千张4兆图片的容量，但是仍然要带上一个备用的。这种事不怕一万，就怕万一，反正不重。&lt;/li&gt;&lt;li&gt;脚架：三脚架在这种需要不停走动的场合一般用不上，但是最好带上独脚架，有备无患，反正也不占地。如需拍摄合影，那就别怕麻烦了。&lt;/li&gt;&lt;li&gt;闪光灯：带上一只机外闪光灯和&lt;strong&gt;两套电池&lt;/strong&gt;（备用电池真的很有必要，意外总是能在你想象不到的时候发生）。一般相机自带的闪灯指数较小而且只能直闪，局限较大，容易过度曝光。&lt;/li&gt;&lt;li&gt;工具：镜头纸、小皮枪、刷子等清洁用品。&lt;/li&gt;&lt;li&gt;包：准备一个能把这些东西都放进去的摄影包。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;相机的使用&quot;&gt;&lt;a href=&quot;#相机的使用&quot; class=&quot;headerlink&quot; title=&quot;相机的使用&quot;&gt;&lt;/a&gt;相机的使用&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;iso：如果可能，在室内尽量提高iso。活动拍摄曝光速度的提高能更好的提高图片的清晰度。至于噪点，如果受众不专业，那么根本不会在乎；不过即使碰到了十分专业的看客，那也能理解你的做法。我用过三部相机，都是佳能，以我的感受，5Dmark2以上的相机，iso开到2000,70D的相机可开1000，噪点都在可以忍受的范围之内。如果是600D一类的入门相机，iso800问题也不大[我的就是600D，噗~]。&lt;/li&gt;&lt;li&gt;光圈：就算镜头很棒，也尽量不要把光圈开的很大。原因有二，首先尽量不使用镜头的光圈值两端，画质会有些轻微的影响；最重要的是大光圈（如2.8）的对焦平面很薄，如果你拍的人物前后相差10厘米，就会出现一实一虚的情况。所以最好在4.5以上。&lt;/li&gt;&lt;li&gt;闪光灯：屋顶不很高的话，最大值四米左右，采用反射闪光并利用&lt;a href=&quot;http://toutiao.com/a3676271723/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;眼神光板&lt;/a&gt;。反射闪光的好处是在提高拍摄主题亮度的同时，还可以适当提高拍摄环境的亮度，且被摄主题四周，尤其是后面，不会出现十分明显的黑影。眼神光板可以增加被摄主体的亮度，调整眼神光板的反光量可通过调整闪光灯的输出功率（使亮度更高或更低）、改变闪光灯焦段或直接使用柔光板（增加闪光角度）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在必须使用闪光灯而且需要交代环境的情况下，一般应保证快门速度最少80、光圈不低于4.5（保证足够的对焦平面）、并相应调整iso值后测出曝光准确值。在使用闪光灯后通过调整闪光灯的输出量，找出满意曝光值。这样可以更好表现被摄主体所处的环境。&lt;/p&gt;&lt;h1 id=&quot;现场拍摄&quot;&gt;&lt;a href=&quot;#现场拍摄&quot; class=&quot;headerlink&quot; title=&quot;现场拍摄&quot;&gt;&lt;/a&gt;现场拍摄&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;空镜头拍摄：到场后一定不要忘记拍摄会场以及会场各区域的空镜。包括会场（曝光要以会场主体，如舞台等数值为主）、大门口签到处、一些较大的会议活动还会在会场外布置横幅、氢气球一类的的布置，也不能忘掉，还有就是特别的细节拍摄（会场装饰物），比如：准备发奖用的奖杯、奖状特写等等。&lt;/li&gt;&lt;li&gt;主要人物会前拍摄：活动前要和承办负责人沟通，确定拍摄人物重点（包括主要领导以及受邀来宾等），并且记录主要领导或重要来宾交谈的场面，包括寒暄和互赠名片，尽量能够结合背景的陈设，交代会议场所和环境。&lt;/li&gt;&lt;li&gt;过程拍摄：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;领导讲话：如果条件允许，尽量抵近拍摄。这样可以将主席台的横幅、投影等反映会议内容的信息拍摄在画面当中。拍摄时机需要摄影者掌握，一般在讲话者抬头与参会者眼神交流活有手势时按下快门，这样可使讲话者显得更加生动。也有的领导自始至终不抬头交流，这样的拍摄一般在讲话开始时活结束时会出现抬头的机会。但是为了保险起见，低头的时候一定要拍上几张以免内容缺失。拍摄角度一般要与讲话者同高，尽量不使用仰角或俯角拍摄，并和讲话者保持45度左右的角度；&lt;/li&gt;&lt;li&gt;会场：主席台拍摄一定要有全景和单人的特写。由于主席台背景一般色调较暗，拍摄尽量使用人脸曝光值测光数据，注意不要让麦克风、水杯等挡住面部，如果有必要可以有一定的角度。另外会场内前排就坐的一般为比较重要的参会者，所以需要从左右两个方向对会场进行拍摄。最后还要对会场全景拍摄，拍摄位置一般为后场后左、中、右三个位置各拍一张，曝光值同样应该以主席台测光数值为准。&lt;/li&gt;&lt;li&gt;互动：一定要注意主要领导和重要与会者的活动并兼顾其他与会者。拍摄尽量做到人物和能够表现活动的主题的背景相结合。当参与活动的人员走动时，应尽量走到前面拍摄，而不是从后面跟随。还要提醒一下，照片的曝光时间，宁欠勿过[这点我做的很不好，往往造成了在光圈模式下照虚了的结果]。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;再说两句&quot;&gt;&lt;a href=&quot;#再说两句&quot; class=&quot;headerlink&quot; title=&quot;再说两句&quot;&gt;&lt;/a&gt;再说两句&lt;/h1&gt;&lt;p&gt;以上所讲大部分并非我的原创，有感于年会专业摄影姐姐的谆谆教导，最近这两天也看了一些相关文章，才汇集出此篇文章。会议或活动摄影类似纪实摄影，就算注意事项熟记于心，现场千奇百怪的突发现象也会让你不知所措，这时候才是真正的考验。&lt;/p&gt;&lt;p&gt;有人问过我，为毛明明可以参与热闹，却干起了累死累活的摄影记录者，最后的结果往往也是吃力不讨好。个中原因我也说不清，最初也是有私心，想借此挡酒，后来觉得这里面有学问，既然做了，就尽力做好。简言之：&lt;strong&gt;始于私心，归于热爱&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;至此，现场摄影告一段落，需要学的还有很多，不仅仅是技术，更多的是感觉。最后，附上几张我拍过的现场照：&lt;/p&gt;&lt;p&gt;注：我挑选的是&lt;strong&gt;个人认为可公开的图片&lt;/strong&gt;，所以如果有冒犯之处，请与我&lt;a href=&quot;http://zerosoul.github.io/about/#非诚勿扰&quot;&gt;联系&lt;/a&gt;，删除并道歉。&lt;/p&gt;&lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_1.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_2.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_3.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_4.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_5.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_6.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_7.jpg&quot;&gt; &lt;img src=&quot;http://7xo6wq.com1.z0.glb.clouddn.com/static/images/live_8.jpg&quot;&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从有单反开始，已经多次跟拍公司活动和会议。依旧小白，经验为数不多，教训却一大堆。最近一次的年会拍摄，环境比较复杂，幸好有位经验丰富的姐姐，我
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="摄影" scheme="http://zerosoul.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="总结" scheme="http://zerosoul.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>隐藏email地址的小技巧</title>
    <link href="http://zerosoul.github.io/2016/01/23/another-email-hiding-technique/"/>
    <id>http://zerosoul.github.io/2016/01/23/another-email-hiding-technique/</id>
    <published>2016-01-23T03:59:15.000Z</published>
    <updated>2016-01-23T04:57:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;spambot.jpg&quot; alt=&quot;spam bot&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;我们经常会受到垃圾邮件的骚扰，究其原因，其中主要就是平时email地址赤裸裸地暴露在网页中，被垃圾邮件程序（&lt;a href=&quot;https://en.wikipedia.org/wiki/Spambot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spambot&lt;/a&gt;）探测到，进而向你的邮箱发送大量的营销信息，恶心到吐。&lt;/p&gt;&lt;h1 id=&quot;怎么办&quot;&gt;&lt;a href=&quot;#怎么办&quot; class=&quot;headerlink&quot; title=&quot;怎么办&quot;&gt;&lt;/a&gt;怎么办&lt;/h1&gt;&lt;p&gt;上面提到的问题解决办法有许多，这里列举几个常用的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用图片（使用谷歌邮箱的同学应该有所体会）&lt;/li&gt;&lt;li&gt;使用javascript输出（爬虫只探测静态HTML）&lt;/li&gt;&lt;li&gt;使用AT, DOT,代替&lt;code&gt;@&lt;/code&gt;,&lt;code&gt;.&lt;/code&gt;（好像现在一些爬虫也能识别了）&lt;/li&gt;&lt;li&gt;简单加密，比如：foo@REMOVETHISbar.baz，真正的email是去掉 &lt;strong&gt;REMOVETHIS&lt;/strong&gt;之后的（也可以更形象点foo@&lt;del&gt;REMOVETHIS&lt;/del&gt;bar.baz）&lt;/li&gt;&lt;li&gt;使用CSS中的伪类&lt;code&gt;:after&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:after &amp;#123; content: &quot;foo\40bar.baz&quot;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;email me: &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* \40 是Unicode字符 &#39;@&#39;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;email me: foo@bar.baz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;使用flash&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;object type=&amp;quot;application/x-shockwave-flash&amp;quot; data=&amp;quot;media/flash/articles/email.swf&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    codebase=&amp;quot;http://fpdownload.macromedia.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /pub/shockwave/cabs/flash/swflash.cab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #version=6,0,0,0&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;param name=&amp;quot;movie&amp;quot; value=&amp;quot;media/email.swf&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/p&gt;&lt;h1 id=&quot;最优解&quot;&gt;&lt;a href=&quot;#最优解&quot; class=&quot;headerlink&quot; title=&quot;最优解&quot;&gt;&lt;/a&gt;最优解&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;世界上本来没有最优解，用的人觉得很爽，于是就有了。 —詹姆斯.杨二&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我个人比较喜欢最小化成本解决问题，所以除了上述几种方式，我更倾向于下面这种：&lt;br&gt;不知道你有没有发现，Unicode中有个和 &lt;strong&gt;@&lt;/strong&gt;符号很像的字符：&lt;code&gt;0xFF20&lt;/code&gt;，除此之外，还有个和 &lt;strong&gt;.&lt;/strong&gt;很像的字符：&lt;code&gt;0x2024&lt;/code&gt;。那么这两个Unicode字符在此处就有用武之地了。在网页里，我们可以把foo@bar.com编码为&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo&amp;amp;#xFF20;BAR&amp;amp;#X2024;com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最终显示效果：&lt;strong&gt;foo&amp;#xFF20;BAR&amp;#X2024;com&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;很强大有木有！&lt;/p&gt;&lt;p&gt;这种方式也不是完美无缺：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果流行普及了，爬虫会重新设计算法将其也计入探测范围。&lt;/li&gt;&lt;li&gt;使用复制粘贴并非预期文本&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之，没有最好，只有最合适的。&lt;/p&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.csarven.ca/hiding-email-addresses&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Methods to hide email addresses from page source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/2009/11/exploring-browser-supported-unicode-characters-and-a-tweet-shortening-experiment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exploring browser-supported Unicode characters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/2009/11/yet-another-email-hiding-technique/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yet another email hiding technique?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;spambot.jpg&quot; alt=&quot;spam bot&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;我们经常会受到垃圾邮件的骚扰，究其原因，其中主要就
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="email" scheme="http://zerosoul.github.io/tags/email/"/>
    
      <category term="技巧" scheme="http://zerosoul.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="实体字符" scheme="http://zerosoul.github.io/tags/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>老栓买药</title>
    <link href="http://zerosoul.github.io/2016/01/22/evil-with-baidu-connvince/"/>
    <id>http://zerosoul.github.io/2016/01/22/evil-with-baidu-connvince/</id>
    <published>2016-01-22T12:29:32.000Z</published>
    <updated>2016-01-22T12:30:27.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;起早&quot;&gt;&lt;a href=&quot;#起早&quot; class=&quot;headerlink&quot; title=&quot;起早&quot;&gt;&lt;/a&gt;起早&lt;/h1&gt;&lt;p&gt;深冬的后半夜，月亮下去了，太阳还没有出，只剩下一片冷蓝的天；除了夜游的东西，什么都睡着了。&lt;/p&gt;&lt;p&gt;华老栓忽然坐起，摸索下了床，找到了开关。啪！阴暗的出租屋内便弥满了青白的光。他走到窗边的桌子，滴，破旧的老电脑出现了熟悉的开机界面。&lt;/p&gt;&lt;p&gt;过了两三分钟，他熟练地点开浏览器，首页是刺眼的某度LOGO。&lt;/p&gt;&lt;p&gt;他输入了几个字，进入到某某病的贴吧，点开了一篇图文并茂的帖子，又认真读了一遍，并再三确认了帖子里的评论，拿起了纸，在上面记下了一串数字。&lt;/p&gt;&lt;p&gt;“小栓他爹，这就去么？”&lt;/p&gt;&lt;p&gt;是一个老女人的声音。里边的小黑屋里，也发出一阵咳嗽。&lt;/p&gt;&lt;p&gt;“唔。”&lt;/p&gt;&lt;p&gt;老栓一面听，一面应，一面扣上衣服；伸手过去说，“你给我罢”。&lt;/p&gt;&lt;p&gt;华大妈在枕头底下掏了半天，掏出一张银行卡，交给老栓，老栓接了，抖抖的装入衣袋，又在外面按了两下；便拿上手电筒，关掉灯，走向里屋子去了。&lt;/p&gt;&lt;p&gt;那屋子里面，悉悉窣窣，接着便是一通咳嗽。老栓候他平静下去，才低低的叫道，“小栓……你不要起来。……早饭么？你娘会安排到跟前”。&lt;/p&gt;&lt;h1 id=&quot;路上&quot;&gt;&lt;a href=&quot;#路上&quot; class=&quot;headerlink&quot; title=&quot;路上&quot;&gt;&lt;/a&gt;路上&lt;/h1&gt;&lt;p&gt;老栓听得儿子不再说话，料他安心睡了，便出了门。&lt;/p&gt;&lt;p&gt;走到街上。街上黑沉沉的一无所有，雾霾都分辨不得，只有一条灰白的路，看得分明。电筒光照着他的两脚，一前一后的走。有时也遇到几只流浪狗，可是一只也没有叫。&lt;/p&gt;&lt;p&gt;天气比屋子里冷多了；老栓倒觉爽快，仿佛一旦变了少年，得了神通，有给人生命的本领似的，跨步格外高远。而且路也愈走愈分明，天也愈走愈亮了。&lt;/p&gt;&lt;h1 id=&quot;买药&quot;&gt;&lt;a href=&quot;#买药&quot; class=&quot;headerlink&quot; title=&quot;买药&quot;&gt;&lt;/a&gt;买药&lt;/h1&gt;&lt;p&gt;老栓走到银行门口，停住脚步，想了想，拿起手机拨打了电话。电话接通了，传来不耐烦慵懒的声音。&lt;/p&gt;&lt;p&gt;“谁啊？那么早！”&lt;br&gt;“是我，那个…老栓。我现在就打钱给你们，药什么时候能到？”&lt;br&gt;“哦！”手机里传来的声音瞬间精神起来，“您放心！今天就给您发货！这两天肯定送到您家！”&lt;br&gt;“那药真的管用吗？”&lt;br&gt;“您放心吧！您要不信任我们的话，可以上某度贴吧看看啊！里面有好多吃了我们药后康复的病友发的贴子！您说，要没用的话早就有帖子说我们是假药了不是？这消费者的口碑是做不了假的，您就放一百个心吧！”&lt;br&gt;“哦，不能便宜点吗？为这病家也没剩多少钱了……”&lt;br&gt;“哎呀大叔！我们这药为什么这么贵？就是因为有效果啊！如果卖便宜的话您才需要担心呐！您去某度搜搜这病，首页出来的是不是我们公司的药？为什么？就是因为它效果好啊！如果没有重金投入，怎么出好效果？老实说，要不是您在贴吧咨询过我那么多次，我也了解点您的情况，我怎么可能会给您这么低的价格？”&lt;br&gt;“嗯嗯，我知道了，谢谢你啊。我现在就给你转过去，是这个账号没错吧？”老栓拿出纸条，念出数字。&lt;br&gt;“没错！就这个！我上班后就给您发货！嘿，老爷子，您可够早的，我这儿天还没亮呢……”&lt;br&gt;老栓走到ATM前，插入卡，输入密码，对着纸条一个数字一个数字地输入账号，把钱汇了过去。&lt;/p&gt;&lt;h1 id=&quot;回家&quot;&gt;&lt;a href=&quot;#回家&quot; class=&quot;headerlink&quot; title=&quot;回家&quot;&gt;&lt;/a&gt;回家&lt;/h1&gt;&lt;p&gt;“哎哟老栓这么早出来锻炼？”他走出银行，似乎听得有人问他，但他并不答应；他的精神，现在只在一个包裹上，仿佛那是一个十世单传的婴儿，别的事情，都已置之度外。他现在正等着这个新的生命，移植到家里，收获许多幸福。&lt;/p&gt;&lt;p&gt;天完全亮了，在他面前，显出一条大道；雾霾淹没了一切，路虽宽，却不知尽头。&lt;/p&gt;&lt;p&gt;老栓似乎已习惯了这一切，微笑着望向前方，心里感慨道：这世道真是变了啊。从前遇到疑难杂症问路无门，现在有了某度，一切都方便快捷了。&lt;/p&gt;&lt;h1 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h1&gt;&lt;p&gt;“救星啊！”老栓心里暗自感叹，心里有种似曾相识的感觉，想了很久，“对，我儿子出生那天的感觉！”。&lt;/p&gt;&lt;p&gt;老栓边走边想着病好后的家庭计划，渐渐地，消失在雾霾里…&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;luxun.jpg&quot; alt=&quot;missing luxun&quot;&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起早&quot;&gt;&lt;a href=&quot;#起早&quot; class=&quot;headerlink&quot; title=&quot;起早&quot;&gt;&lt;/a&gt;起早&lt;/h1&gt;&lt;p&gt;深冬的后半夜，月亮下去了，太阳还没有出，只剩下一片冷蓝的天；除了夜游的东西，什么都睡着了。&lt;/p&gt;&lt;p&gt;华老栓忽然坐起，摸索下了床，找到了开
    
    </summary>
    
      <category term="随笔" scheme="http://zerosoul.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="小说" scheme="http://zerosoul.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="故事新编" scheme="http://zerosoul.github.io/tags/%E6%95%85%E4%BA%8B%E6%96%B0%E7%BC%96/"/>
    
      <category term="鲁迅" scheme="http://zerosoul.github.io/tags/%E9%B2%81%E8%BF%85/"/>
    
  </entry>
  
  <entry>
    <title>工程师的演讲利器</title>
    <link href="http://zerosoul.github.io/2016/01/16/how-to-ppt/"/>
    <id>http://zerosoul.github.io/2016/01/16/how-to-ppt/</id>
    <published>2016-01-16T07:28:33.000Z</published>
    <updated>2016-01-19T02:53:46.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;技术从业者似乎有个普遍的问题：&lt;strong&gt;不擅长表达&lt;/strong&gt;。当然，表达方式有多种：写作，作画，舞蹈，甚至摄影，等等。而此处要说的，特指口头表达，也就是演讲。&lt;/p&gt;&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h1&gt;&lt;p&gt;提到演讲，无论是给领导汇报，还是给同事做分享，最好有个PPT做辅助，而这正是干技术的头痛所在：不愿意花时间把PPT做到像市场部那样美轮美奂，认为是浪费时间，最后只是在每一张Slide上放几个词，美名曰“简单即美”，其实是在自欺欺人。&lt;/p&gt;&lt;p&gt;如果你也遇到过类似烦恼，或许下面提到的两个工具能帮助你：&lt;/p&gt;&lt;h2 id=&quot;impress-js&quot;&gt;&lt;a href=&quot;#impress-js&quot; class=&quot;headerlink&quot; title=&quot;impress.js&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://impress.github.io/impress.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress.js&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;impress.png&quot; alt=&quot;impress.js&quot;&gt;&lt;/p&gt;&lt;p&gt;这个神器是我在2014年找工作期间无意间看到的，被官方&lt;a href=&quot;http://impress.github.io/impress.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;的效果惊艳到了，果断找来&lt;a href=&quot;https://github.com/impress/impress.js/blob/master/js/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;阅读，研究了一下其中的原理，又发现如此绚丽的效果，用到的技术并不复杂：其核心便是CSS3的Transform和Transition特性。但能把这两个特性运用的如此炉火纯青，歪果仁在利用技术方面，又一次领先了。出于对impress.js的喜爱，当时利用此工具，给自己的做了个&lt;a href=&quot;http://zerosoul.github.io/impress-resume/#/landing_page&quot;&gt;在线简历&lt;/a&gt;。现在看来内容多少有些幼稚，但从浏览体验来说，依然不错。Thank to impress.js!&lt;/p&gt;&lt;p&gt;如果想超赶市场部同事的PPT特效，名副其实的impress.js不会让你失望，相信也会impress到你！&lt;/p&gt;&lt;h2 id=&quot;reveal-js&quot;&gt;&lt;a href=&quot;#reveal-js&quot; class=&quot;headerlink&quot; title=&quot;reveal.js&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reveal.js&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;reveal.png&quot; alt=&quot;reveal.js&quot;&gt;&lt;/p&gt;&lt;p&gt;这个神器是最近一两周才结识的，也是一见钟情并实战了一次，效果不错。它的特点就是简洁，高大上。impress.js的使用还需要一些坐标计算，reveal.js仅仅需要考虑方向，上下左右，so easy！前两天部门领导要在年度总结大会上做演讲，正发愁怎么做PPT呢，果断不能错过推销神器的机会。在了解领导演讲意图之后，我在impress.js和reveal.js之间选择了reveal.js出马。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;ppt.jpg&quot; alt=&quot;ppt&quot;&gt;&lt;/p&gt;&lt;p&gt;值得一提的是，reveal.js有插件机制，有许多优秀插件可以提高演讲逼格，比如，这次总结大会上用到的&lt;a href=&quot;https://github.com/ysmood/notell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;远程控制插件&lt;/a&gt;，乔布斯演讲的即视感有木有！？如果对自己要讲什么已经胸有成竹，做PPT的目的仅仅是为了提示自己讲到哪儿了，该讲哪儿了。那么，reveal.js来干这事儿再适合不过了。&lt;/p&gt;&lt;h1 id=&quot;再说两句&quot;&gt;&lt;a href=&quot;#再说两句&quot; class=&quot;headerlink&quot; title=&quot;再说两句&quot;&gt;&lt;/a&gt;再说两句&lt;/h1&gt;&lt;p&gt;以上只是简单感性地介绍一下两款神器，其实还有很多特性都没有介绍到，等待你去挖掘。不过工具终究是工具，不能代替我们思考。做演讲最重要的还是清楚自己要讲什么：&lt;strong&gt;主题明确，逻辑清晰，没有PPT，同样能达到表达的目的。&lt;/strong&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;技术从业者似乎有个普遍的问题：&lt;strong&gt;不擅长表达&lt;/strong&gt;。当然，表达方式有多种：写作，作画，舞蹈，甚至摄影，等等。而此处要
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="演讲工具" scheme="http://zerosoul.github.io/tags/%E6%BC%94%E8%AE%B2%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PPT" scheme="http://zerosoul.github.io/tags/PPT/"/>
    
      <category term="impress.js" scheme="http://zerosoul.github.io/tags/impress-js/"/>
    
      <category term="reveal.js" scheme="http://zerosoul.github.io/tags/reveal-js/"/>
    
  </entry>
  
  <entry>
    <title>使用BrowserSync 2.0提高前端开发逼格</title>
    <link href="http://zerosoul.github.io/2016/01/14/Improve-Your-Workflow-With-BrowserSync-2-0/"/>
    <id>http://zerosoul.github.io/2016/01/14/Improve-Your-Workflow-With-BrowserSync-2-0/</id>
    <published>2016-01-14T02:54:18.000Z</published>
    <updated>2016-01-14T07:24:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;Web开发，尤其是前端开发，经常要做的就是不停地“试错”。下面的场景你是否熟悉：&lt;/p&gt;&lt;p&gt;1.在浏览器打开网页&lt;br&gt;2.更改一两行代码&lt;br&gt;3.点击浏览器的刷新，重复 &lt;strong&gt;步骤2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;周而复始，还要在不同的设备，不同的浏览器，不同的测试方法，Oh God，编码本来是一项充满创造性的工作，为何如此苦逼？&lt;/p&gt;&lt;h1 id=&quot;希望&quot;&gt;&lt;a href=&quot;#希望&quot; class=&quot;headerlink&quot; title=&quot;希望&quot;&gt;&lt;/a&gt;希望&lt;/h1&gt;&lt;p&gt;程序员应该养成一个优秀习惯：当意识到有重复性的动作，反思一下能不能交给机器来做？有关上面提到的不停地“试错”，其实早就有了解决方式：BrowserSync。我比较懒，懒到人家都出2.0了，才开始了解与使用。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;好工具从来不会缺席，只是有时候会迟到。 – 尼古拉斯•杨二&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们先来看一下新版本有哪些特性：&lt;/p&gt;&lt;h2 id=&quot;实时刷新-Live-reloading&quot;&gt;&lt;a href=&quot;#实时刷新-Live-reloading&quot; class=&quot;headerlink&quot; title=&quot;实时刷新 (Live reloading)&quot;&gt;&lt;/a&gt;实时刷新 (Live reloading)&lt;/h2&gt;&lt;p&gt;这个应该是基本的吧。修改某个文件（html,css,js），会自动刷新你所打开的所有浏览页面，对，也包括手机端的，这个挺酷的。&lt;/p&gt;&lt;h2 id=&quot;交互同步-Interaction-synchronization&quot;&gt;&lt;a href=&quot;#交互同步-Interaction-synchronization&quot; class=&quot;headerlink&quot; title=&quot;交互同步(Interaction synchronization)&quot;&gt;&lt;/a&gt;交互同步(Interaction synchronization)&lt;/h2&gt;&lt;p&gt;一句话概括就是：镜像你的交互。滚动页面，点击，表单操作等等会被同步到每个你打开的浏览器。这招在调试移动端页面相当有用，都知道在手机输入文字的痛苦，尤其是英文，有了它，妈妈再也不会看到你拿着手机打字纠结的表情了：完全可以在PC上相应文本框输入文本，然后会同步到每个关联的移动设备上，Amazing！除此之外，你还可以选择哪些交互可以被镜像，真贴心！&lt;/p&gt;&lt;h2 id=&quot;远程调试-Remote-inspector&quot;&gt;&lt;a href=&quot;#远程调试-Remote-inspector&quot; class=&quot;headerlink&quot; title=&quot;远程调试(Remote inspector)&quot;&gt;&lt;/a&gt;远程调试(Remote inspector)&lt;/h2&gt;&lt;p&gt;可以使用类似谷歌的 &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dev Tools&lt;/a&gt; 来远程调试页面。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;browsersync2-weinre.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;模拟网速-Simulate-slower-connections&quot;&gt;&lt;a href=&quot;#模拟网速-Simulate-slower-connections&quot; class=&quot;headerlink&quot; title=&quot;模拟网速(Simulate slower connections)&quot;&gt;&lt;/a&gt;模拟网速(Simulate slower connections)&lt;/h2&gt;&lt;p&gt;Dev Tools 里面已有这个功能，相当实用的一个功能，有些开发问题只有在网速慢的情况才好复现。看来，优秀的工具总是能戳中使用者的痛点。&lt;/p&gt;&lt;h2 id=&quot;记录浏览历史-URL-history&quot;&gt;&lt;a href=&quot;#记录浏览历史-URL-history&quot; class=&quot;headerlink&quot; title=&quot;记录浏览历史(URL history)&quot;&gt;&lt;/a&gt;记录浏览历史(URL history)&lt;/h2&gt;&lt;p&gt;浏览历史被记录的好处就是可以随时推送某个测试网址到所有设备，免去记忆和输入的成本，相当便捷。&lt;/p&gt;&lt;h2 id=&quot;新UI！-New-UI&quot;&gt;&lt;a href=&quot;#新UI！-New-UI&quot; class=&quot;headerlink&quot; title=&quot;新UI！(New UI)&quot;&gt;&lt;/a&gt;新UI！(New UI)&lt;/h2&gt;&lt;p&gt;如果不习惯命令行控制方式，可以使用基于网页的UI管理。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;browsersync2-gui.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;兼容构建工具-Build-tool-compatibility&quot;&gt;&lt;a href=&quot;#兼容构建工具-Build-tool-compatibility&quot; class=&quot;headerlink&quot; title=&quot;兼容构建工具(Build-tool compatibility)&quot;&gt;&lt;/a&gt;兼容构建工具(Build-tool compatibility)&lt;/h2&gt;&lt;p&gt;可以和Gulp,Grunt以及其它构建工具配套使用。&lt;br&gt;&lt;strong&gt;注：这个特性我还没有尝试，不过看起来很高级很好玩的样子。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;下载即用！-Install-anywhere-for-free&quot;&gt;&lt;a href=&quot;#下载即用！-Install-anywhere-for-free&quot; class=&quot;headerlink&quot; title=&quot;下载即用！(Install anywhere for free)&quot;&gt;&lt;/a&gt;下载即用！(Install anywhere for free)&lt;/h2&gt;&lt;p&gt;BrowserSync是开源作品，并且支持Windows, Mac OS and Linux三大操作平台。不需要安装浏览器插件或者其他软件，妈妈再也不用担心乱装东西啦。&lt;/p&gt;&lt;h1 id=&quot;BrowserSync-是怎样的工作原理&quot;&gt;&lt;a href=&quot;#BrowserSync-是怎样的工作原理&quot; class=&quot;headerlink&quot; title=&quot;BrowserSync 是怎样的工作原理&quot;&gt;&lt;/a&gt;BrowserSync 是怎样的工作原理&lt;/h1&gt;&lt;p&gt;启用BrowserSync时，会建立一个小型web服务器。如果本地存在一个web服务器或者需要与一个线上网站建立联系，可以将BrowserSync当做一个代理服务器。它将在每个访问的页面注入一小段js代码，并使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebSockets/WebSockets_reference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;websocket&lt;/strong&gt;&lt;/a&gt;与服务器通信。当有事件触发时，比如更改了某个文件或者触发了滚动操作，服务端便会向所有的连接设备发送更新。&lt;/p&gt;&lt;p&gt;如果你的定位是使用而非参与开发BrowserSync，了解到这里就足够啦。&lt;/p&gt;&lt;h1 id=&quot;如何安装&quot;&gt;&lt;a href=&quot;#如何安装&quot; class=&quot;headerlink&quot; title=&quot;如何安装&quot;&gt;&lt;/a&gt;如何安装&lt;/h1&gt;&lt;p&gt;那么…如何安装呢？有个前提条件：安装&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;命令行执行&lt;code&gt;node -v&lt;/code&gt;，确保Node安装OK。&lt;/p&gt;&lt;p&gt;全局安装BrowserSync:&lt;code&gt;npm install browser-sync -g&lt;/code&gt;&lt;/p&gt;&lt;p&gt;注：我在Mac下遇到个问题，需要在npm前面加&lt;code&gt;sudo&lt;/code&gt;，才能执行成功，应该跟本人的环境配置有关。&lt;/p&gt;&lt;p&gt;测试安装OK与否：&lt;code&gt;browser-sync --version&lt;/code&gt;&lt;/p&gt;&lt;p&gt;看看BrowserSync下有哪些命令可以使用：&lt;code&gt;browser-sync --help&lt;/code&gt;&lt;/p&gt;&lt;h1 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h1&gt;&lt;p&gt;举个例子：&lt;br&gt;假设有个&lt;code&gt;test&lt;/code&gt;文件夹，里面有HTML文件和css文件夹，css文件夹里面当然是css文件啦。&lt;br&gt;首先，先跑到&lt;code&gt;test&lt;/code&gt;文件夹下：&lt;code&gt;cd test&lt;/code&gt;&lt;/p&gt;&lt;p&gt;然后 BrowserSync 之：&lt;code&gt;browser-sync start --server --files &amp;quot;*.html, css/*.css&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;随后将启用一个小型服务器，并监听test下的所有html和css文件夹下的css文件。此时此刻，命令行界面应该显示类似这样的一列信息：&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[BS] Access URLs:
 -------------------------------------
       Local: http://localhost:3000
    External: http://192.168.1.21:3000
 -------------------------------------
          UI: http://localhost:3001
 UI External: http://192.168.1.21:3001
 -------------------------------------
[BS] Serving files from: ./
[BS] Watching files...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;code&gt;External&lt;/code&gt;表示在同一网段下的所有设备都可以访问这个地址。&lt;code&gt;UI&lt;/code&gt;的意思就是网页版的控制中心。&lt;/p&gt;&lt;p&gt;还有许多其它特性可以从命令行挖掘。总而言之，花上一两个小时来体验一下，相信你从今以后会离不开它！&lt;/p&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.browsersync.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserSync官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.browsersync.io/docs/command-line/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserSync文档&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;Web开发，尤其是前端开发，经常要做的就是不停地“试错”。下面的场景你是否熟悉：&lt;/p&gt;&lt;p&gt;1.在浏览器打开网页&lt;br&gt;2.更改一两行代码
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端开发" scheme="http://zerosoul.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="工具" scheme="http://zerosoul.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="BrowserSync" scheme="http://zerosoul.github.io/tags/BrowserSync/"/>
    
  </entry>
  
  <entry>
    <title>杨二小</title>
    <link href="http://zerosoul.github.io/2015/12/20/about-2016/"/>
    <id>http://zerosoul.github.io/2015/12/20/about-2016/</id>
    <published>2015-12-20T12:36:58.000Z</published>
    <updated>2016-01-19T02:44:27.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;楔子&quot;&gt;&lt;a href=&quot;#楔子&quot; class=&quot;headerlink&quot; title=&quot;楔子&quot;&gt;&lt;/a&gt;楔子&lt;/h1&gt;&lt;p&gt;生命是场持续而长久的积累，没有人真正在乎你在何时，在何地，是在烧着脑细胞，还是在洒着汗水。人们往往只是在你惊艳众人那一刻惊呼：卧槽，这么牛X怎么做到的？！甚至没有仔细听你解释是如何做到的，就去猎奇下一个惊艳时刻。所以，没那么多观众，放轻松，别活得太累。偶尔遇到愿意听你说到口干舌燥的，别犹豫，那不是友情便是爱情。&lt;/p&gt;&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;去年此时，我大概在构思今年要做的事情，并有意地把其中&lt;a href=&quot;http://zerosoul.github.io/2015/02/01/against-the-flow/&quot;&gt;十件事&lt;/a&gt;以博文的形式暴露出来，其目的是为了形成某种监督，进而对自己有所激励。此时此刻，恰好一年，这种方式目前来看是有效果的，所以没有理由不沿用一下。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;每月写博文&lt;br&gt;忙碌不是逃避思考的借口，恰恰是应该坐下来想一下：为什么这么忙？以前常常有想法，却没有以文字的方式沉淀下来，我觉得是种浪费，效率上的浪费，因为能把思考写出来才有生根发芽的可能性，好记性不如烂博文。一篇技术，一点译文，一篇随笔，或者读书笔记都行，每月至少两篇吧。一年下来24篇，恩，不能再少了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;物尽其用&lt;br&gt;这里的“物”，主要指的是我的MAC本。MAC除了用来装X，对于开发人员更重要的是提高效率，目前我还没有完全适应使用MAC工作，所以物尽其用还有距离呢。当然，工具终究是工具，更重要的是想法，两条腿走路，更稳当一些。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;APP&lt;br&gt;在技术行业工作了几年，耳濡目染久了，也有了互联网产品情节。所以想凭一己之力做个能解决个人具体需求的APP产品，由于自己是干前端的，自然而然的就想到了以前端方式来做。这个过程应该是个学习与实践的好机会，恩，好好玩。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;塑身&lt;br&gt;今年跑步坚持的还不错，身材也相应地变好了一些，但距离“好身材”还略远。所以借着今年打下的底子，继续坚持跑步的同时，办个健身卡，有条件就再请个私教，制定科学的健身计划，持之以恒。虽然走的是健身流程，但最终目的还是想打造完美的身材协调比例，比如肩膀匀不匀称，小腿粗不粗壮，挺胸抬头，全身看上去很协调，就算OK。总之，“主要看气质”，这也是我用的是“塑身”一词，而不是“健身”的原因，至于胸肌，腹肌，肱二头肌发不发达，恩，全是赠品。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;环台湾岛骑行&lt;br&gt;本来计划在今年春节期间去，种种原因拖延到现在，已经来不及了，推到下一年年底吧。或许还是一个人，或许是两人，恩，不能再多了…&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;阅读&lt;br&gt;听说能让人保持创造力的最好方式便是持续地阅读，如果说今年的阅读是为了广度，那么明年便是着重深度。不求多，但求精，速度不快，一两个月啃下一本足矣，附带读书笔记。So… 10本书吧，不能再多了，再多就醉了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;再去一次怀化某山村&lt;br&gt;今年10月份去了次，山清水秀，民风淳朴，与那里结下了更为深厚的不解之缘。从今年开始，每年都会去一次。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;英语进阶&lt;br&gt;英语一直是半瓶子醋水平，虽说应付工作日常足矣，但作为一种开阔视野的好工具，谁不想更为全面地掌握呢。打算通过翻译一本书做起，也算是给“阅读”和“博文”做贡献。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;摄影进阶&lt;br&gt;摄影是个烧钱的爱好，我不是器材党，所以目前来看，总投资没超过5K，都不好意思说自己喜欢摄影了。所谓的进阶，可能更多的是片子的后期。另，入手一个广角镜头，恩，不能再多了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;学一种乐器&lt;br&gt;说来惭愧，曾经有学吉他的冲动，但也就止于冲动了。吉他携带有些不方便，我更习惯低调，所以想到了口琴，恩，练练口活。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;还是那个意思：10件事不是目标，也不是梦想，只是10件事。有些需要常做，比如塑身，有些是一次性，比如骑行，有些烧脑，有些烧钱，有些流汗，甚至有些流泪。不管怎样，都需要努力。努力不是一场真人秀，更像是在做幕后，在看不到的时间与空间持续付出着…&lt;/p&gt;&lt;p&gt;至于梦想，我觉得其实是一个很平常的东西，那句话怎么说的来着：梦想就像内裤，你得有，但是不要经常拿出来炫耀。从不觉得一个人为了梦想付出很多就显得很高尚。每个人都有自己的生活方式，没有梦想或者不愿意为梦想付出的人也值得尊重，毕竟做成一件事有时不是靠实力，还有运气。&lt;/p&gt;&lt;p&gt;“内裤”就不晒了，不过做完以上10件事，梦想应该是更近了一步，更何况明年不止这10件。&lt;/p&gt;&lt;p&gt;努力成为自己想成为的人，不明不白盲目努力的生活，不值得一过。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;about-2016.jpg&quot; alt=&quot;carrying man&quot;&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;楔子&quot;&gt;&lt;a href=&quot;#楔子&quot; class=&quot;headerlink&quot; title=&quot;楔子&quot;&gt;&lt;/a&gt;楔子&lt;/h1&gt;&lt;p&gt;生命是场持续而长久的积累，没有人真正在乎你在何时，在何地，是在烧着脑细胞，还是在洒着汗水。人们往往只是在你惊艳众人那一刻惊呼：卧槽，这么牛X
    
    </summary>
    
      <category term="随笔" scheme="http://zerosoul.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="坚持" scheme="http://zerosoul.github.io/tags/%E5%9D%9A%E6%8C%81/"/>
    
      <category term="计划" scheme="http://zerosoul.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="年终总结" scheme="http://zerosoul.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>科学地使用 Hexo 和 Github Pages 装X</title>
    <link href="http://zerosoul.github.io/2015/11/05/build-personal-site-with-hexo-and-github-pages/"/>
    <id>http://zerosoul.github.io/2015/11/05/build-personal-site-with-hexo-and-github-pages/</id>
    <published>2015-11-05T12:35:22.000Z</published>
    <updated>2016-01-19T02:44:27.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;登陆你的Github&lt;/li&gt;&lt;li&gt;新建一个Repository&lt;/li&gt;&lt;li&gt;将之命名为&lt;em&gt;yourGithubName.github.io&lt;/em&gt;(注意替换yourGithubName)&lt;/li&gt;&lt;li&gt;关键步骤已经完成，其他选项随意啦。点击新建后，别忘了把&lt;em&gt;SSH&lt;/em&gt;的地址copy一份，后面有用到&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;打开终端&lt;/li&gt;&lt;li&gt;Hexo依赖 Node 环境，如果没有先安装 Node &amp;amp; npm，参考&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;&lt;li&gt;安装 Hexo&lt;br&gt;&lt;code&gt;npm install -g hexo&lt;/code&gt;&lt;/li&gt;&lt;li&gt;齐活，Hexo准备完毕&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;开始使用Hexo撸Github需要的东西&quot;&gt;&lt;a href=&quot;#开始使用Hexo撸Github需要的东西&quot; class=&quot;headerlink&quot; title=&quot;开始使用Hexo撸Github需要的东西&quot;&gt;&lt;/a&gt;开始使用Hexo撸Github需要的东西&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;进入到你想放置github pages repository的目录&lt;/li&gt;&lt;li&gt;在此创建Hexo Project&lt;br&gt;&lt;code&gt;hexo init yourGithubName.github.io&lt;/code&gt;&lt;/li&gt;&lt;li&gt;切换到刚刚创建的目录&lt;br&gt;&lt;code&gt;cd yourGithubName.github.io&lt;/code&gt;&lt;/li&gt;&lt;li&gt;安装依赖&amp;amp;生成静态文件&amp;amp;启动本地服务器&lt;br&gt;&lt;code&gt;npm install &amp;amp; hexo g &amp;amp; hexo s&lt;/code&gt;&lt;/li&gt;&lt;li&gt;目测现在就可以通过访问localhost:4000来瞅瞅网站啥样了&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;部署到Github上&quot;&gt;&lt;a href=&quot;#部署到Github上&quot; class=&quot;headerlink&quot; title=&quot;部署到Github上&quot;&gt;&lt;/a&gt;部署到Github上&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;首先，停掉Hexo &lt;code&gt;Control + C&lt;/code&gt;&lt;/li&gt;&lt;li&gt;打开根目录的_config.yml，设置Github地址&lt;br&gt;&lt;code&gt;deploy: type: git repo: git@github.com:yourGithubName/yourGithubName.github.io.git&lt;/code&gt;&lt;/li&gt;&lt;li&gt;部署前，先确认有没有安装&lt;em&gt;&lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-deployer-git&lt;/a&gt;&lt;/em&gt;&lt;br&gt;&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;&lt;/li&gt;&lt;li&gt;部署&lt;br&gt;&lt;code&gt;hexo d&lt;/code&gt;&lt;/li&gt;&lt;li&gt;打开浏览器，访问 &lt;em&gt;yourGithubName.github.io&lt;/em&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;写作&quot;&gt;&lt;a href=&quot;#写作&quot; class=&quot;headerlink&quot; title=&quot;写作&quot;&gt;&lt;/a&gt;写作&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;使用Markdown写作，完事后保存到source/_posts/&lt;/li&gt;&lt;li&gt;重新生成静态文件&lt;br&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/li&gt;&lt;li&gt;运行&lt;code&gt;hexo s&lt;/code&gt;在本地查看刚刚写的文章&lt;/li&gt;&lt;li&gt;木问题的话，更新至Github&lt;br&gt;&lt;code&gt;hexo d&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;绑定自己的域名&quot;&gt;&lt;a href=&quot;#绑定自己的域名&quot; class=&quot;headerlink&quot; title=&quot;绑定自己的域名&quot;&gt;&lt;/a&gt;绑定自己的域名&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;我通过淘宝代理&lt;a href=&quot;https://www.godaddy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Godaddy&lt;/a&gt;购买了 &lt;a href=&quot;http://zerosou.us&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zerosoul.github.io&lt;/a&gt; 域名，就拿这个举例如何绑定吧&lt;/p&gt;&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;Github上进入 zerosoul.github.io&lt;/li&gt;&lt;li&gt;创建并提交CNAME文件，里面只有一行内容，就是域名：&lt;code&gt;zerosoul.github.io&lt;/code&gt;&lt;/li&gt;&lt;li&gt;去Godaddy网站管理域名页面&lt;br&gt;&lt;img src=&quot;godaddy_setting.jpg&quot; alt=&quot;godaddy setting&quot;&gt;&lt;/li&gt;&lt;li&gt;增加一条 A 记录:host=&lt;code&gt;@&lt;/code&gt;，Points to=&lt;code&gt;192.30.252.153&lt;/code&gt;&lt;/li&gt;&lt;li&gt;增加一条 CNAME 记录:host=&lt;code&gt;www&lt;/code&gt;，Points to=&lt;code&gt;zerosoul.github.io&lt;/code&gt;&lt;/li&gt;&lt;li&gt;最后，一定要记得保存更改！&lt;br&gt;&lt;img src=&quot;godaddy_saving.jpg&quot; alt=&quot;godaddy saving&quot;&gt;&lt;/li&gt;&lt;li&gt;静待更改生效，大概一两个小时。&lt;/li&gt;&lt;/ol&gt;&lt;h1 id=&quot;两个小时后…&quot;&gt;&lt;a href=&quot;#两个小时后…&quot; class=&quot;headerlink&quot; title=&quot;两个小时后…&quot;&gt;&lt;/a&gt;两个小时后…&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;装X成功！&lt;/strong&gt;&lt;/p&gt;&lt;h1 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo doc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github pages basic&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring a Godaddy domain name with github pages&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Githu
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="http://zerosoul.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://zerosoul.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://zerosoul.github.io/tags/blog/"/>
    
      <category term="nodejs" scheme="http://zerosoul.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>鼹鼠的故事</title>
    <link href="http://zerosoul.github.io/2015/08/19/the-mole-story/"/>
    <id>http://zerosoul.github.io/2015/08/19/the-mole-story/</id>
    <published>2015-08-19T05:50:16.000Z</published>
    <updated>2015-11-10T11:40:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;罗伊&quot;&gt;&lt;a href=&quot;#罗伊&quot; class=&quot;headerlink&quot; title=&quot;罗伊&quot;&gt;&lt;/a&gt;罗伊&lt;/h1&gt;&lt;p&gt;前段时间看完了一部吴秀波的电视剧，《道可道》，拍摄时间比较老，但非常精彩。&lt;/p&gt;&lt;p&gt;吴秀波饰演的一位名叫罗伊的律师。一个在别人看来自私，刻薄，狂妄，懦弱的律师，一个曾用法律为己服务，却为捍卫法律献出了生命的律师。&lt;/p&gt;&lt;p&gt;妻子的误解，家庭破碎，婚姻结束，同事们的不理解和冷落，受陷害在看守所里遭屈辱，无法从事他喜爱的律师工作。一个个打击摧残了自负的罗伊，特立独行的罗伊，傲慢的罗伊，自以为强大的罗伊，还有善良的罗伊，一个视家庭、亲情、事业、为己生命的罗伊，他变得沉默、不再张扬、不再伶牙俐齿…&lt;/p&gt;&lt;p&gt;也许，有人会说他不是一个好人，因为在他的眼里没有道德标准，只有法律。也许，也有人会说他不是一个好律师，因为他曾利用法律去达到自己的目的。也许，还有人会说他不是一个聪明人，竟用自己的生命做武器来捍卫法律。&lt;/p&gt;&lt;p&gt;可你不能不承认，他是个有勇气的人。以“救人是最大的道，敬业是最大的德”为信条，为了一个执著的信念 &lt;strong&gt;法律面前人人平等&lt;/strong&gt; ，可以不惜任何代价，以至于生命。&lt;/p&gt;&lt;p&gt;电视剧里最打动我的就是罗伊给同事女儿讲《鼹鼠的故事》的桥段，他内心的孤独，无助在此时此刻爆发，这种精神上的孤独比他从小失去父母更让人感到心痛。罗伊何尝不是这个小鼹鼠呢，只想拥有一片属于自己的天空。&lt;/p&gt;&lt;h1 id=&quot;《鼹鼠的故事》&quot;&gt;&lt;a href=&quot;#《鼹鼠的故事》&quot; class=&quot;headerlink&quot; title=&quot;《鼹鼠的故事》&quot;&gt;&lt;/a&gt;《鼹鼠的故事》&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;森林里的草地上的草莓藤的花儿已经谢了&lt;br&gt;渐渐的白天长了&lt;br&gt;夜短了&lt;/p&gt;&lt;p&gt;小鼹鼠在家里脚痒痒的&lt;br&gt;它觉得该到外面走一走，活动一下了&lt;/p&gt;&lt;p&gt;对于一只鼹鼠来说&lt;br&gt;目的地是永远想不到的&lt;br&gt;你可能不相信&lt;br&gt;有一次这只小鼹鼠&lt;br&gt;竟从地下通道来到了库坦尼克城&lt;br&gt;出现在城里的广场上&lt;/p&gt;&lt;p&gt;起初小鼹鼠只能从一条条椅子缝中间看到一条条的天空&lt;br&gt;在这个城里&lt;br&gt;广场不是你可以随便就有机会独占的&lt;br&gt;“这样的地方值得我留住吗？我应该走吗？”&lt;/p&gt;&lt;p&gt;小鼹鼠是个流浪者&lt;br&gt;它躲在自己的洞里&lt;br&gt;有的时候它觉得拥有整个世界&lt;br&gt;可有的时候又什么都没有&lt;/p&gt;&lt;p&gt;它每天在自己的城堡里爬来爬去&lt;br&gt;不知道上面的世界是什么样子&lt;br&gt;它很想让人知道自己是快乐的&lt;br&gt;但也是孤独的……&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;剧照&quot;&gt;&lt;a href=&quot;#剧照&quot; class=&quot;headerlink&quot; title=&quot;剧照&quot;&gt;&lt;/a&gt;剧照&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;luoyi.jpg&quot; alt=&quot;罗伊&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;center&gt;亦正亦邪的罗伊&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;mole_story.jpg&quot; alt=&quot;在给小女孩讲故事的罗伊&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;center&gt;在给小女孩讲鼹鼠故事&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;罗伊&quot;&gt;&lt;a href=&quot;#罗伊&quot; class=&quot;headerlink&quot; title=&quot;罗伊&quot;&gt;&lt;/a&gt;罗伊&lt;/h1&gt;&lt;p&gt;前段时间看完了一部吴秀波的电视剧，《道可道》，拍摄时间比较老，但非常精彩。&lt;/p&gt;&lt;p&gt;吴秀波饰演的一位名叫罗伊的律师。一个在别人看来自私，
    
    </summary>
    
      <category term="随笔" scheme="http://zerosoul.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zerosoul.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="吴秀波" scheme="http://zerosoul.github.io/tags/%E5%90%B4%E7%A7%80%E6%B3%A2/"/>
    
      <category term="电视剧" scheme="http://zerosoul.github.io/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>程序员看了会流泪，产品经理看了会沉默</title>
    <link href="http://zerosoul.github.io/2015/05/22/fuck-the-pm/"/>
    <id>http://zerosoul.github.io/2015/05/22/fuck-the-pm/</id>
    <published>2015-05-22T04:23:04.000Z</published>
    <updated>2016-05-02T04:47:53.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;pm.png&quot; alt=&quot;pm expression&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章来自于微信公众号&lt;strong&gt;产品小妖&lt;/strong&gt;，具体作者是谁忘记了，如有侵权，请与我联系。文章有共鸣，讲的都是经验之谈，程序员看了会流泪，产品经理看了会沉默，其中一些场景我也碰到过，感同身受。做产品没那么简单，尤其是团队化来完成一个项目，专业素养和沟通同样重要。&lt;/p&gt;&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;开始实施之前&quot;&gt;&lt;a href=&quot;#开始实施之前&quot; class=&quot;headerlink&quot; title=&quot;开始实施之前&quot;&gt;&lt;/a&gt;开始实施之前&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;说不清需求价值&lt;/strong&gt;，技术问“为什么要做”的时候，支支吾吾，或者说“老板要的、运营要的”，成为了传话筒，是最Low的，相反，能有理有据的顶老板的产品经理，通常会在大家的眼中逼格满满；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;没想到功能细节&lt;/strong&gt;，表现为技术问细节（当然，是涉及业务的细节，不是技术实现细节）的时候，自己还没想过，现场想，被发现了，或者因为是接二手需求，并不知道、也没有去追溯这个需求的初衷；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;帮技术评估工作量&lt;/strong&gt;，特别是技术出身的产品经理容易犯这个错，潜台词就是“希望加活”，我评估过了，这些都能做掉的，不要给我偷懒；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;逼着技术团队承诺&lt;/strong&gt;，产品经理想的是，如果技术承诺了，但却做不到，这样自己就没责任了，但很多事情，在开始的时候是谁也不知道的，应该大家在一条船上同舟共济，这就是“接力跑”和“踢足球”在交棒/传球之后的区别。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;实施过程中&quot;&gt;&lt;a href=&quot;#实施过程中&quot; class=&quot;headerlink&quot; title=&quot;实施过程中&quot;&gt;&lt;/a&gt;实施过程中&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;做了一半改需求&lt;/strong&gt;，scrum里的表现就是sprint内的非受迫需求变更，大家很难忍受的是产品经理自己没想清楚，而导致的劳动浪费，俗话说“没有变更就没有伤害”，碰到性子烈的就直接要干架了，当然，如果是外部市场变了，大家都可以理解；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;开发过程中消失&lt;/strong&gt;，你可以出差、可以开会，但是要能及时响应技术的问题，要不然，为了进度大家照着自己的想法做下去，验收的时候产品经理跑出来说“这不是我要的”，可不要怪没人理你；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;过度关注实现细节&lt;/strong&gt;，帮技术决定技术方案，也是技术出身的产品经理容易犯的错，越俎代庖了，会降低技术同学的积极性，渐渐的就完全打工心态了。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;产品发布之后&quot;&gt;&lt;a href=&quot;#产品发布之后&quot; class=&quot;headerlink&quot; title=&quot;产品发布之后&quot;&gt;&lt;/a&gt;产品发布之后&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;发布后没有反馈&lt;/strong&gt;，技术人员也需要从市场、用户那里获得反馈，从而知道自己做的事情产生了价值，提升成就感，做完发布，石沉大海，大家是不可能有owner感的；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;无节奏感&lt;/strong&gt;，让技术人员忙一阵闲一阵，发布之后再忙着研究接下来做什么，让技术人员在干死干活的高强度之后突然不知道做什么，几天后又开始要赶进度。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;全过程都有&quot;&gt;&lt;a href=&quot;#全过程都有&quot; class=&quot;headerlink&quot; title=&quot;全过程都有&quot;&gt;&lt;/a&gt;全过程都有&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;优柔寡断无决断&lt;/strong&gt;，是产品经理最要不得的品质，就是在已经讨论完毕后，大家都等着你拍板的时候“你说吧，往哪儿走我们就跟着办”，这时候你说“啊，那个，各种方案各有利弊啊，我也不知道怎么办啊，你们有什么好想法……”，你就完蛋了；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;报喜不报忧&lt;/strong&gt;，产品经理总想藏着掖着一些信息，比如“老板在考虑干掉这个项目”这类信息，出发点可能是好的，但，当大家通过其他途径知道了以后，互信就完全打破了，大家会觉得“你还是把我们当资源”。&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;pm.png&quot; alt=&quot;pm expression&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章来自于微信公众号&lt;strong&gt;产品小妖&lt;
    
    </summary>
    
      <category term="它山之石" scheme="http://zerosoul.github.io/categories/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="转载" scheme="http://zerosoul.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="产品经理" scheme="http://zerosoul.github.io/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="经验之谈" scheme="http://zerosoul.github.io/tags/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>逆流鱼</title>
    <link href="http://zerosoul.github.io/2015/02/01/against-the-flow/"/>
    <id>http://zerosoul.github.io/2015/02/01/against-the-flow/</id>
    <published>2015-02-01T06:53:18.000Z</published>
    <updated>2015-11-10T11:38:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;(一)&quot;&gt;&lt;/a&gt;(一)&lt;/h1&gt;&lt;p&gt;当在公司年会听到视频里的自己说出“累”字时，虽然早有心理准备，心里还是咯噔了一下。2014年，你累吗？说不累是假的，从公司的第一个前端做起，现在发展到四人，期间的酸甜苦辣自己最清楚。从单打独斗，习惯了所有问题一个人搞定，到任务的分配，人力的安排，搞定自己那一块的同时还得随时协调其它部门的问题。好在前端个个都是有节操，不，有职业素养的人，后来的许多事，一个眼神的交流就够了，基情，不，激情就是这么来的，累也值了。&lt;/p&gt;&lt;h1 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;(二)&quot;&gt;&lt;/a&gt;(二)&lt;/h1&gt;&lt;p&gt;这一年过得好快，几乎是一路狂奔，每天都在解决问题，到头来却把自己的问题一直拖到了现在。2014年，我变成了一个无趣的人，给不了别人快乐与幸福，只好把闷骚投入到工作中。2015年，我想改变，波折肯定有的，就像心电图，那表明自己还活着。想了想，新的一年想做的大概有这么几件事：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;del&gt;打铁还需自身硬，所以第一件事就是健身。似乎是个老生常谈了，但身体这事儿，就像防火，等到出问题时就晚了。健身的方式很简单，爬楼梯[17层]和跑步，爬楼已经坚持大概四个月了，每个工作日两次，所以只需重启跑步。&lt;/del&gt;&lt;/li&gt;&lt;li&gt;阅读。似乎也是个老生常谈，但阅读这事儿，得细水长流。2014年，新增了43本书，其中已读大概占三分之二，剩下的滚到2015年，加之新计划入手的11本书，够够的。&lt;/li&gt;&lt;li&gt;&lt;del&gt;一天一个苹果。&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;去掉黑眼角，听说提高睡眠质量是根本，而谈质量心态平和是根本，所以还是得“随缘向善，阿弥陀佛”。&lt;/del&gt;&lt;/li&gt;&lt;li&gt;给父母，奶奶健康体检&lt;/li&gt;&lt;li&gt;&lt;del&gt;带父母来北京看看，圆母亲天安门前留影的愿望&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;在家买套房，让家人过个安全省事的暖冬。父母为我操劳一辈子，有时想想为他们做的真的很少。我就是一风筝，飘得再远，也是有根线牵着，线的那头，便是家。&lt;/del&gt;&lt;/li&gt;&lt;li&gt;练练口才，不再闷骚。多去参加一些前端活动，或许管用。&lt;/li&gt;&lt;li&gt;戒酒。白酒本来就不沾，从今以后啤酒也不碰了。酒，烟，小轿车和保险，这辈子和我无缘了，给别人买的不算。&lt;/li&gt;&lt;li&gt;&lt;del&gt;凑个假期，回骑行的某个地方看看。三年前的那次长途骑行发生了太多的故事，后来和一些人都有或多或少的联系，总觉得这是一份得之不易的缘分，应该回去看看，既是感恩，也是放松之旅。&lt;/del&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我个人一直很抵触“目标”一词，因为它让人有距离感，“事情”就不一样了，围绕在身边的感觉，任何值得做的事情都值得现在去做。所以以上都是一些2015要做或者在做的事情，不是目标。有些很简单，有些很枯燥，有些蹦一蹦还是够得到。当然，一年很长，不会就做这些事，有些事没必要列出来，之所以说出上面那些，是为了形成某种监督。比如某天你见到我，问最近在看什么书，如果我回答得支支吾吾的，你就可以立马断定：丫就是一骗子！再比如某日你碰到我，问今天吃苹果没，我也可以理直气壮地勒索你一个苹果。&lt;/p&gt;&lt;h1 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;(三)&quot;&gt;&lt;/a&gt;(三)&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;如果生活的本意是将一个人当做一件产品来打磨的话，当前的自己只能是件半成品。我不想最终变成残次品，所以，还得继续接受生活的敲打。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;杨二离开了，逆流鱼又来了，意味着新的一年，不能再顺着自己了。给一些期许吧：&lt;strong&gt;生活复杂，自我简单，标新立异，化繁为简。&lt;/strong&gt;&lt;/p&gt;&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;一年快过去了，在2015年11月的某一天，我总结了下年初写下的这些事：把完成的或者已经养成习惯的&lt;del&gt;划掉&lt;/del&gt;，剩下是没做或者没做完的和失败的。阅读，属于没做完的，新年之前差不多能完成；体检属于没做的，这个不算难，但是父母说没必要，天冷了，嫌麻烦，也就拖到现在了，等天气暖和了再做吧；练口才，说实话，已经放弃治疗o(╯□╰)o；戒酒，这个在年中最终还是没抵制住，喝了些啤酒，只好把底线往下拉一拉：不要喝醉。2015马上过去了，我希望能交出让自己满意的成绩单。加油吧，骚年！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;against_the_flow.jpg&quot; alt=&quot;running boy&quot;&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;(一)&quot;&gt;&lt;/a&gt;(一)&lt;/h1&gt;&lt;p&gt;当在公司年会听到视频里的自己说出“累”字时，虽然早有心理准备，心里还是咯噔了一下。2014年，你累吗？说不累是假的，从公司的第一个前端做起，
    
    </summary>
    
      <category term="随笔" scheme="http://zerosoul.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="坚持" scheme="http://zerosoul.github.io/tags/%E5%9D%9A%E6%8C%81/"/>
    
      <category term="计划" scheme="http://zerosoul.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="年终总结" scheme="http://zerosoul.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>三味书屋</title>
    <link href="http://zerosoul.github.io/2014/11/16/memory-about-bookstore/"/>
    <id>http://zerosoul.github.io/2014/11/16/memory-about-bookstore/</id>
    <published>2014-11-16T12:37:22.000Z</published>
    <updated>2015-11-10T11:39:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;(一)&quot;&gt;&lt;/a&gt;(一)&lt;/h1&gt;&lt;p&gt;时至今日，渐渐意识到，书之于我，可以说是生命之不可或缺。究其渊源，或与儿时的生活，有着千丝万缕的关联。&lt;/p&gt;&lt;p&gt;我家有个书店，几与我同岁。说起小时候，怎么也绕不过它的存在。&lt;/p&gt;&lt;p&gt;最初，店小，所以只能叫书屋。再确切点，应该是“小木书屋”。对它的记忆，是从小学低年级开始的。当时的书屋，镇上仅此一家（目前也是）。天一亮，父亲便把店门打开，然后将两个大大的窗户木板支起，便是开张了，春夏秋冬，每天如此。大大小小的书籍杂志用夹子夹住，再用铁丝串起，挂在了玻璃窗内，从上到下，一排一排，花花绿绿的：从外面看，书屋更像个小杂货店。可以说，自小我便比其他孩子有学习资源的优势，但上帝是公平的：小时候的我，患有儿童多动症，在书本面前，根本坐不住，时间稍长，就或走神，或犯困。那时的自己常常幻想：要是那些个花花绿绿的是玩具和零食，该有多好！&lt;/p&gt;&lt;p&gt;说起多动症，其实是被哥哥“传染”的。起初，我没有病，见哥哥常常“挤眉弄眼”，我跟着学，也就“自成一家”了。后来，父亲决心让哥哥休学治病，本就对上学毫无兴趣的我，见此机会，“学”得更加起劲，简直“青胜于蓝”，便以此要挟一起休学。父亲是懂我的：不就是想玩么？批了！之后的日子却让我傻眼了：父亲带哥哥寻医治病，却把我扔在了书屋里“看门”，最要命的是，我与同龄的小伙伴已经脱节，根本就不能好好玩耍。上帝又是公平的，傻眼的处境迫使我安静下来，先是拿书屋里的卡通漫画看，什么三毛流浪记，老夫子，等等被我翻了个遍之后，又打起了童话书的主意，什么格林，安徒生，郑渊洁，又被慰问了个遍。那时的自己识字不多，经常出现的一幕就是：童话书与字典并排，遇到不懂的字便按照上面的拼音查字典。就这样，慢慢地，发展到最后，竟然能捧着字典当书看，饶有兴趣地坐上一整天：我的病有救了，书屋功不可没。&lt;/p&gt;&lt;p&gt;回到学校，本该四年级的我插到了三年级，好玩的事情开始了：相比其他同学，我识字多，学起来也就快，良性循环，很快地便由小学渣逆袭成小学霸，没错，就是那种天天玩却还能顺手拿第一的怪胎。然而，好景不长，毕竟年龄小，不懂得事情的因由，上帝还是公平的，小学一毕业，便打回了凡尘：肚子里那点墨水不够用了，学习开始变得吃力。恰巧，书屋开始转型，从木屋搬到了街对面，可以勉强称之为书店了。地方大了些，书的种类也就多了些，包括一些恰好能派上用场的教辅书。上了初中，便有意识地找些弥补自己弱科目的教辅来用，学生生涯又开始变得顺水顺舟，课余时间多了起来，那段时光，想想都是美好的：书店离学校很近，却常常迟到，无所谓，趁着跑早操经过书店门口的时候，跐溜一下就能混到队伍中，神不知鬼不觉（至少看上去是这样）；临近考试，都在临阵磨枪，我自然也不落后，背课文的时候也不忘了想着书店里有哪一期杂志还没有看过，是的，包括凤姐常说的《故事会》；考试上战场，别人大包小包的书——就像炸药包——都带上，生怕漏掉重要的知识点，我就一支笔，一个准考证，最多考数学时再加个尺子演算纸什么的，轻松上阵。日子好得就差早个恋什么的了。当然，学海无涯苦作舟，我也并非一直这么嘚瑟，有时也栽跟头，但通过书店里的教辅有重点地练习，还是能及时跟进。其实，现在想想，当时的书店就是我的家庭教师和课余玩伴：课业紧的时候，能够给以重点指导，课余又能接触到丰富多彩的课外读物。良师益友，不过如此。&lt;/p&gt;&lt;p&gt;快乐的时光总是短暂的，我的高中时代是在远离家乡的县城度过的。与绝大多数的中国学生一样，这是一段灰色的时光，远离了家中书店，每天过着三点一线的生活。有时也在县城的书店闲逛，却再也找不回在家时的感觉。唯一的宽慰便是每月回家能看到书架上多了许多新面孔，顺便背着父亲拿上几本回来偷着看。就这样看完了路遥的《平凡世界》《人生》，余华的《兄弟》《活着》，周国平的《岁月与性情》，还有《鲁迅全集》《古文观止》…直到有次课上看《三国演义》被班主任发现之后，才有所收敛。记得那时看过一本书，《世界是平的》，印象比较深，以至于后来大学专业选择了软件工程。想想还是挺奇妙的，虽然远离了书店，但它还在时不时地影响着我，甚至帮我决定了努力的方向。&lt;/p&gt;&lt;p&gt;本来就和书店若即若离，大学后来了个更彻底的：每年也就一两次机会回家。面对本可以五光十色的生活，我却时常躲到学校图书馆呆上半天，或许是因为直到那时，还对书店的感觉依依不舍，而图书馆是最接近这种感觉的地方。时隔时间长了，每次回家都能明显感觉出书店的变化，地点又换了，书架又多了，课外读物越来越少了，教辅书越来越多了，来书店看闲书的人越来越少了，带着目的来买书的人越来越多了，但书店的生意是越来越不好做了。虽然不知道书店的变化是好是坏，但有一点可以确定，儿时呆在书店的感觉，已经一去不复返。好在曾经拥有，重要的不是环境，而是心境，&lt;strong&gt;一本好书，就可以把自己拉回当初的感觉，这种感觉能让一个人或充满希望，或充满斗志，或心存善意，或兴趣盎然地不断探索未知&lt;/strong&gt;。真的，不骗你，我大学毕业时，就完成了一次看似不靠谱甚至不可能的事情：单人单车，一路借宿，从南方骑到了北方，骑行一个月，2500公里，与其说旅行，不如说是探险。后来有很多人联系我，请教攻略什么的，其实许多人不知道，我的行李包中有一本薄薄的书，书名叫《老人与海》。&lt;/p&gt;&lt;h1 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;(二)&quot;&gt;&lt;/a&gt;(二)&lt;/h1&gt;&lt;p&gt;书店给予我的，并不在于识了多少字，读了多少书，虽然这很重要，但更重要的是，这个过程培养起的：&lt;strong&gt;对知识的谦卑，对自然的敬畏，对生活的热爱，对人生的坦然&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;小时候学过一篇课文，好像是鲁迅先生写的：《从百草园到三味书屋》。具体内容已记不得了，只是觉得“三味书屋”，这个名字挺有意思：三，在古文中并不单指具体数字，更多的时候是代表多的含义。三味，也就是多味，就像人生，酸甜苦辣咸，挨个尝个遍，方知最能打动你的是什么味。也许以后我也会有家书屋，就叫“三味书屋”，空间不大，但有味，书不多，但有品。人来人往，进来坐坐，歇歇脚，也是不错的。&lt;/p&gt;&lt;h1 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;(三)&quot;&gt;&lt;/a&gt;(三)&lt;/h1&gt;&lt;p&gt;哦对了，家中书店的名字是“春华书店”，虽至今也不知父亲为何取名“春华”，我的名字里也有个“春”字，这就是命，也许是吧…&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;bookstore.jpg&quot; alt=&quot;my father and bookstore&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.zreading.cn/archives/4637.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文最初发表在&lt;strong&gt;左岸读书&lt;/strong&gt;上的传送门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zreading.cn/archives/2961.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;毕业骑行（一）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zreading.cn/archives/2983.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;毕业骑行（二）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zreading.cn/archives/3013.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;毕业骑行（三）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;(一)&quot;&gt;&lt;/a&gt;(一)&lt;/h1&gt;&lt;p&gt;时至今日，渐渐意识到，书之于我，可以说是生命之不可或缺。究其渊源，或与儿时的生活，有着千丝万缕的关联。&lt;/p&gt;&lt;p&gt;我家有个书店，几与我同岁
    
    </summary>
    
      <category term="流金岁月" scheme="http://zerosoul.github.io/categories/%E6%B5%81%E9%87%91%E5%B2%81%E6%9C%88/"/>
    
    
      <category term="随笔" scheme="http://zerosoul.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="故乡" scheme="http://zerosoul.github.io/tags/%E6%95%85%E4%B9%A1/"/>
    
      <category term="书屋" scheme="http://zerosoul.github.io/tags/%E4%B9%A6%E5%B1%8B/"/>
    
      <category term="家乡" scheme="http://zerosoul.github.io/tags/%E5%AE%B6%E4%B9%A1/"/>
    
  </entry>
  
  <entry>
    <title>读《100 THINGS EVERY DESIGNER NEEDS TO KNOW ABOUT PEOPEL》</title>
    <link href="http://zerosoul.github.io/2014/06/05/100-things-every-designer-needs-to-know-about-people/"/>
    <id>http://zerosoul.github.io/2014/06/05/100-things-every-designer-needs-to-know-about-people/</id>
    <published>2014-06-05T02:04:09.000Z</published>
    <updated>2016-06-05T02:23:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;designer.jpg&quot; alt=&quot;designer&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;How-people-see&quot;&gt;&lt;a href=&quot;#How-people-see&quot; class=&quot;headerlink&quot; title=&quot;How people see&quot;&gt;&lt;/a&gt;How people see&lt;/h1&gt;&lt;h2 id=&quot;What-you-see-isn’t-what-your-brain-gets&quot;&gt;&lt;a href=&quot;#What-you-see-isn’t-what-your-brain-gets&quot; class=&quot;headerlink&quot; title=&quot;What you see isn’t what your brain gets&quot;&gt;&lt;/a&gt;What you see isn’t what your brain gets&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;What you think people are going to see on your webpage may not be what they do see.It might depend on their background knowledge,familiarity with what they are looking at,and expectations.&lt;/p&gt;&lt;p&gt;You might be able to persuade people to see thing in a certain way,depending on how they are presented.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Periphral-vision-is-used-more-than-central-vision-to-get-the-gist-of-what-you-see&quot;&gt;&lt;a href=&quot;#Periphral-vision-is-used-more-than-central-vision-to-get-the-gist-of-what-you-see&quot; class=&quot;headerlink&quot; title=&quot;Periphral vision is used more than central vision to get the gist of what you see.&quot;&gt;&lt;/a&gt;&lt;em&gt;Periphral vision&lt;/em&gt; is used more than central vision to &lt;em&gt;get the gist of&lt;/em&gt; what you see.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;If you want users to concentrate on a certain part of the screen,don’t put animation or blinking elements in their peripheral vision&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;Periphral vision:边缘视觉&lt;/code&gt; &lt;code&gt;get the gist of:获取要义&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-identify-objects-by-recognizing-patterns&quot;&gt;&lt;a href=&quot;#People-identify-objects-by-recognizing-patterns&quot; class=&quot;headerlink&quot; title=&quot;People identify objects by recognizing patterns&quot;&gt;&lt;/a&gt;People identify objects by recognizing patterns&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Use pattens as much as possible since people will automatically be looking for them.Use grouping and white space to create patterns.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;Blederman&amp;#39;s geons&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;There’s-a-special-part-of-the-brain-just-for-recognizing-faces&quot;&gt;&lt;a href=&quot;#There’s-a-special-part-of-the-brain-just-for-recognizing-faces&quot; class=&quot;headerlink&quot; title=&quot;There’s a special part of the brain just for recognizing faces&quot;&gt;&lt;/a&gt;There’s a special part of the brain just for recognizing faces&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;People recognize and react to faces on Web pages faster than anything else on the page(at least by those who are not autistic).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;fusiform face area (FFA):纺锤体(脸部区域)&lt;/code&gt; &lt;code&gt;autism:孤独症&lt;/code&gt; &lt;code&gt;morph:在屏幕上&lt;/code&gt; &lt;code&gt;mannequin:人体模型(服装店放的)&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-imagine-objects-tilted-and-at-a-sight-angle-above&quot;&gt;&lt;a href=&quot;#People-imagine-objects-tilted-and-at-a-sight-angle-above&quot; class=&quot;headerlink&quot; title=&quot;People imagine objects tilted and at a sight angle above.&quot;&gt;&lt;/a&gt;People imagine objects tilted and at a sight angle above.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;People recoginze a drawing or object faster and remember it better if it’s shown in the canonical perspective.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;canonical perspective:从规范的角度看&lt;/code&gt; &lt;code&gt;takeaways:外卖品&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-scan-screens-based-on-past-experience-and-expectations&quot;&gt;&lt;a href=&quot;#People-scan-screens-based-on-past-experience-and-expectations&quot; class=&quot;headerlink&quot; title=&quot;People scan screens based on past experience and expectations.&quot;&gt;&lt;/a&gt;People scan screens based on past experience and expectations.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Put the most important information(or things you want to people focus on)in the top third of the screen or in the middle.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-see-cues-that-tell-them-what-to-do-with-an-object&quot;&gt;&lt;a href=&quot;#People-see-cues-that-tell-them-what-to-do-with-an-object&quot; class=&quot;headerlink&quot; title=&quot;People see cues that tell them what to do with an object.&quot;&gt;&lt;/a&gt;People see &lt;em&gt;cues&lt;/em&gt; that tell them what to do with an object.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;If you want people to take action on an object,thether in real life or on a computer screen,you need to make sure that they can easily &lt;em&gt;perceive&lt;/em&gt;,figure out,and interpret what the object is and what they can and should do with it.&lt;/p&gt;&lt;p&gt;Avoid providing incorrect affordance cues.&lt;/p&gt;&lt;p&gt;Rethink hover cues if you are designing for a device that uses touch rather than a pointing device.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;cues:these cues are called _affordances_&lt;/code&gt; &lt;code&gt;affordance:功能可见性，自解释性&lt;/code&gt; &lt;code&gt;perceive:觉察，感觉，理解，认知&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-can-miss-changes-in-their-visual-fields&quot;&gt;&lt;a href=&quot;#People-can-miss-changes-in-their-visual-fields&quot; class=&quot;headerlink&quot; title=&quot;People can miss changes in their visual fields.&quot;&gt;&lt;/a&gt;People can miss changes in their visual fields.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;If you are paying attention to one thing, and you don’t expect changes to appear,then you can easily miss changes.&lt;/p&gt;&lt;p&gt;If you want to be sure that people notice a change in their visual fields,add additional visual cues(such as blinking)or auditory cues(such as beap).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;ascribe:归因于&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-believe-that-things-that-are-close-together-belong-together&quot;&gt;&lt;a href=&quot;#People-believe-that-things-that-are-close-together-belong-together&quot; class=&quot;headerlink&quot; title=&quot;People believe that things that are close together belong together.&quot;&gt;&lt;/a&gt;People believe that things that are close together belong together.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Sometimes changing the spacing is sufficient,and you will be reducing the visual noise of the page.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;Red-and-blue-together-are-hard-on-the-eyes&quot;&gt;&lt;a href=&quot;#Red-and-blue-together-are-hard-on-the-eyes&quot; class=&quot;headerlink&quot; title=&quot;Red and blue together are hard on the eyes.&quot;&gt;&lt;/a&gt;Red and blue together are hard on the eyes.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;recess:休息，凹处&lt;/code&gt; &lt;code&gt;recessed:嵌壁式的&lt;/code&gt; &lt;code&gt;chromstereopsis:彩色的立体视觉&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&quot;9-men-and-4-women-are-color-blind&quot;&gt;&lt;a href=&quot;#9-men-and-4-women-are-color-blind&quot; class=&quot;headerlink&quot; title=&quot;9% men and 4% women are color-blind.&quot;&gt;&lt;/a&gt;9% men and 4% women are color-blind.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Avoid red,green and blue(around them).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;misnomer:用词不当&lt;/code&gt; &lt;code&gt;decipher:密电译文(n)译解(vt)&lt;/code&gt; &lt;code&gt;camouflage:伪装，掩饰&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.vischeck.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check before your color taste&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;The-meaning-of-colors-vary-by-culture&quot;&gt;&lt;a href=&quot;#The-meaning-of-colors-vary-by-culture&quot; class=&quot;headerlink&quot; title=&quot;The meaning of colors vary by culture.&quot;&gt;&lt;/a&gt;The meaning of colors vary by culture.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;agitate:摇动&lt;/code&gt; &lt;code&gt;agitated:激动的（不安）&lt;/code&gt; &lt;code&gt;soothing：抚慰的，使人安心的&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://informationisbeautiful.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data visualization&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;how-people-read&quot;&gt;&lt;a href=&quot;#how-people-read&quot; class=&quot;headerlink&quot; title=&quot;how people read&quot;&gt;&lt;/a&gt;how people read&lt;/h1&gt;&lt;h2 id=&quot;It’s-myth-that-captal-letters-are-inerently-hard-to-read&quot;&gt;&lt;a href=&quot;#It’s-myth-that-captal-letters-are-inerently-hard-to-read&quot; class=&quot;headerlink&quot; title=&quot;It’s myth that captal letters are inerently hard to read.&quot;&gt;&lt;/a&gt;It’s myth that captal letters are inerently hard to read.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;saccade and fixation:眼睛飞快地扫视和定影&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;Reading-and-comprehending-are-two-different-things&quot;&gt;&lt;a href=&quot;#Reading-and-comprehending-are-two-different-things&quot; class=&quot;headerlink&quot; title=&quot;Reading and comprehending are two different things.&quot;&gt;&lt;/a&gt;Reading and comprehending are two different things.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Reading is all about anticipating the next word.&lt;/p&gt;&lt;p&gt;Don’t assume that people will remember specific info in what they read.&lt;/p&gt;&lt;p&gt;Provide a meaningful title or headline.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;The Flesch-Kincaid Readability Formula:206.835 - 1.015(total words/total sentences) - 84.6(total syllables/total words)&lt;/code&gt; &lt;code&gt;syllable:音节&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;Pattern-recogniting-helps-people-identify-letters-in-different-fonts&quot;&gt;&lt;a href=&quot;#Pattern-recogniting-helps-people-identify-letters-in-different-fonts&quot; class=&quot;headerlink&quot; title=&quot;Pattern recogniting helps people identify letters in different fonts.&quot;&gt;&lt;/a&gt;Pattern recogniting helps people identify letters in different fonts.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Unusual or overly decorative fonts can interfere with pattern recognition and slow down reading.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Font-size-matters&quot;&gt;&lt;a href=&quot;#Font-size-matters&quot; class=&quot;headerlink&quot; title=&quot;Font size matters.&quot;&gt;&lt;/a&gt;Font size matters.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Large x-heights can make a font look larger.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Reading-a-computer-screen-is-hrader-than-reading-paper&quot;&gt;&lt;a href=&quot;#Reading-a-computer-screen-is-hrader-than-reading-paper&quot; class=&quot;headerlink&quot; title=&quot;Reading a computer screen is hrader than reading paper.&quot;&gt;&lt;/a&gt;Reading a computer screen is hrader than reading paper.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Black text on a white background is easiest to read.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-read-faster-with-a-longer-line-length-but-they-perfer-a-shorter-line-length&quot;&gt;&lt;a href=&quot;#People-read-faster-with-a-longer-line-length-but-they-perfer-a-shorter-line-length&quot; class=&quot;headerlink&quot; title=&quot;People read faster with a longer line length,but they perfer a shorter line length.&quot;&gt;&lt;/a&gt;People read faster with a longer line length,but they perfer a shorter line length.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Use a longer line length(100 characters per line) if reading is an issue,vesvus.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;quandary:困惑，为难&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 id=&quot;how-people-remember&quot;&gt;&lt;a href=&quot;#how-people-remember&quot; class=&quot;headerlink&quot; title=&quot;how people remember&quot;&gt;&lt;/a&gt;how people remember&lt;/h1&gt;&lt;h2 id=&quot;Short-term-memory-is-limited&quot;&gt;&lt;a href=&quot;#Short-term-memory-is-limited&quot; class=&quot;headerlink&quot; title=&quot;Short-term memory is limited.&quot;&gt;&lt;/a&gt;Short-term memory is limited.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Stress impairs working memory.&lt;/p&gt;&lt;p&gt;Working memory is sensitive to interference – too much sensory input will prevent them from focusing attention.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-remember-only-four-items-at-once&quot;&gt;&lt;a href=&quot;#People-remember-only-four-items-at-once&quot; class=&quot;headerlink&quot; title=&quot;People remember only four items at once.&quot;&gt;&lt;/a&gt;People remember only four items at once.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;magic number:4&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-have-to-use-information-to-make-it-stick&quot;&gt;&lt;a href=&quot;#People-have-to-use-information-to-make-it-stick&quot; class=&quot;headerlink&quot; title=&quot;People have to use information to make it stick.&quot;&gt;&lt;/a&gt;People have to use information to make it stick.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;How do people move things from working memory into long-term memory?There are basically two ways:repeat it a lot,or connect it to sth they already know.&lt;/p&gt;&lt;p&gt;The head is a schema ,so is eye.People use schema (plural for schema) to store information in long-tern memory and to retrieve it.&lt;/p&gt;&lt;p&gt;If people already have a shcema that relates to information that you are providing,make sure you point out what that schema is.It will be easier for them to learn and remember the information if they can plug it into an existing schema.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;It’s-easier-to-recognize-information-than-recall-it&quot;&gt;&lt;a href=&quot;#It’s-easier-to-recognize-information-than-recall-it&quot; class=&quot;headerlink&quot; title=&quot;It’s easier to recognize information than recall it.&quot;&gt;&lt;/a&gt;It’s easier to recognize information than recall it.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Recognition makes use of context and context helps you remember.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;Inclusion errors&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;Memory-takes-a-lot-of-mental-resources&quot;&gt;&lt;a href=&quot;#Memory-takes-a-lot-of-mental-resources&quot; class=&quot;headerlink&quot; title=&quot;Memory takes a lot of mental resources.&quot;&gt;&lt;/a&gt;Memory takes a lot of mental resources.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Recency Effect:近因效应&lt;/code&gt; &lt;code&gt;Suffix Effect:附加效应&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Information in the middle of a presentation will be the least likely to be remembered.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-reconstruct-memory-each-time-they-remember-them&quot;&gt;&lt;a href=&quot;#People-reconstruct-memory-each-time-they-remember-them&quot; class=&quot;headerlink&quot; title=&quot;People reconstruct memory each time they remember them.&quot;&gt;&lt;/a&gt;People reconstruct memory each time they remember them.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;aloof:冷淡的&lt;/code&gt; &lt;code&gt;testimonies:见证，证据&lt;/code&gt; &lt;code&gt;grain of salt:有保留的&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The later experience has changed your memory&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;It’s-a-good-thing-that-people-forget&quot;&gt;&lt;a href=&quot;#It’s-a-good-thing-that-people-forget&quot; class=&quot;headerlink&quot; title=&quot;It’s a good thing that people forget.&quot;&gt;&lt;/a&gt;It’s a good thing that people forget.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Design with forgetting in mind.If some information is really important,don’t rely on people to remember it.Provide it for them in your design,or have a way for them to easily look it up.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;maladaptive:不利于适应的&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;The-most-vivid-memories-are-wrong&quot;&gt;&lt;a href=&quot;#The-most-vivid-memories-are-wrong&quot; class=&quot;headerlink&quot; title=&quot;The most vivid memories are wrong.&quot;&gt;&lt;/a&gt;The most vivid memories are wrong.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;traumatic:创伤的，使人不快的&lt;/code&gt; &lt;code&gt;flashbulb memory&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you know that someone had a dramatic or traumatic experience,you need to understand two things:1.They will be convinced that what they remember is true and 2.It’s not exactly true!&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;how-people-think&quot;&gt;&lt;a href=&quot;#how-people-think&quot; class=&quot;headerlink&quot; title=&quot;how people think&quot;&gt;&lt;/a&gt;how people think&lt;/h1&gt;&lt;h2 id=&quot;People-process-information-better-in-bite-sized-chunks&quot;&gt;&lt;a href=&quot;#People-process-information-better-in-bite-sized-chunks&quot; class=&quot;headerlink&quot; title=&quot;People process information better in bite-sized chunks.&quot;&gt;&lt;/a&gt;People process information better in bite-sized chunks.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Progressive Disclosure&lt;/code&gt; &lt;code&gt;《Don&amp;#39;t make me think》&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you have to make a trade-off on clicks versus thinking,use more clicks and less thinking.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Some-types-of-mental-processing-are-more-challenging-than-others&quot;&gt;&lt;a href=&quot;#Some-types-of-mental-processing-are-more-challenging-than-others&quot; class=&quot;headerlink&quot; title=&quot;Some types of mental processing are more challenging than others.&quot;&gt;&lt;/a&gt;Some types of mental processing are more challenging than others.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;All “loads” are not equal:cognitive,visual,motor.&lt;/p&gt;&lt;p&gt;When you design a product, remember that making people think or remember (cognitive load) requires the most mental resources.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Minds-wander-30-of-the-time&quot;&gt;&lt;a href=&quot;#Minds-wander-30-of-the-time&quot; class=&quot;headerlink&quot; title=&quot;Minds wander 30% of the time.&quot;&gt;&lt;/a&gt;Minds wander 30% of the time.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;mind wander != daydream&lt;/p&gt;&lt;p&gt;People like Web surfing because it grabs onto mind wandering (hyper links).&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;The-more-uncertain-people-are-the-more-they-defend-thier-ideas&quot;&gt;&lt;a href=&quot;#The-more-uncertain-people-are-the-more-they-defend-thier-ideas&quot; class=&quot;headerlink&quot; title=&quot;The more uncertain people are, the more they defend thier ideas.&quot;&gt;&lt;/a&gt;The more uncertain people are, the more they defend thier ideas.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Cognitive dissonance:认知不一致&lt;/code&gt; &lt;code&gt;tenable: 站得住脚的&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Don’t speed a lot of time trying to change someone’s ingrained(根深蒂固的) beliefs.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-create-mental-models&quot;&gt;&lt;a href=&quot;#People-create-mental-models&quot; class=&quot;headerlink&quot; title=&quot;People create mental models.&quot;&gt;&lt;/a&gt;People create mental models.&lt;/h2&gt;&lt;hr&gt;&lt;h2 id=&quot;People-interact-with-conceptual-models&quot;&gt;&lt;a href=&quot;#People-interact-with-conceptual-models&quot; class=&quot;headerlink&quot; title=&quot;People interact with conceptual models.&quot;&gt;&lt;/a&gt;People interact with conceptual models.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;One of the best purposes of training on a new pruduct is to adjust the audiences mental model to fit to the conceptual model of the product.&lt;/p&gt;&lt;p&gt;The secret to designing an intuitive user experience is making sure that the conceptual model of your product matches as much as possible,the mental models of your audience.If you get it right,you will have created a positive and useful experience.&lt;/p&gt;&lt;p&gt;If you have a brand new product that you know will not match anyone’s mental model, you will need to provide training to prepare people to create a new mental model.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-process-information-best-in-story-form&quot;&gt;&lt;a href=&quot;#People-process-information-best-in-story-form&quot; class=&quot;headerlink&quot; title=&quot;People process information best in story form.&quot;&gt;&lt;/a&gt;People process information best in story form.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;rivet:固定&lt;/code&gt; &lt;code&gt;causation：原因，因果关系&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;People-learn-best-from-examples&quot;&gt;&lt;a href=&quot;#People-learn-best-from-examples&quot; class=&quot;headerlink&quot; title=&quot;People learn best from examples.&quot;&gt;&lt;/a&gt;People learn best from examples.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Don’t just tell people what to do ,show them.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-are-driven-to-create-categories&quot;&gt;&lt;a href=&quot;#People-are-driven-to-create-categories&quot; class=&quot;headerlink&quot; title=&quot;People are driven to create categories.&quot;&gt;&lt;/a&gt;People are driven to create categories.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;People like to put things into categories.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Time-is-relative&quot;&gt;&lt;a href=&quot;#Time-is-relative&quot; class=&quot;headerlink&quot; title=&quot;Time is relative.&quot;&gt;&lt;/a&gt;Time is relative.&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;The more mental processing you do,the more time you think has elapsed.&lt;/p&gt;&lt;p&gt;Always provide progress indicates so people know how much time sth is going to take.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;There-are-four-ways-to-be-creative&quot;&gt;&lt;a href=&quot;#There-are-four-ways-to-be-creative&quot; class=&quot;headerlink&quot; title=&quot;There are four ways to be creative.&quot;&gt;&lt;/a&gt;There are four ways to be creative.&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Cognitive&lt;/th&gt;&lt;th&gt;Emotional&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Deliberate&lt;/td&gt;&lt;td&gt;Thomas Edison&lt;/td&gt;&lt;td&gt;Therapeutic A-ha Moment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Spontaneous&lt;/td&gt;&lt;td&gt;Newton&amp;amp;the apple&lt;/td&gt;&lt;td&gt;Artists Musicians&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;(自发无意识的)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Deliberate &amp;amp; Cognitive Creativity&lt;br&gt;Pay focused attention&lt;br&gt;Make connections ammong bits of information you’ve stored in other parts of your brain.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Deliberate &amp;amp; Emotional Creativity&lt;br&gt;&lt;code&gt;infest:寄生，骚扰&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spontaneous &amp;amp; Cognitive Creativiy&lt;br&gt;&lt;code&gt;ganglia:神经节&lt;/code&gt; &lt;code&gt;dopamine：多巴胺&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spontaneous &amp;amp; Emotional Creativity&lt;br&gt;&lt;code&gt;amygdala:扁桃体&lt;/code&gt; &lt;code&gt;epiphany：主显节&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;Remember that your own creative process for design follows these same rules.Allow yourself time to work on a creative design solution and when you are stuck,sleep on it.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;People-can-be-in-a-flow-state&quot;&gt;&lt;a href=&quot;#People-can-be-in-a-flow-state&quot; class=&quot;headerlink&quot; title=&quot;People can be in a flow state.&quot;&gt;&lt;/a&gt;People can be in a flow state.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;engross:全神贯注&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you’re trying to design for,or induce,a flow state (for example,you are a game designer)&lt;br&gt;1.Give people contol over their actions during the activity.&lt;br&gt;2.Break up the difficulty into stages to feel that the current goal is challenging,yet achievable.&lt;br&gt;3.Give constant feedback.&lt;br&gt;4.Minimize distractions&lt;/p&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;h2 id=&quot;Culture-affect-how-people-think&quot;&gt;&lt;a href=&quot;#Culture-affect-how-people-think&quot; class=&quot;headerlink&quot; title=&quot;Culture affect how people think&quot;&gt;&lt;/a&gt;Culture affect how people think&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Be careful of overgeneralizing.&lt;/p&gt;&lt;/blockquote&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;designer.jpg&quot; alt=&quot;designer&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;How-people-see&quot;&gt;&lt;a href=&quot;#How-people-see&quot; class=&quot;headerlink&quot; title=&quot;How people see&quot;&gt;&lt;/
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计师" scheme="http://zerosoul.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
      <category term="心理学" scheme="http://zerosoul.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>探索 Javascript Event Delegation</title>
    <link href="http://zerosoul.github.io/2014/05/12/JavaScript-Event-Delegation/"/>
    <id>http://zerosoul.github.io/2014/05/12/JavaScript-Event-Delegation/</id>
    <published>2014-05-12T07:37:33.000Z</published>
    <updated>2016-06-12T08:35:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;事件代理也算是Javascript中的热点话题，它可以给节点的某个父节点增加监听行为，从而避免了在每个节点都做监听。父节点分析冒泡过来的事件，并找到是来自于哪个节点。概念很简单，但是到底是怎么个过程，还是有些迷糊。下面，通过例子来探索下。&lt;/p&gt;&lt;h1 id=&quot;实例探索&quot;&gt;&lt;a href=&quot;#实例探索&quot; class=&quot;headerlink&quot; title=&quot;实例探索&quot;&gt;&lt;/a&gt;实例探索&lt;/h1&gt;&lt;p&gt;比如说，有一个父元素:&lt;code&gt;ul&lt;/code&gt;，下面有几个子元素：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ul id=&amp;quot;parent-list&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-1&amp;quot;&amp;gt;Item 1&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-2&amp;quot;&amp;gt;Item 2&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-3&amp;quot;&amp;gt;Item 3&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-4&amp;quot;&amp;gt;Item 4&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-5&amp;quot;&amp;gt;Item 5&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li id=&amp;quot;post-6&amp;quot;&amp;gt;Item 6&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我想给子元素加上单击事件，当然可以单独为每个&lt;code&gt;li&lt;/code&gt;设置事件监听，但是，如果&lt;code&gt;li&lt;/code&gt;的改动很频繁，比如新增或删除，该怎么办？如果随之改动各自的监听事件，那将是一场噩梦。比较好的一种解决方式便是给&lt;code&gt;ul&lt;/code&gt;设置监听事件，但是问题又来了，如何知道是哪个元素被点击的？&lt;/p&gt;&lt;p&gt;其实也不难，当事件冒泡到&lt;code&gt;ul&lt;/code&gt;，可以通过&lt;code&gt;event&lt;/code&gt;对象下的&lt;code&gt;target&lt;/code&gt;来获取实际节点的引用。就像下面代码这样：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(&amp;quot;parent-list&amp;quot;).addEventListener(&amp;quot;click&amp;quot;, function(e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // e.target是被点击的元素!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(e.target &amp;amp;&amp;amp; e.target.nodeName == &amp;quot;LI&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;quot;List item &amp;quot;, e.target.id.replace(&amp;quot;post-&amp;quot;, &amp;quot;&amp;quot;), &amp;quot; was clicked!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;事件触发时，检查元素，如果符合条件，那么就是我们想找的元素&lt;code&gt;li&lt;/code&gt;，如果不是，那么直接忽略。这个例子比较简单：&lt;code&gt;ul&lt;/code&gt;和&lt;code&gt;li&lt;/code&gt;有直接的比较关系。下面，我们来点有难度的：比如说有个&lt;code&gt;div&lt;/code&gt;元素下面有许多子元素，但我们关心的只有一个&lt;code&gt;a&lt;/code&gt;标签，它的特征是&lt;code&gt;class=&amp;quot;classA&amp;quot;&lt;/code&gt;:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(&amp;quot;myDiv&amp;quot;).addEventListener(&amp;quot;click&amp;quot;,function(e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (e.target &amp;amp;&amp;amp; e.target.matches(&amp;quot;a.classA&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;quot;Anchor element clicked!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注：通过&lt;a href=&quot;https://davidwalsh.name/element-matches-selector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Element.matches API&lt;/a&gt;，我们能够过滤出想要的元素。&lt;/p&gt;&lt;h1 id=&quot;最后说两句&quot;&gt;&lt;a href=&quot;#最后说两句&quot; class=&quot;headerlink&quot; title=&quot;最后说两句&quot;&gt;&lt;/a&gt;最后说两句&lt;/h1&gt;&lt;p&gt;当然，在大多数业务场景下，我们常用的是类库来写JS代码，比如：&lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;。但是基本上每个类库都有事件代理自己的实现，甚至做了许多高级扩展，使用起来非常方便，比如：&lt;a href=&quot;http://api.jquery.com/on/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery的&lt;code&gt;on&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;事件代理也算是Javascript中的热点话题，它可以给节点的某个父节点增加监听行为，从而避免了在每个节点都做监听。父节点分析冒泡过来的事件
    
    </summary>
    
      <category term="技术" scheme="http://zerosoul.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://zerosoul.github.io/tags/javascript/"/>
    
      <category term="探索系列" scheme="http://zerosoul.github.io/tags/%E6%8E%A2%E7%B4%A2%E7%B3%BB%E5%88%97/"/>
    
      <category term="delegation" scheme="http://zerosoul.github.io/tags/delegation/"/>
    
  </entry>
  
  <entry>
    <title>读《学习的艺术》（乔希·维茨金）</title>
    <link href="http://zerosoul.github.io/2014/05/07/the-art-of-learning/"/>
    <id>http://zerosoul.github.io/2014/05/07/the-art-of-learning/</id>
    <published>2014-05-07T08:29:09.000Z</published>
    <updated>2016-05-24T08:39:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;the_art_of_learning.jpg&quot; alt=&quot;the art of learning&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;成为他人眼中的巅峰人物与生活质量毫无关系，我所追求的是内心的平静。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我把所有时间都放在的学习技巧、原理与理论上，使之成为潜意识的一部分。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;完全融入某项活动，挖掘自己思维的潜能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我必须更深入地认识“精华”、“质”、“原则”、“直觉”和“智慧”等概念，以便可以理解自己的经历，并有机会将其表达出来。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;以数字摆脱数字，以形式摆脱形式，画小圈。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我所擅长的既不是太极，也不是象棋，而是学习的艺术。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从未让技术性的东西影响了我对象棋的内在感觉。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;学习的基本原则就是要钻研微观的细节事物，从而来理解是什么促成了这些宏观上的问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不要做一个招式的收集者。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我们能成为顶尖选手并没有什么秘诀，而是对可能是基本技能的东西有更深的理解。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果我想做到最好，那我就不得不冒别人想避免的险，不得不经常充分挖掘当时的学习潜力，逆转困境为我所用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何做到熟练？首先，从基础开始，通过理解训练的原则所在建立扎实的基础，然后在你个人倾向的指挥下拓宽并完善自己的技能，同时和你认为是艺术的必要实质的东西在抽象层面上保持联系。结果就是你可以更好地吸收各种知识，使得这些从个人的着重点中拓展开来的知识相互连接成一个网络。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;正如各门行当一样，最精深的技巧往往建立在最简单原始的原理上。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果我们只以“度过此生”来作为生活标准，那么永远都不能指望杰出。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对那些生活的强者来说，从容应对每天的学习过程的心理就如同他人梦想着在危机时分能体验最高潮瞬间的那种执着。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我崇尚简单，深入到平凡中，发现以藏于生活之中的丰富才是成功，还有幸福的根源。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当我们真正做到水滴石穿时，不断成长的真正力量才会发挥作用和影响。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我成长过程中，下一步要做的便是在越来越困难的条件下保持自我。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;只有当我们的工作超越熟练阶段而成为自身的一种表达时，学习才成为一门真正的艺术&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;选择一组技艺，内化它们，直到大脑感知到无穷的细节！&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;真正的掌握需要通过自己发现一些最能够引起共鸣的信息，并将其彻底地融合进来，直至成为一体，这样我们才能随心所欲地驾驭它。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;the_art_of_learning.jpg&quot; alt=&quot;the art of learning&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;成为他人眼中的巅峰人物与生活质量毫无关系，我所追求的是内心的平静。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我把所有时间都放在的学习
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="大学" scheme="http://zerosoul.github.io/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="国际象棋" scheme="http://zerosoul.github.io/tags/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B/"/>
    
      <category term="学习" scheme="http://zerosoul.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="乔希·维茨金" scheme="http://zerosoul.github.io/tags/%E4%B9%94%E5%B8%8C%C2%B7%E7%BB%B4%E8%8C%A8%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>读《异类》</title>
    <link href="http://zerosoul.github.io/2014/05/07/outliners/"/>
    <id>http://zerosoul.github.io/2014/05/07/outliners/</id>
    <published>2014-05-07T08:15:27.000Z</published>
    <updated>2016-05-24T08:42:48.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;outliers.jpg&quot; alt=&quot;outlier&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;如果仅从一个人的行为决策方面鼓励看待问题，必将误入歧途。分析问题方式必须超越个体。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;总有潜在的优势、非凡的机遇和文化传统令他们获益，使得他们更努力地学习或工作，使得他们的世界与众不同。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;累积效应（曲棍球队员）出生日期的早晚同样影响这我们的人生进程，出生日期早的孩子，其优势会保持叠加效果。先长起来的大树获得阳光更多反而促进它跟茁壮的成长。成功者获得的机会越多，反而促进他更成功。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这个世界纯粹是一个有才干的人展现自我的世界。计算机世界和以往的人际关系网络不同，在人际关系网络中，你想获得发展必须依靠金钱和人脉，而计算机世界是一个开放的大世界，所有参与者仅仅依靠他们的才干与造诣，就能得到肯定。最卓越的人在这个世界就能够取得胜利，乔伊（Java）无疑是其中的佼佼者。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;成就是天赋与后天储备结合后的产物。可是心理学家越是深入考察天才们的人生经历，越是发现天赋的作用越来越小，而后天储备的作用越来越明显。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;那些最为卓越的人，他们勤奋刻苦的程度是一般人不能想象的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一定程度的紧张练习对那些能够肩负重要使命的卓越者而言，是必不可少的——他们需要一遍一遍研习专业技能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;练习不是一次就把事情做好，而是帮助你做的越来越好。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当经济正发生变革的时候，如果你刚好20来岁，而你又能紧紧把握机遇，那么成功就近在眼前了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;甲壳虫的“汉堡之旅”：马尔科姆总结出，一个人要获得成功，就必须为此付出10000个小时的努力。当然，在努力的过程中，你必须首先得到为此付出的机会。比如甲壳虫乐队，他们得到了去汉堡的机会，而后在汉堡无休止的演出，于是汉堡成就了他们。去汉堡之前，他们没有得到过专业训练，从汉堡回来之后，他们的水平不亚于专业乐队，这，称为“汉堡之旅”。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对个体而言，没有什么比他的智商更重要，或许只有他的道德除外。但成功和智商之间的相互关系只在一定范围内存在，这一点令人难以理解。如果一个人的IQ达到了120左右，那么再增加智商并不会在现实世界给他带来明显优势。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你遇到的是一个真正聪明的小孩，那就完全没必要知道他的IQ是多少&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发散测试：创造力 收敛测试：智商（理性分析能力）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;想象力+勤奋刻苦+雄心勃勃&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;实用智商：为了达到最佳效果，知道自己应该在什么时候，应该怎样和他人说出自己应该说的话。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;自己是为改善世界而生的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我一直认为一个人越是接近事物的本质，就越是生活的更好。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;outliers.jpg&quot; alt=&quot;outlier&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;如果仅从一个人的行为决策方面鼓励看待问题，必将误入歧途。分析问题方式必须超越个体。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;总有潜在的优势、非凡的机遇和文化传统令他们获益，使得他
    
    </summary>
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://zerosoul.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="大学" scheme="http://zerosoul.github.io/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="异类" scheme="http://zerosoul.github.io/tags/%E5%BC%82%E7%B1%BB/"/>
    
  </entry>
  
</feed>
